import{_ as n,o as s,c as a,a as t}from"./app-57d1f7b1.js";const p={},e=t(`<h1 id="c-事件及响应方法" tabindex="-1"><a class="header-anchor" href="#c-事件及响应方法" aria-hidden="true">#</a> C#事件及响应方法</h1><p>出处：PConline 责任编辑：pcedu [03-1-15 14:15] 作者：蔡世友/ASPCool</p><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>C#语言自C/C++演变而来。它是现代、简单、完全面向对象和类型安全的。C#语言是微软公司针对.Net平台才推出来的一门新语言，作为.Net平台的第一语言，它几乎集中了所有关于软件开发和软件工程研究的最新成果。面向对象、类型安全、组件技术、自动内存管理、跨平台异常处理、版本控制、代码安全管理……</p><p>在.NET应用程序开发中，不管是WEB Forms（ASP.NET）还是Windows Forms，都涉及到大量对象的事件响应及处理，比如客户在线提交一份订单、或是在Windows窗口上移动鼠标等都将有事件发生。那么在C#中，是怎样声明事件并为事件添加响应方法的呢？下面的文章对此为大家作了详细的讲述。</p><h2 id="原理简介" tabindex="-1"><a class="header-anchor" href="#原理简介" aria-hidden="true">#</a> 原理简介</h2><p>在C#中，一个类可以有域(Fields)、属性(Properties)、方法(Methods)、索引(Indexs)、事件(Events)等成员，其中事件(Events)成员就是用来声明一个类事件的。在类中声明一个事件成员一般采用如下的语法形式：</p><p><code>public event 代表名 事件名。</code></p><p>如在Control类中声明了一个Click事件成员，其语法如下：</p><p><code>public event EventHandler Click;</code></p><p>在C#中，增加了一个新的数据类型delegate（代表）来解决事件处理问题。代表数据类型非常类似于C语言中的指针，其与指针不同的是，其是代码是安全的，可管理的。由于C#本身的简易性，对于没有使用过Ｃ及指针的程序来说，理解delegate也是非常容易的。</p><p>在C#中，通过使用delegate，你可以通过“+=”（加等于）操作符非常容易地为.Net对象中的一个事件添加一个甚至多个响应方法；还可以通过非常简单的“-=”（减等于）操作符取消这些响应方法。如下面为temp按钮添加Click事件的语句：</p><p><code>temp.Click+=new System.EventHandler(this.Test);//为test添加事件处理方法</code></p><p>在上面声明事件的语句中，Eventhandler是一个delegate(代表)类型，其在.Net类库中如下声明的：</p><p><code>public delegate void EventHandler(object sender,EventArgs e);</code></p><p>这样，所有形如:void 函娄名(object 参数名,EventArgs 参数名);的函数都可以作为Control类的Click事件响应方法了。如下面所定义的一个事件响应方法：</p><p><code>private void button1_Click(object sender, System.EventArgs e)</code></p><p>由于是通过delegate（代表类型）来处理事件，因此，可能通过累加使一个事件具有多个响应方法；与此同时，还可以使一个方法作为多个事件的响应方法。（注意：在C#语言类中的event成员后面只能出现“+=”与“-=”两个表示添加与取消事件响应函数的操作符。）</p><p>不管是ASP.Net还是一般的Windows Forms 编程，在C#中，基本上我们遇到的事件响应方法都是说明成如下的形式：</p><p><code>private void button1_Click(object sender, System.EventArgs e)</code></p><p>那么，一个事件响应方法的存取权限、返回值类型、参数及类型甚至方法名称等是否都必须固定不变呢？答案是：不是！</p><p>一般情况下，事件的响应方法中都有两个参数，其中一个代表引发事件的对象即sender，由于引发事件的对象不可预知的，因此我们把其声明成为object类型，所有的对象都适用。第二个参数代表引发事件的具体信息，各种类型的事件中可能不同，这要根据类中事件成员的说明决定。</p><p>我们知道，事件是通过delegate(代表) 来处理的。假设将要表示事件的代表说明成如下形式：</p><p><code>delegate int MyEventHandler(object sender, ToolBarButtonClickEventArgs e);</code></p><p>则当涉及上面的事件响应函数声明时，就须要声明成如下的形式：</p><p><code>private int MyTest(object sender,ToolBarButtonClickEventArgs e){ }</code></p><p>在给对象添加事件响应方法时就可以用如下的代码实现：</p><p><code>Control.Event+=new MyEventHandler(MyTest);</code></p><h2 id="示例程序" tabindex="-1"><a class="header-anchor" href="#示例程序" aria-hidden="true">#</a> 示例程序</h2><p>下面，我们用Visual Studio .Net开发工具设计了一个简单Windows Forms的程序，向大家展示了C#中具体是怎样实现事件响应处理的。</p><h3 id="主要类" tabindex="-1"><a class="header-anchor" href="#主要类" aria-hidden="true">#</a> 主要类</h3><ul><li>System.Windows.Forms.Application类：应用程序类。</li><li>System.Windows.Forms.Form类：窗体类。</li><li>System.Windows.Forms.Label类：文字标签类，主要用于在窗口上添加标签信息。</li><li>System.Windows.Forms.Button类：按钮类，生成一个命令按。</li><li>System.EventHandler Delegate(代表)：其是.Net类库中的一个公用代表类型，主要用于说明并初始化一个事件方法，该代表具有两个参数object sender表示引发事件的对象，System.EventArgs e 代表事件的相应信息，如鼠标的x,y值等。</li></ul><h3 id="设计简介" tabindex="-1"><a class="header-anchor" href="#设计简介" aria-hidden="true">#</a> 设计简介</h3><p>在Visual Studio .Net选择新建Windows 应用程序，选择程序地址并输入程序名后，将生成一个非常简单的初始化窗体Form1类；在初始窗体中添加一个标签(Label)及一个按钮(Button)并设置相应的位置大小及属性值等。双击按钮进入代码编辑区，此时系统自动生了一个用于处理按钮Click事件的方法，即button1_Click()。在方法中添如下的代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Button</span> temp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
temp<span class="token punctuation">.</span>Text<span class="token operator">=</span><span class="token string">&quot;新增加的按钮&quot;</span><span class="token punctuation">;</span>
temp<span class="token punctuation">.</span>Location<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
temp<span class="token punctuation">.</span>Click<span class="token operator">+=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
label1<span class="token punctuation">.</span>Click<span class="token operator">+=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>完成后，为窗体Form1类添加一个响应事件的方法Test()，如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span><span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;这是我自定义的事件响应函数!&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;提示信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>完成代码后保存，编译运行即可以看程序中各控件的事件响应情况.</p><h3 id="运行效果" tabindex="-1"><a class="header-anchor" href="#运行效果" aria-hidden="true">#</a> 运行效果</h3><p>程序运行开始时有一个标签及一个按钮，此时点击标签没有任何响应信息，然后点击“为控件添加事件”按钮，将在窗体中增加一个显示为“新增加的按钮”的按钮，此时再点击标签将会看到有响应信息，即弹出一个对话框说明事作已经得到处理。点击一下“新增加的按钮”也将看到有事件响应信息。</p><p>再点击“为事件添加按钮”此时添体界面看到不变，其实已经有两个显示为“新增加的按钮”的按钮在窗体上，只是因为重复显示在同一位置看不到而已。非常有趣的是，再点击标签试一下，我们会发现事件响应方法被执行了两次。</p><h3 id="关键代码及注释" tabindex="-1"><a class="header-anchor" href="#关键代码及注释" aria-hidden="true">#</a> 关键代码及注释</h3><p>下面我们列出了本程序中比较核心的代码，并作了详细的注释，请大家仔细体会。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//窗体构造函数调用的窗体初始化函数，主要由Visual Studio .Net自动生成。</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>button1_Click<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//为button1对象的Click事件添加响应方法button1_Click() 。</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span><span class="token comment">//系统生成的button1按钮的Click事件响应方法。</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Button</span> temp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成一个Button 对象</span>
    temp<span class="token punctuation">.</span>Text<span class="token operator">=</span><span class="token string">&quot;新增加的按钮&quot;</span><span class="token punctuation">;</span><span class="token comment">//设置Button对象的外观属性</span>
    temp<span class="token punctuation">.</span>Location<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    temp<span class="token punctuation">.</span>Click<span class="token operator">+=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把Test()添加新增按钮Click事件的响应方法。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把Button对象temp添加到当前窗体中</span>

    label1<span class="token punctuation">.</span>Click<span class="token operator">+=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把Test()也添加为标签(label1)Click事件的响应方法。注意C#中事件响应可以有多个方法或者是一个方法的重复。</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span><span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span><span class="token comment">//自定义事件处理函数，注意函数的参数类型。</span>
<span class="token punctuation">{</span>
    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;这是我自定义的事件响应函数!&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;提示信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出一个对话框，显示提示信息。</span>
<span class="token punctuation">}</span>
</code></pre></div>`,44),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","cspme1.html.vue"]]);export{k as default};
