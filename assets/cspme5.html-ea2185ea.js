import{_ as n,o as s,c as a,a as e}from"./app-382facc7.js";const t={},p=e(`<h1 id="浅析java与c-的事件处理机制" tabindex="-1"><a class="header-anchor" href="#浅析java与c-的事件处理机制" aria-hidden="true">#</a> 浅析Java与C#的事件处理机制</h1><p>2002-12-23 08:59　天极网</p><p>Java与C#的事件处理都是实现了事件源-事件响应者机制，但又不完全相同。Java实现的是一种事件源与事件响应者两级实体对象方式，这里的事件响应者也是事件监听者，而C#实现的是一种事件源-代理-事件响应者三级实体对象方式。下面就这两种方式来具体说明。</p><h2 id="java事件处理" tabindex="-1"><a class="header-anchor" href="#java事件处理" aria-hidden="true">#</a> Java事件处理</h2><p>从概念上讲，事件是一种在“源对象”和“监听者对象”之间，某种状态发生变化的传递机制。事件有许多不同的用途，例如在Windows系统中常要处理的鼠标事件、窗口边界改变事件、键盘事件等。在Java中则是定义了一个普通的、可扩充的事件机制，这种机制能够：</p><p>对事件类型和传递的模型的定义和扩充提供一个公共框架，并适合于广泛的应用。</p><p>与Java语言和环境有较高的集成度。</p><p>事件能被描述环境捕获和触发。</p><p>能使其它构造工具采取某种技术在设计时直接控制事件，以及事件源和事件监听者之间的联系。</p><p>事件机制本身不依赖于复杂的开发工具。</p><p>事件从事件源到监听者的传递是通过对目标监听者对象的Java方法调用进行的。 对每个明确的事件的发生，都相应地定义一个明确的Java方法。这些方法都集中定义在事件监听者（EventListener）接口中，这个接口要继承<code>java.util.EventListener</code>。实现了事件监听者接口中一些或全部方法的类就是事件监听者。 伴随着事件的发生，相应的状态通常都封装在事件状态对象中，该对象必须继承自<code>java.util.EventObject</code>。事件状态对象作为单参传递给应响应该事件的监听者方法中。发出某种特定事件的事件源的标识是：遵从规定的设计格式为事件监听者定义注册方法，并接受对指定事件监听者接口实例的引用。有时，事件监听者不能直接实现事件监听者接口，或者还有其它的额外动作时，就要在一个源与其它一个或多个监听者之间插入一个事件适配器类的实例，来建立它们之间的联系。</p><h3 id="事件状态对象-event-state-object" tabindex="-1"><a class="header-anchor" href="#事件状态对象-event-state-object" aria-hidden="true">#</a> 事件状态对象（Event State Object）</h3><p>与事件发生有关的状态信息一般都封装在一个事件状态对象中，这种对象是<code>java.util.EventObject</code>的子类。按设计习惯，这种事件状态对象类的名应以Event结尾。例如：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MouseMovedExampleEvent</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>EventObject</span> <span class="token punctuation">{</span> 
    <span class="token keyword">protected</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token comment">/*　创建一个鼠标移动事件MouseMovedExampleEvent */</span>
　  <span class="token class-name">MouseMovedExampleEvent</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span>Component</span> source<span class="token punctuation">,</span> <span class="token class-name">Point</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> location<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        y <span class="token operator">=</span> location<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 获取鼠标位置*/</span>
    <span class="token keyword">public</span> <span class="token class-name">Point</span> <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre></div><h3 id="事件监听者接口-eventlistener-interface-与事件监听者" tabindex="-1"><a class="header-anchor" href="#事件监听者接口-eventlistener-interface-与事件监听者" aria-hidden="true">#</a> 事件监听者接口（EventListener Interface）与事件监听者</h3><p>由于Java事件模型是基于方法调用，因而需要一个定义并组织事件操纵方法的方式。事件操纵方法都被定义在继承了<code>java.util.EventListener</code>类的EventListener接口中，按规定，EventListener接口的命名要以Listener结尾。任何一个类如果想操纵在EventListener接口中定义的方法都必须以实现这个接口方式进行。这个类也就是事件监听者。例如：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">/*先定义了一个鼠标移动事件对象*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MouseMovedExampleEvent</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>EventObject</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在此类中包含了与鼠标移动事件有关的状态信息</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  
<span class="token punctuation">}</span>
<span class="token comment">/*定义了鼠标移动事件的监听者接口*/</span>
<span class="token keyword">interface</span> <span class="token class-name">MouseMovedExampleListener</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>EventListener</span> <span class="token punctuation">{</span>  
    <span class="token comment">/*在这个接口中定义了鼠标移动事件监听者所应支持的方法*/</span>
    <span class="token keyword">void</span> <span class="token function">mouseMoved</span><span class="token punctuation">(</span><span class="token class-name">MouseMovedExampleEvent</span> mme<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在接口中只定义方法名，方法的参数和返回值类型。如：上面接口中的<code>mouseMoved</code>方法的具体实现是在下面的<code>ArbitraryObject</code>类中定义的。</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ArbitraryObject</span> <span class="token keyword">implements</span> <span class="token class-name">MouseMovedExampleListener</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseMoved</span><span class="token punctuation">(</span><span class="token class-name">MouseMovedExampleEvent</span> mme<span class="token punctuation">)</span>  
　  <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre></div><p><code>ArbitraryObject</code>就是<code>MouseMovedExampleEvent</code>事件的监听者。</p><h3 id="事件监听者的注册与注销" tabindex="-1"><a class="header-anchor" href="#事件监听者的注册与注销" aria-hidden="true">#</a> 事件监听者的注册与注销</h3><p>为了各种可能的事件监听者把自己注册入合适的事件源中，建立源与事件监听者间的事件流，事件源必须为事件监听者提供注册和注销的方法。在前面的bound属性介绍中已看到了这种使用过程，在实际中，事件监听者的注册和注销要使用标准的设计格式：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> add<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListenerType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListenerType</span><span class="token punctuation">&gt;</span></span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> remove<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListenerType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListenerType</span><span class="token punctuation">&gt;</span></span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>首先定义了一个事件监听者接口：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ModelChangedListener</span> <span class="token keyword">extends</span> java。util。<span class="token class-name">EventListener</span> <span class="token punctuation">{</span>  
    <span class="token keyword">void</span> <span class="token function">modelChanged</span><span class="token punctuation">(</span><span class="token class-name">EventObject</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre></div><p>接着定义事件源类：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>  
    <span class="token keyword">private</span> <span class="token class-name">Vector</span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义了一个储存事件监听者的数组</span>
    <span class="token comment">/* 上面设计格式中的&lt; ListenerType&gt;在此处即是下面的ModelChangedListener */</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addModelChangedListener</span><span class="token punctuation">(</span><span class="token class-name">ModelChangedListener</span> mcl<span class="token punctuation">)</span>
　　<span class="token punctuation">{</span> listeners<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>mcl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">// 把监听者注册入listeners数组中</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">removeModelChangedListener</span><span class="token punctuation">(</span><span class="token class-name">ModelChangedListener</span> mcl<span class="token punctuation">)</span>
　　<span class="token punctuation">{</span> listeners<span class="token punctuation">.</span><span class="token function">removeElement</span><span class="token punctuation">(</span>mcl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// file://把监听者从listeners中注销　　</span>
　　<span class="token comment">/* 以上两个方法的前面均冠以synchronized，是因为运行在多线程环境时，可能同时有几个对象同时要进行注册和注销操作，使用synchronized来确保它们之间的同步。开发工具或程序员使用这两个方法建立源与监听者之间的事件流 */</span>

　　<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">notifyModelChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token doc-comment comment">/** 事件源使用本方法通知监听者发生了modelChanged事件 */</span>
        <span class="token class-name">Vector</span> l<span class="token punctuation">;</span>  
　　　　 <span class="token class-name">EventObject</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
　　　　<span class="token comment">/* 首先要把监听者拷贝到l数组中，冻结EventListeners的状态以传递事件。这样来确保在事件传递到所有监听者之前，已接收了事件的目标监听者的对应方法暂不生效。*/</span>  
　　　　<span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
　　　　　　l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Vector</span><span class="token punctuation">)</span>listeners<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
　　　　<span class="token punctuation">}</span>
　　　　<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　　　    <span class="token comment">/* 依次通知注册在监听者队列中的每个监听者发生了modelChanged事件，
　　　　       并把事件状态对象e作为参数传递给监听者队列中的每个监听者*/</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ModelChangedListener</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modelChanged</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre></div><p>在程序中可见事件源<code>Model</code>类显式地调用了接口中的<code>modelChanged</code>方法，实际是把事件状态对象<code>e</code>作为参数，传递给了监听者类中的<code>modelChanged</code>方法。</p><h3 id="适配类" tabindex="-1"><a class="header-anchor" href="#适配类" aria-hidden="true">#</a> 适配类</h3><p>适配类是Java事件模型中极其重要的一部分。在一些应用场合，事件从源到监听者之间的传递要通过适配类来&quot;转发&quot;。例如：当事件源发出一个事件，而有几个事件监听者对象都可接收该事件，但只有指定对象做出反应时，就要在事件源与事件监听者之间插入一个事件适配器类，由适配器类来指定事件应该是由哪些监听者来响应。适配类成为了事件监听者，事件源实际是把适配类作为监听者注册入监听者队列中，而真正的事件响应者并未在监听者队列中，事件响应者应做的动作由适配类决定。目前绝大多数的开发工具在生成代码时，事件处理都是通过适配类来进行的。</p><h2 id="c-事件处理" tabindex="-1"><a class="header-anchor" href="#c-事件处理" aria-hidden="true">#</a> C#事件处理</h2><p>在.NET应用程序开发中，不管是WEB Forms（ASP.NET）还是Windows Forms，都涉及到大量对象的事件响应及处理，比如客户在线提交一份订单、或是在Windows窗口上移动鼠标等都将有事件发生。那么在C#中，是怎样声明事件并为事件添加响应方法的呢？</p><p>在C#中，事件(Events)成员就是用来声明一个类事件的。在类中声明一个事件成员一般采用如下的语法形式：</p><p><code>public event 代表名 事件名;</code></p><p>如在Control类中声明了一个Click事件成员，其语法如下：</p><p><code>public event EventHandler Click;</code></p><p>在C#中，增加了一个新的数据类型<code>delegate</code>来解决事件处理问题。代表数据类型非常类似于C语言中的指针，其与指针不同的是，其是代码是安全的，可管理的。由于C#本身的简易性，对于没有使用过C及指针的程序来说，理解<code>delegate</code>也是非常容易的。</p><p>在C#中，通过使用<code>delegate</code>，你可以通过&quot;+=&quot;操作符非常容易地为。Net对象中的一个事件添加一个甚至多个响应方法；还可以通过非常简单的&quot;-=&quot;操作符取消这些响应方法。如下面为temp按钮添加Click事件的语句：</p><p><code>temp.Click+=new System.EventHandler(this.Test); // 为test添加事件处理方法</code></p><p>在上面声明事件的语句中，<code>Eventhandler</code>是一个<code>delegate</code>(代表)类型，其在。Net类库中如下声明的：</p><p><code>public delegate void EventHandler(object sender, EventArgs e);</code></p><p>这样，所有形如:<code>void 函娄名(object 参数名, EventArgs 参数名);</code>的函数都可以作为Control类的Click事件响应方法了。如下面所定义的一个事件响应方法：</p><p><code>private void button1_Click(object sender, System.EventArgs e);</code></p><p>由于是通过delegate来处理事件，因此，可能通过累加使一个事件具有多个响应方法；与此同时，还可以使一个方法作为多个事件的响应方法(注意：在C#语言类中的event成员后面只能出现&quot;+=&quot;与&quot;-=&quot;两个表示添加与取消事件响应函数的操作符)。不管是ASP.Net还是一般的Windows Forms 编程，在C#中，基本上我们遇到的事件响应方法都是说明成如下的形式：</p><p><code>private void button1_Click(object sender, System.EventArgs e);</code></p><p>那么，一个事件响应方法的存取权限、返回值类型、参数及类型甚至方法名称等是否都必须固定不变呢？答案是：不是！</p><p>一般情况下，事件的响应方法中都有两个参数，其中一个代表引发事件的对象即<code>sender</code>，由于引发事件的对象不可预知的，因此我们把其声明成为<code>object</code>类型，所有的对象都适用。第二个参数代表引发事件的具体信息，各种类型的事件中可能不同，这要根据类中事件成员的说明决定。</p><p>我们知道，事件是通过delegate来处理的。假设将要表示事件说明成如下形式：</p><p><code>delegate int MyEventHandler(object sender, ToolBarButtonClickEventArgs e);</code></p><p>则当涉及上面的事件响应函数声明时，就须要声明成如下的形式：</p><p><code>private int MyTest(object sender, ToolBarButtonClickEventArgs e) {}</code></p><p>在给对象添加事件响应方法时就可以用如下的代码实现：</p><p><code>Control.Event += new MyEventHandler(MyTest);</code></p><p>总的来说，Java事件处理更直接，简单。而C#事件处理由于引用代理，使得程序更灵活，更体现程序之间的松藕合性。美国神鸟（Stryon http://www.stryon.com.cn）公司宣布在Java开发平台上实现微软的.NET，命名为iNET。并于近期推出iNET的Beta3版本，其中就包括用Java实现了C#的三级事件处理机制。</p>`,54),o=[p];function c(l,u){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","cspme5.html.vue"]]);export{k as default};
