import{_ as a,o as s,c as n,a as e}from"./app-f0851ed3.js";const p={},t=e(`<h1 id="c-深入浅出全接触" tabindex="-1"><a class="header-anchor" href="#c-深入浅出全接触" aria-hidden="true">#</a> C#，深入浅出全接触</h1><h2 id="c-深入浅出全接触-一" tabindex="-1"><a class="header-anchor" href="#c-深入浅出全接触-一" aria-hidden="true">#</a> C#，深入浅出全接触（一）</h2><blockquote><p>网络小猪 开发者俱乐部 2002-04-26</p></blockquote><h3 id="一、什么是-c" tabindex="-1"><a class="header-anchor" href="#一、什么是-c" aria-hidden="true">#</a> 一、什么是 C#?</h3><p>C# 是由Microsoft开发的一种新型编程语言，由于它是从C和C++ 中派生出来的，因此具有C++的功能。同时，由于是Microsoft公司的产品，它又同 VB一样简单。对于web开发而言，C#象 Java，同时具有Delphi的一些优点。Microsoft宣称：C#是开发.NET框架应用程序的最好语言。</p><h3 id="二、java与-c" tabindex="-1"><a class="header-anchor" href="#二、java与-c" aria-hidden="true">#</a> 二、Java与 C#</h3><p>要学习C#，不能不首先看一看Java语言。</p><p>相对于其他编程语音，Java有一个无庸置疑的优点：用户以及编译器第一次不必了解生成可执行代码的特定CPU细节。Java引入了一个编译代码中间层，叫做字节代码，并使用一个虚拟抽象的机器，而不是一个真实的机器。当Java编译器结束了一个源文件的编译后，你所得到的不是可以立即在一个给定平台上运行的代码，而是可以在任何真实的平台上运行的字节代码，唯一的条件就是这个平台要理解和支持Java。这些发展包含着一个文化的变革。作为一个开发人员，你只需要确定Java虚拟机(JVM)提供的抽象层，不同的OS销售商负责执行代码层，从而将中立于平台的字节代码映射到主机平台的机构中。在这种情况下，Java似乎是统一分布式计算机世界的领袖候选人了。“编写一次，永远运行”（并且无论在哪里）一度成为Java诱人但却真实的口号。</p><p>那么为什么说Java只是“似乎”是一个好东西呢？跨平台理论的发展很好地证明了这一点。我们看到，将Java代码从一个平台移植到另一个平台—Java这个语言最重要和最受吹捧的特点—并不象宣传的那样容易。任何Java平台都有其自己的虚拟机，它可以理解通用的字节代码，并且及时地将其编译为本地代码。矛盾由此产生，不同虚拟机的执行也很不相同，这一点足以使代码的移植比预期耗费多得多的时间，而且基本上不是自动的。</p><p>那么，Java模型的好处在哪里呢？</p><p>首先，Java是一种先进的、面向对象的语言，包含了预防常见错误的内置功能，并在仅仅一两个对象中携带了许多经常需要用到的功能。与C++相比，Java更易于读写，不容易出错，而且更加美观，但是它速度较慢也不太灵活。想实现在任何软件和硬件平台上都可虚拟移植，Java尽可能少地使用了公分母模型，也就是说放弃了将每个平台开发到极限的能力。 第二，虚拟机的概念本身就是可移植和可共用的，因此对于分布式环境来说是理想的。Java对于为非Windows平台开发代码是最好的语言。 那么对于Windows平台来说，Java又怎么样呢？让Java适应Windows是不可能的，这是由于Sun的许可约束问题。但是Java实在是太吸引人了，Microsoft比谁都能更清楚这一点。因此，Microsoft又一次采取了“拿来主义”的手法，很好地利用了Java 的众多特性，隆重推出了Windows平台的新锐力量，它就是相当简单但十分强大的面向对象的C#编程语言。C#超过了C++，它天生就包含了.NET框架类库中的所有类，并使语法简单化。</p><p>可以说，Java具备的优点，C#都可以或者都将具备！</p><h3 id="三、c-的主要特征" tabindex="-1"><a class="header-anchor" href="#三、c-的主要特征" aria-hidden="true">#</a> 三、C#的主要特征</h3><p>C# 是.NET的关键性语言，它是整个.NET平台的基础。与C#相比，.NET所支持的其它语言显然是配角身份。比如，VB.NET的存在主要是对千万个VB开发人员的负责。对于JScript.NET和 Managed C++ 也同样可以这么说，后者只是增加了调用.NET类的C++ 语言。C#是唯一没有在设计思路中加入了前辈语言某种遗传的新事物。</p><p>.NET平台将 C#作为其固有语言，重温了许多Java的技术规则。C#中也有一个虚拟机，叫做公用语言运行环境(CLR)，它的对象也具有同样的层次。但是 C#的设计意图是要使用全部的Win32 API甚至更多。由于C#与 Windows的体系结构相似，因此 C# 很容易被开发人员所熟悉。</p><p>Java的目的是要拯救分布式计算世界，C# 则不同。C#本质上是C++的进化产物，使用了包括声明、表达式及操作符在内的许多C++特征，但是 C#还有更多的增强功能，比如类型安全（type-Safe）、事件处理、碎片帐集、代码安全性等。在C#中，除了可以使用许多API，更能使用.NET类。特别地是，我们可以处理COM的自动化和C类型的函数。</p><p>C#还让你调用无管理的代码，也就是在CLR引擎控制之外的代码。这种不安全的模式允许你操作原始指针来读和写内置碎片帐集控制以外的内存。</p><h3 id="四、安装运行环境" tabindex="-1"><a class="header-anchor" href="#四、安装运行环境" aria-hidden="true">#</a> 四、安装运行环境</h3><p>安装.NET SDK 是在机器上运行C# 的第一步。.NET SDK 可以安装在Windows ME、Windows NT或Windows 2000上，但是最好的选择是Windows 2000上。选择了操作系统后，再执行以下步骤：</p><ul><li>安装 IE 5.5</li><li>安装Microsoft .NET Framework SDK。它是免费的，可以从以下站点下载.NET Framework SDK.</li><li>完成以上安装后，就可以在任何文本编辑器中编写代码了，最后保存为扩展名为.cs的文件</li></ul><h2 id="c-深入浅出全接触-二" tabindex="-1"><a class="header-anchor" href="#c-深入浅出全接触-二" aria-hidden="true">#</a> C#，深入浅出全接触（二）</h2><h3 id="五、c-编辑器" tabindex="-1"><a class="header-anchor" href="#五、c-编辑器" aria-hidden="true">#</a> 五、C# 编辑器</h3><p>编写C#程序可以在文本编辑器中进行，或者在集成开发环境Visual Studio中进行。市场上还有一些第三方编辑器，其中一些是免费的。更多信息请查看这里。</p><h3 id="六、c-的程序结构" tabindex="-1"><a class="header-anchor" href="#六、c-的程序结构" aria-hidden="true">#</a> 六、C#的程序结构</h3><p>一个C#程序包含一个类，这个类中至少有一个公用的静态方法Main，这个方法对程序进行初始化并终止程序。在Main方法中创建子对象、执行方法并实现软件的逻辑处理。下面是一个典型的微型C#例程：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">MyFirstApp</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name">String<span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span>WriteLine <span class="token punctuation">(</span><span class="token string">&quot;Hello .NET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在C#中，要使用下面的声明来引入外部定义，而不是用象C++中的#include：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span>
</code></pre></div><p>然后，使用C#编译器csc.exe编译代码。假定将前面的代码保存为文件hello.cs，使用以下命令：</p><p><code>csc hello.cs</code></p><p>结果就生成了hello.exe，它向控制台输出窗口写入信息 &quot;Hello .NET&quot;。</p><p>尽管编译后的结果文件包含.exe后缀，但hello.exe却不是一个真正的、明确的CPU代码段。实际上，它包含了.NET字节代码。当启动hello.exe时，CLR 将提取编译器写入代码中的重要元数据。接着，一个叫做 Just-In-Time 编译器的模块将代码映射到特定的 CPU中，开始实际的执行过程。</p><h3 id="七、c-和名称空间" tabindex="-1"><a class="header-anchor" href="#七、c-和名称空间" aria-hidden="true">#</a> 七、C# 和名称空间</h3><p>实际中的 C#程序通常包含多个文件，其中每个文件都可以包含一个或多个名称空间。一个名称空间就是一个名字，它向编译器描绘出一些软件实体，如类、界面、枚举以及嵌入的名称空间。名称空间和数据类型一样必须有唯一的名称。在一个C#程序中，可以通过一个元素的完整资格名称来识别它，这个资格名称表明出层次关系。例如，System.String是 .NET String类型完整的资格名称。但是为了简化代码起见，只要声明正在使用System名称空间：</p><p><code>using System;</code></p><p>就可以使用一个相对名称如String来作为完整名称的同义词，而最后依然代表 System.String。</p><p>通过使用namesapce关键字，我们还可以将C#程序或者类包裹在自身的名称空间中，比如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">MyOwn</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span> <span class="token comment">// for String</span>
    <span class="token keyword">class</span> <span class="token class-name">MyFirstApp</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name">String<span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span>WriteLine <span class="token punctuation">(</span><span class="token string">&quot;Hello .NET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>名称空间 MyOwn 是全局名称空间的一部分。调用它不需要再使用前缀，因为其完整资格名称就是简单的MyOwn。定义一个名称空间是保持公共名称唯一性的一个途径。实际上，如果两个类的名称发生冲突，但只要它们分别属于不同的名称空间，两个类仍然是各自唯一的。</p><h3 id="八、c-中一个经典例程的编写与编译" tabindex="-1"><a class="header-anchor" href="#八、c-中一个经典例程的编写与编译" aria-hidden="true">#</a> 八、C#中一个经典例程的编写与编译</h3><p>1、编写代码</p><p>“Hello World”几乎是学习任何一门编程语言都要涉及的第一个例程。下面也让我们用C#完成这个工作。在上面提到的任意一个C#编辑器中（比如写字板），键入以下代码：</p><p><code>using System;class MyClass { static void Main() { Console.WriteLine(&quot;Hello World!&quot;); }}</code></p><p>然后保存为文件myclass.cs。</p><p>2、编译程序</p><p>注意：C#编译器要要求至少一个自变量，比如文件名。假设你的C# 文件名是myclass.cs，现在用命令行程序csc.exe来编译上面的myclass.cs文件：<code>csc myclass.cs</code></p><p>于是，C# 编译器在工程文件的bin 目录下生成了一个myclass.exe文件。运行这个 exe，看输出是什么。</p><p>3、代码含义</p><p>下面我们逐行看看这些代码的含义：</p><p>程序的第一行是using System。为什么要using System呢?因为System是存储系统类的名称空间，程序中用来在控制台上显示输出的Console（控制台）类就是在System 名称空间中定义的。</p><p>下一行是class MyClass。C# 中的class关键字用于创建一个新类。 每个类都有一个静态的void Main() 函数，这个函数就是一个 C# 程序的入口。</p><p>Console 类的WriteLine方法负责向控制台输出文本信息。</p>`,52),c=[t];function o(i,l){return s(),n("div",null,c)}const u=a(p,[["render",o],["__file","summary7.html.vue"]]);export{u as default};
