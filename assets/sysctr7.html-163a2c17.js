import{_ as t,r as p,o as e,c as o,b as n,d as s,e as c,a as l}from"./app-d9da1b6d.js";const u="/steven-blogs/assets/sysctr7_1-0082236a.png",i="/steven-blogs/assets/sysctr7_2-f4c0edc2.png",k="/steven-blogs/assets/sysctr7_3-21554816.png",r="/steven-blogs/assets/sysctr7_4-31343aab.png",d="/steven-blogs/assets/sysctr7_5-316da683.png",m={},w=l('<h1 id="用visual-c-创建windows服务程序" tabindex="-1"><a class="header-anchor" href="#用visual-c-创建windows服务程序" aria-hidden="true">#</a> 用Visual C#创建Windows服务程序</h1><blockquote><p>作者：王凯明 本文选自：赛迪网 2003年05月08日</p></blockquote><h2 id="一-windows服务介绍" tabindex="-1"><a class="header-anchor" href="#一-windows服务介绍" aria-hidden="true">#</a> 一．Windows服务介绍</h2><p>Windows服务以前被称作NT服务，是一些运行在Windows NT、Windows 2000和Windows XP等操作系统下用户环境以外的程序。在以前，编写Windows服务程序需要程序员很强的C或C++功底。然而现在在Visual Studio.Net下，你可以运用C++或Visual C#或Visual Basic.Net很轻松的创建一个Windows服务程序。同样，你还可以运用其他任何与CLR相容的语言来创建Windows服务程序。本文就向大家介绍如何运用Visual C#来一步一步创建一个文件监视的Windows服务程序，然后介绍如何安装、测试和调试该Windows服务程序。</p><p>在介绍如何创建Windows服务程序以前，我先向大家介绍一些有关Windows服务的背景知识。一个Windows服务程序是在Windows操作系统下能完成特定功能的可执行的应用程序。Windows服务程序虽然是可执行的，但是它不像一般的可执行文件通过双击就能开始运行了，它必须有特定的启动方式。这些启动方式包括了自动启动和手动启动两种。对于自动启动的Windows服务程序，它们在Windows启动或是重启之后用户登录之前就开始执行了。只要你将相应的Windows服务程序注册到服务控制管理器（Service Control Manager）中，并将其启动类别设为自动启动就行了。而对于手动启动的Windows服务程序，你可以通过命令行工具的NET START 命令来启动它，或是通过控制面板中管理工具下的服务一项来启动相应的Windows服务程序（见图1）。同样，一个Windows服务程序也不能像一般的应用程序那样被终止。因为Windows服务程序一般是没有用户界面的，所以你也要通过命令行工具或是下面图中的工具来停止它，或是在系统关闭时使得Windows服务程序自动停止。因为Windows服务程序没有用户界面，所以基于用户界面的API函数对其是没有多大的意义。为了能使一个Windows服务程序能够正常并有效的在系统环境下工作，程序员必须实现一系列的方法来完成其服务功能。Windows服务程序的应用范围很广，典型的Windows服务程序包含了硬件控制、应用程序监视、系统级应用、诊断、报告、Web和文件系统服务等功能。</p><p>图1<br><img src="'+u+'" alt="img_1"></p><h2 id="二-创建windows服务程序" tabindex="-1"><a class="header-anchor" href="#二-创建windows服务程序" aria-hidden="true">#</a> 二．创建Windows服务程序</h2><p>在介绍如何创建Windows服务程序以前，我先向大家介绍一下.Net框架下与Windows服务相关的命名空间和其中的类库。.Net框架大大地简化了Windows服务程序的创建和控制过程，这要归功于其命名空间中的功能强大的类库。和Windows服务程序相关的命名空间涉及到以下两个：System.ServiceProcess和System.Diagnostics。</p><p>要创建一个最基本的Windows服务程序，我们只需要运用.Net框架下的System.ServiceProcess命名空间以及其中的四个类：ServiceBase、ServiceInstaller、ServiceProcessInstaller以及ServiceController，其体系结构可见图2。</p><p>图2<br><img src="'+i+`" alt="img_2"></p><p>其中ServiceBase类定义了一些可被其子类重载的函数，通过这些重载的函数，服务控制管理器就可以控制该Windows服务程序了。这些函数包括：<code>OnStart()</code>、<code>OnStop()</code>、<code>OnPause()</code>以及<code>OnContinue()</code>等四个。而且ServiceBase类的子类还可以重载<code>OnCustomCommand()</code>函数来完成一些特定的操作。通过重载以上的一些函数，我们就完成了一个Windows服务程序的基本框架，这些函数的重载方法如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnContinue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><p>ServiceBase类还为我们提供了一些属性，而这些属性是任何Widnows服务程序所必须的。其中的ServiceName属性指定了Windows服务的名称，通过该名称系统就可以调用Windows服务了，同时其它应用程序也可以通过该名称来调用它的服务。而CanPauseAndContinue和CanStop属性顾名思义就是允许暂停并恢复和允许停止的意思。</p><p>要使得一个Windows服务程序能够正常运行，我们需要像创建一般应用程序那样为它创建一个程序的入口点。在Windows服务程序中，我们也是在<code>Main()</code>函数中完成这个操作的。首先我们在<code>Main()</code>函数中创建一个Windows服务的实例，该实例应该是ServiceBase类的某个子类的对象，然后我们调用由基类ServiceBase类定义的一个<code>Run()</code>方法。然而<code>Run()</code>方法并不就开始了Windows服务程序，我们必须通过前面提到的服务控制管理器调用特定的控制功能来完成Windows服务程序的启动，也就是要等到该对象的<code>OnStart()</code>方法被调用时服务才真正开始运行。如果你想在一个Windows服务程序中同时启动多个服务，那么只要在<code>Main()</code>函数中定义多个ServiceBae类的子类的实例对象就可以了，方法就是创建一个ServiceBase类的数组对象，使得其中的每个对象对应于某个我们已预先定义好的服务。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    <span class="token class-name">System<span class="token punctuation">.</span>ServiceProcess<span class="token punctuation">.</span>ServiceBase<span class="token punctuation">[</span><span class="token punctuation">]</span></span> MyServices<span class="token punctuation">;</span>
    MyServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>ServiceProcess<span class="token punctuation">.</span>ServiceBase<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Service1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Service2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>ServiceProcess<span class="token punctuation">.</span>ServiceBase<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>MyServices<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="三-添加文件监视服务" tabindex="-1"><a class="header-anchor" href="#三-添加文件监视服务" aria-hidden="true">#</a> 三．添加文件监视服务</h2><p>了解了Windows服务的基本体系结构和创建方法后，我们就可以试着往服务中添加一些实际的功能了。下面我将向大家介绍一个能监视本地文件系统的文件监视服务－FileMonitorService。该服务能根据预先设定的本地目录路径监视其中的文件包括子文件夹中的任何变化：文件创建、文件删除、文件改名、文件修改。同时，该服务还为每种变化创建了一个相对应的计数器，计数器的作用就是反映该种变化的频度。</p><p>首先，我们打开Visual Studio.Net，新建一个Visual C#的Windows服务的项目，如图3所示：</p><p>图3<br><img src="`+k+`" alt="img_3"></p><p>在重载Windows服务的OnStart（）函数之前，我们先给其类添加一些计数器对象，这些计数器分别对应了文件的创建、删除、改名以及修改等变化。一旦指定目录中的文件发生以上的某种变化，与其相对应的计数器就会自动加1。所有的这些计数器都是定义为PerformanceCounter类型的变量的，该类是包含在System.Diagnostics命名空间中的。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>PerformanceCounter</span> fileCreateCounter<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>PerformanceCounter</span> fileDeleteCounter<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>PerformanceCounter</span> fileRenameCounter<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>PerformanceCounter</span> fileChangeCounter<span class="token punctuation">;</span>
</code></pre></div><p>之后我们便在类的InitializeComponent（）方法中创建以上定义的各个计数器对象并确定其相关属性。同时我们将该Windows服务的名称设置为“FileMonitorService”，设定其即是允许暂停并恢复的又是允许停止的。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>components <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>ComponentModel<span class="token punctuation">.</span>Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fileChangeCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>PerformanceCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fileDeleteCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>PerformanceCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fileRenameCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>PerformanceCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fileCreateCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>PerformanceCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    fileChangeCounter<span class="token punctuation">.</span>CategoryName <span class="token operator">=</span> <span class="token string">&quot;File Monitor Service&quot;</span><span class="token punctuation">;</span>
    fileDeleteCounter<span class="token punctuation">.</span>CategoryName <span class="token operator">=</span> <span class="token string">&quot;File Monitor Service&quot;</span><span class="token punctuation">;</span>
    fileRenameCounter<span class="token punctuation">.</span>CategoryName <span class="token operator">=</span> <span class="token string">&quot;File Monitor Service&quot;</span><span class="token punctuation">;</span>
    fileCreateCounter<span class="token punctuation">.</span>CategoryName <span class="token operator">=</span> <span class="token string">&quot;File Monitor Service&quot;</span><span class="token punctuation">;</span>

    fileChangeCounter<span class="token punctuation">.</span>CounterName <span class="token operator">=</span> <span class="token string">&quot;Files Changed&quot;</span><span class="token punctuation">;</span>
    fileDeleteCounter<span class="token punctuation">.</span>CounterName <span class="token operator">=</span> <span class="token string">&quot;Files Deleted&quot;</span><span class="token punctuation">;</span>
    fileRenameCounter<span class="token punctuation">.</span>CounterName <span class="token operator">=</span> <span class="token string">&quot;Files Renamed&quot;</span><span class="token punctuation">;</span>
    fileCreateCounter<span class="token punctuation">.</span>CounterName <span class="token operator">=</span> <span class="token string">&quot;Files Created&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>ServiceName <span class="token operator">=</span> <span class="token string">&quot;FileMonitorService&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>CanPauseAndContinue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>CanStop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    servicePaused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>接着就是重载<code>OnStart()</code>函数和<code>OnStop()</code>函数，<code>OnStart()</code>函数完成了一些必要的初始化工作。在.Net框架下，文件的监视功能可以由FileSystemWatcher类来完成，该类是包含在System.IO命名空间下的。该Windows服务所要完成的功能包括了监视文件的创建、删除、改名和修改等变化，而FileSystemWatcher类包含所有了对应于这些变化的处理函数。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">FileSystemWatcher</span> curWatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileSystemWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    curWatcher<span class="token punctuation">.</span><span class="token function">BeginInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    curWatcher<span class="token punctuation">.</span>IncludeSubdirectories <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    curWatcher<span class="token punctuation">.</span>Path <span class="token operator">=</span> System<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>ConfigurationSettings<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">&quot;FileMonitorDirectory&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    curWatcher<span class="token punctuation">.</span>Changed <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileSystemEventHandler</span><span class="token punctuation">(</span>OnFileChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
    curWatcher<span class="token punctuation">.</span>Created <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileSystemEventHandler</span><span class="token punctuation">(</span>OnFileCreated<span class="token punctuation">)</span><span class="token punctuation">;</span>
    curWatcher<span class="token punctuation">.</span>Deleted <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileSystemEventHandler</span><span class="token punctuation">(</span>OnFileDeleted<span class="token punctuation">)</span><span class="token punctuation">;</span>
    curWatcher<span class="token punctuation">.</span>Renamed <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RenamedEventHandler</span><span class="token punctuation">(</span>OnFileRenamed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    curWatcher<span class="token punctuation">.</span>EnableRaisingEvents <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    curWatcher<span class="token punctuation">.</span><span class="token function">EndInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>注意其中被监视的目录是存放在一个应用程序配置文件中的，该文件是一个XML类型的文件。这种做法的好处就是我们不必重新编译并发布该Windows服务而只要直接修改其配置文件就可以达到更改所要监视的目录的功能了。</p><p>当该Windows服务启动后，一旦被监视的目录中的文件发生某种变化，与其相对应的计数器的值便会相应的增加，方法很简单，只要调用计数器对象的IncrementBy()即可。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnFileChanged</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span> <span class="token class-name">FileSystemEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>servicePaused <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fileChangeCounter<span class="token punctuation">.</span><span class="token function">IncrementBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnFileRenamed</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span> <span class="token class-name">RenamedEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>servicePaused <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fileRenameCounter<span class="token punctuation">.</span><span class="token function">IncrementBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnFileCreated</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span> <span class="token class-name">FileSystemEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>servicePaused <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fileCreateCounter<span class="token punctuation">.</span><span class="token function">IncrementBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnFileDeleted</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span> <span class="token class-name">FileSystemEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>servicePaused <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fileDeleteCounter<span class="token punctuation">.</span><span class="token function">IncrementBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>OnStop()函数即是停止Windows服务的，在该Windows服务中，服务一旦停止，所有的计数器的值都应归零，但是计数器并不提供一个Reset()方法，所以我们只好将计数器中的值减去当前值来达到这个目的。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileChangeCounter<span class="token punctuation">.</span>RawValue <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fileChangeCounter<span class="token punctuation">.</span><span class="token function">IncrementBy</span><span class="token punctuation">(</span><span class="token operator">-</span>fileChangeCounter<span class="token punctuation">.</span>RawValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileDeleteCounter<span class="token punctuation">.</span>RawValue <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fileDeleteCounter<span class="token punctuation">.</span><span class="token function">IncrementBy</span><span class="token punctuation">(</span><span class="token operator">-</span>fileDeleteCounter<span class="token punctuation">.</span>RawValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileRenameCounter<span class="token punctuation">.</span>RawValue <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fileRenameCounter<span class="token punctuation">.</span><span class="token function">IncrementBy</span><span class="token punctuation">(</span><span class="token operator">-</span>fileRenameCounter<span class="token punctuation">.</span>RawValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileCreateCounter<span class="token punctuation">.</span>RawValue <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fileCreateCounter<span class="token punctuation">.</span><span class="token function">IncrementBy</span><span class="token punctuation">(</span><span class="token operator">-</span>fileCreateCounter<span class="token punctuation">.</span>RawValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>同时，因为我们的Windows服务是允许暂停并恢复的，所以我们还得重载OnPause()函数和OnContinue()函数，方法很简单，只要设定前面定义的布尔值servicePaused即可。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    servicePaused <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnContinue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    servicePaused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样，该Windows服务的主体部分已经完成了，不过它并不有用，我们还必须为其添加安装文件。安装文件为Windows服务的正确安装做好了工作，它包括了一个Windows服务的安装类，该类是重System.Configuration.Install.Installer继承过来的。安装类中包括了Windows服务运行所需的帐号信息，用户名、密码信息以及Windows服务的名称，启动方式等信息。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RunInstaller</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Installer1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Install<span class="token punctuation">.</span>Installer</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 必需的设计器变量。</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token class-name">System<span class="token punctuation">.</span>ComponentModel<span class="token punctuation">.</span>Container</span> components <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">System<span class="token punctuation">.</span>ServiceProcess<span class="token punctuation">.</span>ServiceProcessInstaller</span> spInstaller<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">System<span class="token punctuation">.</span>ServiceProcess<span class="token punctuation">.</span>ServiceInstaller</span> sInstaller<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Installer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 该调用是设计器所必需的。</span>
        <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// TODO: 在 InitComponent 调用后添加任何初始化</span>
    <span class="token punctuation">}</span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Component Designer generated code</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 设计器支持所需的方法 - 不要使用代码编辑器修改</span>
    <span class="token doc-comment comment">/// 此方法的内容。</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        components <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>ComponentModel<span class="token punctuation">.</span>Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建ServiceProcessInstaller对象和ServiceInstaller对象</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>spInstaller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>ServiceProcess<span class="token punctuation">.</span>ServiceProcessInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sInstaller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>ServiceProcess<span class="token punctuation">.</span>ServiceInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 设定ServiceProcessInstaller对象的帐号、用户名和密码等信息</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>spInstaller<span class="token punctuation">.</span>Account <span class="token operator">=</span> System<span class="token punctuation">.</span>ServiceProcess<span class="token punctuation">.</span>ServiceAccount<span class="token punctuation">.</span>LocalSystem<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>spInstaller<span class="token punctuation">.</span>Username <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>spInstaller<span class="token punctuation">.</span>Password <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token comment">// 设定服务名称</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sInstaller<span class="token punctuation">.</span>ServiceName <span class="token operator">=</span> <span class="token string">&quot;FileMonitorService&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// 设定服务的启动方式</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sInstaller<span class="token punctuation">.</span>StartType <span class="token operator">=</span> System<span class="token punctuation">.</span>ServiceProcess<span class="token punctuation">.</span>ServiceStartMode<span class="token punctuation">.</span>Automatic<span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>Installers<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Install<span class="token punctuation">.</span>Installer<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>spInstaller<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sInstaller <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>
<span class="token punctuation">}</span>
</code></pre></div><p>同样，因为该Windows服务中运用到了计数器对象，我们也要为其添加相应的安装文件，安装文件的内容和作用与前面的类似。限于篇幅，这里就不给出相应的代码了，有兴趣的读者可以参考文后附带的源代码文件。</p><p>到此为止，整个Windows服务已经构建完毕，不过Windows服务程序和一般的应用程序不同，它不能直接调试运行。如果你直接在IDE下试图调试运行之，就会报出如图4所示提示。</p><p>图4<br><img src="`+r+'" alt="img4"></p><p>根据其中提示，我们知道安装Windows服务需要用到一个名为InstallUtil.exe的命令行工具。而运用该工具安装Windows服务的方法是非常简单的，安装该Windows服务的命令如下：</p><p><code>installutil FileMonitorService.exe</code></p><p>而要卸载该Windows服务，你只要输入如下的命令即可：</p><p><code>installutil /u FileMonitorService.exe</code></p><p>Windows服务安装成功后，它便会出现在服务控制管理器中，如图5所示。</p><p>图5<br><img src="'+d+'" alt="img_5"></p><p>这样，该文件监视的Windows服务就完成了，一旦我们对被监视的目录中的文件进行操作，相应的计数器就会运作，起到监视文件变化的作用。不过这个功能对于一般的用户而言没多大意义，然而你可以在此基础上添加新的功能，比如构建一个后台的文件处理系统，一旦被监视的目录中的文件发生某种变化，Windows服务便对其进行特定的操作，而最终用户就不必去关心后台处理程序是如何实现的了。</p><h2 id="四-总结" tabindex="-1"><a class="header-anchor" href="#四-总结" aria-hidden="true">#</a> 四．总结</h2><p>本文向大家介绍了Windows服务的一些基本概念和构建一般的Windows服务所需的方法，同时还向大家展示了一个具有文件监视功能的Windows服务程序。通过本文，读者应该能体会到构建Windows服务并不是想象中的那么复杂，这主要还得归功于.Net框架为我们所作的大量努力。同时，希望大家能在本文给出的实例的基础上构建更加完善和更加强大的Windows服务程序。最后希望本文对大家能有不少帮助。</p>',46),y={href:"http://developer.ccidnet.com/pub/html/developer/code/download/Source0508.rar",target:"_blank",rel:"noopener noreferrer"},v=n("blockquote",null,[n("p",null,"（责任编辑:西门吹风）")],-1);function g(S,C){const a=p("ExternalLinkIcon");return e(),o("div",null,[w,n("p",null,[s("（注：源代码文件为"),n("a",y,[s("Source.rar"),c(a)]),s("）")]),v])}const h=t(m,[["render",g],["__file","sysctr7.html.vue"]]);export{h as default};
