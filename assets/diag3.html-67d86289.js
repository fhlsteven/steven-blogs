import{_ as n,o as a,c as s,a as t}from"./app-f0851ed3.js";const p="/steven-blogs/assets/diag3_1-cc99d1fc.png",o="/steven-blogs/assets/diag3_2-f5f158bc.png",e="/steven-blogs/assets/diag3_3-1c26b153.png",c="/steven-blogs/assets/diag3_4-d6096ae0.png",l="/steven-blogs/assets/diag3_5-f1acafe9.png",i="/steven-blogs/assets/diag3_6-46f3b9ac.png",u="/steven-blogs/assets/diag3_7-c894f0b2.png",r={},k=t('<h1 id="visual-c-对话框全接触" tabindex="-1"><a class="header-anchor" href="#visual-c-对话框全接触" aria-hidden="true">#</a> Visual C# 对话框全接触</h1><blockquote><p>作者： 金桥网络 发表时间： 2003-7-13 10:07:08</p></blockquote><p>VS.net bate 2出来也很久了，感觉还可以。早一阵子，朋友让我帮他写两个打印程序，当中用了不少的对话，在查资料的时候看到国 外有一篇专门的文章介绍对话框的，就决定写这篇文章，让大家都有个好的起点。同时还着重介绍了打印那一部份，大家可以仔细研究一下，都说了很多了。现 在我们开发吧！</p><p>对话框中我们常用了以下几种：</p><p>1、文件对话框(FileDialog) 它又常用到两个：</p><p>打开文件对话框(OpenFileDialog)<br> 保存文件对话(SaveFileDialog)</p><p>2、字体对话框(FontDialog)</p><p>3、颜色对话框(ＣolorDialog)</p><p>4、打印预浏对话框(PrintPreviewDialog)</p><p>5、页面设置(PrintDialog)</p><p>6、打印对话框(PrintDialog)</p><p>还有更多，有时间的网友可以看看ＭＳＤＮ。下面我们一个个来介绍。在介绍的过程中我用到了一个自己开发的类：File,主要是文件操作的。</p><h2 id="文件对话框-filedialog" tabindex="-1"><a class="header-anchor" href="#文件对话框-filedialog" aria-hidden="true">#</a> 文件对话框(FileDialog)</h2><h3 id="一、打开文件对话框-openfiledialog" tabindex="-1"><a class="header-anchor" href="#一、打开文件对话框-openfiledialog" aria-hidden="true">#</a> 一、打开文件对话框(OpenFileDialog)</h3><p>1、 OpenFileDialog控件有以下基本属性</p><table><thead><tr><th>InitialDirectory</th><th>对话框的初始目录</th></tr></thead><tbody><tr><td>Filter</td><td>要在对话框中显示的文件筛选器，例如，&quot;文本文件(*.txt)</td></tr><tr><td>FilterIndex</td><td>在对话框中选择的文件筛选器的索引，如果选第一项就设为1</td></tr><tr><td>RestoreDirectory</td><td>控制对话框在关闭之前是否恢复当前目录</td></tr><tr><td>FileName</td><td>第一个在对话框中显示的文件或最后一个选取的文件</td></tr><tr><td>Title</td><td>将显示在对话框标题栏中的字符</td></tr><tr><td>AddExtension</td><td>是否自动添加默认扩展名</td></tr><tr><td>CheckPathExists</td><td>在对话框返回之前，检查指定路径是否存在</td></tr><tr><td>DefaultExt</td><td>默认扩展名</td></tr><tr><td>DereferenceLinks</td><td>在从对话框返回前是否取消引用快捷方式</td></tr><tr><td>ShowHelp</td><td>启用&quot;帮助&quot;按钮</td></tr><tr><td>ValiDateNames</td><td>控制对话框检查文件名中是否不含有无效的字符或序列</td></tr></tbody></table><p>2、 OpenFileDialog控件有以下常用事件</p><table><thead><tr><th>FileOk</th><th>当用户点击&quot;打开&quot;或&quot;保存&quot;按钮时要处理的事件</th></tr></thead><tbody><tr><td>HelpRequest</td><td>当用户点击&quot;帮助&quot;按钮时要处理的事件</td></tr></tbody></table><p>3、OpenFileDialog的效果如下：</p><p><img src="'+p+`" alt="diag3_1"><br> 可以用以下代码来实现上面这个对话框：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">openFileDialogBTN_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">OpenFileDialog</span> openFileDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenFileDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    openFileDialog<span class="token punctuation">.</span>InitialDirectory <span class="token operator">=</span> <span class="token string">&quot;c:\\\\&quot;</span><span class="token punctuation">;</span><span class="token comment">//注意这里写路径时要用c:\\\\而不是c:\\</span>
    openFileDialog<span class="token punctuation">.</span>Filter <span class="token operator">=</span> <span class="token string">&quot;文本文件|*.*|C#文件|*.cs|所有文件|*.*&quot;</span><span class="token punctuation">;</span>
    openFileDialog<span class="token punctuation">.</span>RestoreDirectory <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    openFileDialog<span class="token punctuation">.</span>FilterIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>openFileDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fName <span class="token operator">=</span> openFileDialog<span class="token punctuation">.</span>FileName<span class="token punctuation">;</span>
        <span class="token class-name">File</span> fileOpen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">File</span><span class="token punctuation">(</span>fName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        isFileHaveName <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        richTextBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> fileOpen<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        richTextBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其中有用到了File()这个类，是我在程序用来执行文件操作，自己写的，在最后附了这个类的源码。有兴趣的网友可以自己分析。</p><h3 id="二、保存文件对话框-savefiledialog" tabindex="-1"><a class="header-anchor" href="#二、保存文件对话框-savefiledialog" aria-hidden="true">#</a> 二、保存文件对话框(SaveFileDialog)</h3><p>保存文件对话框控件有两种情况，一就是保存，二就是另存为，保存很简单，就是在文件已经打开的情况下的，再把文件写一篇，在这里我们主要讲另存为 的情况(SaveAs)。</p><p>1，SaveFileDialog控件的属性</p><table><thead><tr><th>Filter</th><th>要在对话框中显示的文件筛选器，例如，&quot;文本文件(<code>*.txt</code>)|<code>*.txt</code>|所有文件(<code>*.*</code>)|<code>*.*</code>&quot;</th></tr></thead><tbody><tr><td>FilterIndex</td><td>在对话框中选择的文件筛选器的索引，如果选第一项就设为1</td></tr><tr><td>RestoreDirectory</td><td>控制对话框在关闭之前是否恢复当前目录</td></tr><tr><td>AddExtension</td><td>是否自动添加默认扩展名</td></tr><tr><td>CheckFileExists</td><td></td></tr><tr><td>CheckPathExists</td><td>在对话框返回之前，检查指定路径是否存在</td></tr><tr><td>Container</td><td>控制在将要创建文件时，是否提示用户。只有在ValidateNames为真值时，才适用。</td></tr><tr><td>DefaultExt</td><td>缺省扩展名</td></tr><tr><td>DereferenceLinks</td><td>在从对话框返回前是否取消引用快捷方式</td></tr><tr><td>FileName</td><td>第一个在对话框中显示的文件或最后一个选取的文件</td></tr><tr><td>InitialDirector</td><td>对话框的初始目录</td></tr><tr><td>OverwritePrompt</td><td>控制在将要在改写现在文件时是否提示用户，只有在ValidateNames为真值时，才适用</td></tr><tr><td>ShowHelp</td><td>启用&quot;帮助&quot;按钮</td></tr><tr><td>Title</td><td>将显示在对话框标题栏中的字符</td></tr><tr><td>ValidateNames</td><td>控制对话框检查文件名中是否不含有无效的字符或序列</td></tr></tbody></table><p>2、SaveFileDialog事件如下：</p><table><thead><tr><th>FileOk</th><th>当用户点击&quot;打开&quot;或&quot;保存&quot;按钮时要处理的事件</th></tr></thead><tbody><tr><td>HelpRequest</td><td>当用户点击&quot;帮助&quot;按钮时要处理的事件</td></tr></tbody></table><p>3、SaveFileDialog的效果如下：</p><p><img src="`+o+`" alt="diag3_2"></p><p>4、用下例代码可以实现</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">saveAsDialogBTN_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">SaveFileDialog</span> saveFileDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SaveFileDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    saveFileDialog<span class="token punctuation">.</span>Filter <span class="token operator">=</span> <span class="token string">&quot;文本文件|*.*|C#文件|*.cs|所有文件|*.*&quot;</span><span class="token punctuation">;</span>
    saveFileDialog<span class="token punctuation">.</span>FilterIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    saveFileDialog<span class="token punctuation">.</span>RestoreDirectory <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>saveFileDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>saveFileDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            fName <span class="token operator">=</span> saveFileDialog<span class="token punctuation">.</span>FileName<span class="token punctuation">;</span>
            <span class="token class-name">File</span> fSaveAs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">File</span><span class="token punctuation">(</span>fName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            isFileHaveName <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>保存的文件有名字
            fSaveAs<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>richTextBox1<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其实这些都可以在VS.NET的IDE环境中直接完成，为了说明问题，我还是一条条列也来了。当中用到了一个File的类库，下面是源程序：</p><p>File.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">dialog</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// </span>
    <span class="token doc-comment comment">/// Summary description for File.</span>
    <span class="token doc-comment comment">/// </span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fileName <span class="token operator">=</span> fileName<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">StreamReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> result <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sr<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> result<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sw<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sw<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;保存文件出错！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="字体对话框-fontdialog" tabindex="-1"><a class="header-anchor" href="#字体对话框-fontdialog" aria-hidden="true">#</a> 字体对话框(FontDialog)</h2><p>在文字处理中，我们常用到字体，现在我们来做一个最常见的字体对话框。</p><h3 id="一、-字体对话框-fontdialog-常用属性" tabindex="-1"><a class="header-anchor" href="#一、-字体对话框-fontdialog-常用属性" aria-hidden="true">#</a> 一、 字体对话框(FontDialog)常用属性</h3><table><thead><tr><th>ShowColor</th><th>控制是否显示颜色选项</th></tr></thead><tbody><tr><td>AllowScriptChange</td><td>是否显示字体的字符集</td></tr><tr><td>Font</td><td>在对话框显示的字体</td></tr><tr><td>AllowVerticalFonts</td><td>是否可选择垂直字体</td></tr><tr><td>Color</td><td>在对话框中选择的颜色</td></tr><tr><td>FontMustExist</td><td>当字体不存在时是否显示错误</td></tr><tr><td>MaxSize</td><td>可选择的最大字号</td></tr><tr><td>MinSize</td><td>可选择的最小字号</td></tr><tr><td>ScriptsOnly</td><td>显示排除OEM和Symbol字体</td></tr><tr><td>ShowApply</td><td>是否显示&quot;应用&quot;按钮</td></tr><tr><td>ShowEffects</td><td>是否显示下划线、删除线、字体颜色选项</td></tr><tr><td>ShowHelp</td><td>是否显示&quot;帮助&quot;按钮</td></tr></tbody></table><h3 id="二、-字体对话框-fontdialog-的事件" tabindex="-1"><a class="header-anchor" href="#二、-字体对话框-fontdialog-的事件" aria-hidden="true">#</a> 二、 字体对话框(FontDialog)的事件</h3><table><thead><tr><th>Apply</th><th>当点击&quot;应用&quot;按钮时要处理的事件</th></tr></thead><tbody><tr><td>HelpRequest</td><td>当点击&quot;帮助&quot;按钮时要处理的事件</td></tr></tbody></table><h3 id="三、-字体对话框-fontdialog-的效果" tabindex="-1"><a class="header-anchor" href="#三、-字体对话框-fontdialog-的效果" aria-hidden="true">#</a> 三、 字体对话框(FontDialog)的效果</h3><p><img src="`+e+`" alt="diag3_3"></p><h3 id="四、-实现代码" tabindex="-1"><a class="header-anchor" href="#四、-实现代码" aria-hidden="true">#</a> 四、 实现代码</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">fontDialogBTN_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">FontDialog</span> fontDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FontDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fontDialog<span class="token punctuation">.</span>Color <span class="token operator">=</span> richTextBox1<span class="token punctuation">.</span>ForeColor<span class="token punctuation">;</span>
    fontDialog<span class="token punctuation">.</span>AllowScriptChange <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    fontDialog<span class="token punctuation">.</span>ShowColor <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fontDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> DialogResult<span class="token punctuation">.</span>Cancel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        richTextBox1<span class="token punctuation">.</span>SelectionFont <span class="token operator">=</span> fontDialog<span class="token punctuation">.</span>Font<span class="token punctuation">;</span><span class="token comment">//将当前选定的文字改变字体</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上面代码将选定的文本设置为当前FontDialog对话框中的字体。</p><h2 id="颜色对话框-colordialog" tabindex="-1"><a class="header-anchor" href="#颜色对话框-colordialog" aria-hidden="true">#</a> 颜色对话框(ColorDialog)</h2><p>颜色拾取框也是我们常见的对话框之一，下面我们来看看在C#中是如何操作颜色对话框的呢？</p><p>一、 颜色对话框(ColorDialog)的常见属性</p><table><thead><tr><th>AllowFullOpen</th><th>禁止和启用&quot;自定义颜色&quot;按钮</th></tr></thead><tbody><tr><td>FullOpen</td><td>是否最先显示对话框的&quot;自定义颜色&quot;部份</td></tr><tr><td>ShowHelp</td><td>是否显示&quot;帮助&quot;按钮</td></tr><tr><td>Color</td><td>在对话框中显示的颜色</td></tr><tr><td>AnyColor</td><td>显示可选择任何颜色</td></tr><tr><td>CustomColors</td><td>是否显示自定义颜色</td></tr><tr><td>SolidColorOnly</td><td>是否只能选择纯色</td></tr></tbody></table><p>二、 颜色对话框(ColorDialog)的效果如下：</p><p><img src="`+c+`" alt="diag3_4"></p><p>三、 实现代码见下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">colorDialogBTN_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">ColorDialog</span> colorDialog<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ColorDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    colorDialog<span class="token punctuation">.</span>AllowFullOpen<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    colorDialog<span class="token punctuation">.</span>FullOpen<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    colorDialog<span class="token punctuation">.</span>ShowHelp<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    colorDialog<span class="token punctuation">.</span>Color<span class="token operator">=</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">;</span><span class="token comment">//初始化当前文本框中的字体颜色，当用户在ColorDialog对话框中点击&quot;取消&quot;按钮</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>恢复原来的值
    colorDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    richTextBox1<span class="token punctuation">.</span>SelectionColor<span class="token operator">=</span>colorDialog<span class="token punctuation">.</span>Color<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>实现颜色对话框(ColorDialog)很容易吧，其实不只是颜色对话框，C#也是很容易的，只要用心去学，都容易的。讲完了颜色对话框(ColorDialog),我们 来讲打印和页面设置.</p><h2 id="页面设置-pagesetupdialog" tabindex="-1"><a class="header-anchor" href="#页面设置-pagesetupdialog" aria-hidden="true">#</a> 页面设置(PageSetupDialog)</h2><p>其实页面设置(PageSetupDialog)没有太多的讲，既然讲到这里，我还是把PageSetupDialog中常用的属性列出来吧</p><h3 id="一、页面设置-pagesetupdialog-常见属性" tabindex="-1"><a class="header-anchor" href="#一、页面设置-pagesetupdialog-常见属性" aria-hidden="true">#</a> 一、页面设置(PageSetupDialog)常见属性</h3><table><thead><tr><th>AllowMargins</th><th>设置是否可以对边距的编辑</th></tr></thead><tbody><tr><td>AllowOrientation</td><td>是否可以使用&quot;方向&quot;单选框</td></tr><tr><td>AllowPaper</td><td>设置是否可以对纸张大小的编辑</td></tr><tr><td>AllowPrinter</td><td>设置是否可以使用&quot;打印机&quot;按钮</td></tr><tr><td>Document</td><td>获取打印机设置的PrintDocument</td></tr><tr><td>MinMargins</td><td>允许用户选择的最小边距</td></tr></tbody></table><h3 id="二、面设置-pagesetupdialog-的效果如下" tabindex="-1"><a class="header-anchor" href="#二、面设置-pagesetupdialog-的效果如下" aria-hidden="true">#</a> 二、面设置(PageSetupDialog)的效果如下</h3><p><img src="`+l+`" alt="diag3_5"></p><p>就这么简单啦，我们看看下面的吧，还有更重磅的东东呢？关于打印的。</p><h2 id="打印预浏及打印" tabindex="-1"><a class="header-anchor" href="#打印预浏及打印" aria-hidden="true">#</a> 打印预浏及打印</h2><p>打印是我们在windows编程中常要用到的功能，在以前都是很麻烦工作，但在Microsoft .net Framework中打印是以组件提供给我们使用，不过还是点麻烦的，所以就专门写出来，供大家参改。</p><p>一， 在.net环境中，说到打印，就不能不说PrintDocumet这个类，PrintDocument属于System.Drawing.Printing这个名字空间，PrintDocument这个类是 实现打印的核心代码。</p><p>如果要实现打印,就必需首先构造PrintDocument对象添加打印事件,</p><p><code>printDocument.PrintPage+=new PrintPageEventHandler(this.printDocument_PrintPage)</code></p><p>打印其实也是调用Graphics类的方法进行画图,下面这代码是根据MSDN上提供的例程改写的。MSDN打印例程地址:</p><p><code>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemDrawingPrintingPrintDocumentClassTopic.asp</code>，有兴趣的网友可以参改一下。</p><p>下面是我改写的printDocument_PrintPage:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">printDocument_PrintPage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Printing<span class="token punctuation">.</span>PrintPageEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">float</span></span> linesPerPage <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//页面的行号</span>
    <span class="token class-name"><span class="token keyword">float</span></span> yPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//打印字符串的纵向位置</span>
    <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//行计数器</span>
    <span class="token class-name"><span class="token keyword">float</span></span> leftMargin <span class="token operator">=</span> e<span class="token punctuation">.</span>MarginBounds<span class="token punctuation">.</span>Left<span class="token punctuation">;</span><span class="token comment">//左边距</span>
    <span class="token class-name"><span class="token keyword">float</span></span> topMargin <span class="token operator">=</span> e<span class="token punctuation">.</span>MarginBounds<span class="token punctuation">.</span>Top<span class="token punctuation">;</span><span class="token comment">//上边距</span>
    <span class="token class-name"><span class="token keyword">string</span></span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//行字符串</span>
    <span class="token class-name">Color</span> clr <span class="token operator">=</span> richTextBox1<span class="token punctuation">.</span>SelectionColor<span class="token punctuation">;</span><span class="token comment">//当前的打印颜色,在我这个程序没有实现不同颜色打印</span>
    <span class="token class-name">SolidBrush</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolidBrush</span><span class="token punctuation">(</span>clr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷子</span>
    fnt <span class="token operator">=</span> richTextBox1<span class="token punctuation">.</span>SelectionFont<span class="token punctuation">;</span><span class="token comment">//当前的打印字体</span>
    linesPerPage <span class="token operator">=</span> e<span class="token punctuation">.</span>MarginBounds<span class="token punctuation">.</span>Height <span class="token operator">/</span> fnt<span class="token punctuation">.</span><span class="token function">GetHeight</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每页可打印的行数</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>逐行循行打印一页
    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token punctuation">{</span>
        yPos <span class="token operator">=</span> topMargin <span class="token operator">+</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> fnt<span class="token punctuation">.</span><span class="token function">GetHeight</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> fnt<span class="token punctuation">,</span> b<span class="token punctuation">,</span> leftMargin<span class="token punctuation">,</span> yPos<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>如果该页打印完成而line不为空说明还有没完成的页面，发出下一次的打印事件，
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>在下一次的打印中lineReader会自动读取上次没有打印完的内容。lineReader可以记录当前读取的位置
    <span class="token keyword">if</span> <span class="token punctuation">(</span>line <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        e<span class="token punctuation">.</span>HasMorePages <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        e<span class="token punctuation">.</span>HasMorePages <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在这里可以完成整个打印任务。把printDocument_PrintPage构造好后，就可以打印和打印预浏。</p><h3 id="二、打印预浏对话框-printpreviewdialog" tabindex="-1"><a class="header-anchor" href="#二、打印预浏对话框-printpreviewdialog" aria-hidden="true">#</a> 二、打印预浏对话框(PrintPreviewDialog)</h3><p>打印预浏控件是用来显示一个打印文档在打印后的效果。在打印预浏对话框中包含有，打印、缩放、单页或多页、关闭等按钮。对话框如下:</p><p><img src="`+i+`" alt="diag3_6"></p><p>打印预浏对话框没有太多的属性，最后通过ShowDialog()调用。上面的实现代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">printPreviewBTN_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    lineReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringReader</span><span class="token punctuation">(</span>richTextBox1<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">PrintPreviewDialog</span> printPreviewDialog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PrintPreviewDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        printPreviewDialog1<span class="token punctuation">.</span>Document <span class="token operator">=</span> printDocument<span class="token punctuation">;</span>
        printPreviewDialog1<span class="token punctuation">.</span>FormBorderStyle <span class="token operator">=</span> FormBorderStyle<span class="token punctuation">.</span>Fixed3D<span class="token punctuation">;</span>
        printPreviewDialog1<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> excep<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>excep<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;打印出错&quot;</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>很简单的，只要你把PrintDocument_PrintPage()写好了，这里就很容易了。</p><h3 id="三、打印对话框-printdialog" tabindex="-1"><a class="header-anchor" href="#三、打印对话框-printdialog" aria-hidden="true">#</a> 三、打印对话框(PrintDialog)</h3><p>1、打印对话框(PrintDialog)只要有以下属性:</p><table><thead><tr><th>AllowPrintToFile</th><th>禁止或使用&quot;打印到文件&quot;复选框</th></tr></thead><tbody><tr><td>AllowSelection</td><td>禁止或使用&quot;选定内容&quot;单选框</td></tr><tr><td>AllowSomePages</td><td>禁止或使用&quot;页&quot;单选按钮</td></tr><tr><td>Document</td><td>从中获取打印机设置的PrintDocument</td></tr><tr><td>PrintToFile</td><td>打印到文件&quot;复选框是否选中</td></tr><tr><td>ShowHelp</td><td>控制是否显示&quot;帮助&quot;按钮</td></tr><tr><td>ShowNetWork</td><td>控制是否显示&quot;网络&quot;按钮</td></tr></tbody></table><p>2、效果如下：</p><p><img src="`+u+`" alt="diag3_7"></p><p>3、用如下代码来实现:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">printDialogBTN_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">PrintDialog</span> printDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PrintDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printDialog<span class="token punctuation">.</span>Document <span class="token operator">=</span> printDocument<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>printDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> DialogResult<span class="token punctuation">.</span>Cancel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            printDocument<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>到此，所有的对话框都讲完了，头都大了吧。</p><p>上述对话框，完全可以在vs.net的IDE环境中完成 ，这时为了说明问题，才分开一步步来讲。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在我们的教程，共讲述了文件对话框(FileDialog)、字体对话框(FontDialog)、,颜色对话框(ＣolorDialog)、打印预浏对话框(PrintPreviewDialog)、页面 设置(PrintDialog)、打印对话框(PrintDialog)，这几个对话框，其中文件对话框(FileDialog)又有：打开文件对话框(OpenFileDialog)、保存文件对话(SaveFi leDialog)这两个对话框。有了上述基础，大家可以很容易的写出一个简单的记事本。</p><blockquote><p>来自： 金桥网络 阅读次数： 184</p></blockquote>`,90),d=[k];function g(h,m){return a(),s("div",null,d)}const D=n(r,[["render",g],["__file","diag3.html.vue"]]);export{D as default};
