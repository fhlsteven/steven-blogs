import{_ as n,o as s,c as a,a as t}from"./app-382facc7.js";const p={},o=t(`<h1 id="c-教程第二课-表达式-类型和变量" tabindex="-1"><a class="header-anchor" href="#c-教程第二课-表达式-类型和变量" aria-hidden="true">#</a> C＃教程第二课:表达式,类型和变量</h1><p>（Joe Mayo　2001年06月08日 17:32）</p><p>本节课将介绍C# 语言的表达式，类型和变量。本节课要达到如下几个目的：</p><ol><li>了解什么是&quot;变量&quot;</li><li>学习C#的简单类型</li><li>对C#表达式有个初步的了解</li><li>了解什么是String类型</li><li>学习如何使用数组</li></ol><p>&quot;变量&quot;仅仅是数据的存储位置。你可以把数据存放到其中，或者从中取出来作为C#表达式的一部分。变量中所存放的数据的含义是通过类型来控制的。</p><p>C#是个强类型（？？？）的语言。这样，一切对变量的操作都是针对该变量的类型而进行的。为了保证变量中所存放数据的合法性和一致性，对不同类型的变量进行操作有相应的规则。</p><p>C#语言的简单类型包含布尔类型和三种数值类型：整型，浮点型和小数。</p><p>1.清单1-1 显示布尔值：Boolean.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Booleans</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">bool</span></span> content <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">bool</span></span> noContent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;It is {0} that C# Station provides C# programming language content.&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;The statement above is not {0}.&quot;</span><span class="token punctuation">,</span> noContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><ol><li><p>在清单1-1中，布尔值作为句子的一部分输出到控制台中。&quot;bool&quot;类型的取值要么为真，要么为假。程序运行结果如下：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>&gt;It is True that C# Station provides C# programming language content.
&gt;The statement above is not False.  
</code></pre></div></li><li><p>下列表格显示了各种整数类型，所占字节大小和所能表示的数的范围。</p><table><thead><tr><th>类型</th><th>位</th><th>范围</th></tr></thead><tbody><tr><td>sbyte</td><td>8</td><td>-128 to 127</td></tr><tr><td>byte</td><td>8</td><td>0 to 255</td></tr><tr><td>short</td><td>16</td><td>-32768 to 32767</td></tr><tr><td>ushort</td><td>16</td><td>0 to 65535</td></tr><tr><td>int</td><td>32</td><td>-2147483648 to 2147483647</td></tr><tr><td>uint</td><td>32</td><td>0 to 4294967295</td></tr><tr><td>long</td><td>64</td><td>-9223372036854775808 to 9223372036854775807</td></tr><tr><td>ulong</td><td>64</td><td>0 to 18446744073709551615</td></tr><tr><td>char</td><td>16</td><td>0 to 65535</td></tr></tbody></table><p>在对整数进行计算时，除了字符类型之外，上述这些类型都是适合的。字符类型代表一个Unicode字符。正如在上表中可以看到的，你可以从中选择适合你需要的类型。</p></li><li><p>下列表格显示了单精度类型，双精度类型和小数类型的数据，它们所占的字节，精度和所能表示的数的范围。</p><table><thead><tr><th>类型</th><th>位</th><th>精度</th><th>范围</th></tr></thead><tbody><tr><td>float</td><td>32</td><td>7 digits</td><td>1.5 x 10-45 to 3.4 x 1038</td></tr><tr><td>double</td><td>64</td><td>15-16 digits</td><td>5.0 x 10-324 to 1.7 x 10308</td></tr><tr><td>decimal</td><td>128</td><td>28-29 decimal places</td><td>1.0 x 10-28 to 7.9 x 1028</td></tr></tbody></table><p>当你需要进行涉及到分数的操作时，就需要用到实型，然而，对于金融财经方面的数据的计算，小数类型也许是你最好的选择。</p></li><li><p>表达式计算之后可以得出结果。这些表达式把变量和运算符一同放到语句中。下表列出了C#允许的运算符，优先级和结合性。</p><table><thead><tr><th>分类</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>初级</td><td><code>(x) x.y f(x) a[x] x++ x-- new typeof sizeof checked unchecked</code></td><td>左</td></tr><tr><td>单目</td><td><code>+ - ! ~ ++x --x (T)x</code></td><td>左</td></tr><tr><td>乘法等</td><td><code>* / %</code></td><td>左</td></tr><tr><td>加法等</td><td><code>+ -</code></td><td>左</td></tr><tr><td>移位</td><td><code>&lt;&lt; &gt;&gt;</code></td><td>左</td></tr><tr><td>关系</td><td><code>&lt; &gt; &lt;= &gt;= is</code></td><td>左</td></tr><tr><td>相等</td><td><code>== !=</code></td><td>右</td></tr><tr><td>逻辑与</td><td><code>&amp;</code></td><td>左</td></tr><tr><td>逻辑异或</td><td><code>^</code></td><td>左</td></tr><tr><td>逻辑或</td><td><code>|</code></td><td>左</td></tr><tr><td>条件与</td><td><code>&amp;&amp;</code></td><td>左</td></tr><tr><td>条件或</td><td><code>||</code></td><td>左</td></tr><tr><td>条件</td><td><code>?:</code></td><td>右</td></tr><tr><td>赋值等</td><td><code>= *= /= %= += -= &lt;&lt;= &gt;&gt;= &amp;= ^= |=</code></td><td>右</td></tr></tbody></table><p>左结合意味着运算符是从左到右进行运算的。右结合意味着所有的运算是从右到左进行的，如赋值运算符，要等到其右边的计算出来之后，才把结果放到左边的变量中。</p></li></ol><p>2.清单 1-2. 单目运算符： Unary.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Unary</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> unary <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> preIncrement<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> preDecrement<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> postIncrement<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> postDecrement<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> positive<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> negative<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">sbyte</span></span> bitNot<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">bool</span></span> logNot<span class="token punctuation">;</span>
        preIncrement <span class="token operator">=</span> <span class="token operator">++</span>unary<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Pre-Increment: {0}&quot;</span><span class="token punctuation">,</span> preIncrement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        preDecrement <span class="token operator">=</span> <span class="token operator">--</span>unary<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Pre-Decrement: {0}&quot;</span><span class="token punctuation">,</span> preDecrement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        postDecrement <span class="token operator">=</span> unary<span class="token operator">--</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Post-Decrement: {0}&quot;</span><span class="token punctuation">,</span> postDecrement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        postIncrement <span class="token operator">=</span> unary<span class="token operator">++</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Post-Increment: {0}&quot;</span><span class="token punctuation">,</span> postIncrement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Final Value of Unary: {0}&quot;</span><span class="token punctuation">,</span> unary<span class="token punctuation">)</span><span class="token punctuation">;</span>
        positive <span class="token operator">=</span> <span class="token operator">-</span>postIncrement<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Positive: {0}&quot;</span><span class="token punctuation">,</span> positive<span class="token punctuation">)</span><span class="token punctuation">;</span>
        negative <span class="token operator">=</span> <span class="token operator">+</span>postIncrement<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Negative: {0}&quot;</span><span class="token punctuation">,</span> negative<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bitNot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        bitNot <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">sbyte</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">~</span>bitNot<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Bitwise Not: {0}&quot;</span><span class="token punctuation">,</span> bitNot<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logNot <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        logNot <span class="token operator">=</span> <span class="token operator">!</span>logNot<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Logical Not: {0}&quot;</span><span class="token punctuation">,</span> logNot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><ol><li>当计算表达式的时候，在后置增一和后置减一运算符进行运算时，先返回其值，再进行增一或者减一运算。当使用前置加号和减号运算符进行运算时，是先进行增一或者减一的运算，然后再返回其结果值。</li><li>在清单1-2中, 变量unary初始化为0，进行<code>++x</code>运算时，&quot;unary&quot;的值加1，再把其值1赋给&quot;preIncrement&quot;变量。在进行<code>--x</code>运算时，先把&quot;unary&quot;的值减到0， 再把值0赋给&quot;preDecrement&quot;变量。</li><li>进行<code>x-</code>运算时，先把&quot;unary&quot;的值0赋给&quot;postDecrement&quot; 变量，之后再把&quot;unary&quot;减到<code>-1</code>。进行x++运算时，先把&quot;unary&quot;的值<code>-1</code>赋给&quot;postIncrement&quot;变量，之后再对&quot;unary&quot;加1，使得&quot;unary&quot;变量现在的值为0。</li><li>变量&quot;bitNot&quot;初始值为0，进行按位取反运算，本例中，数0表示为二进制&quot;00000000&quot;，按位取反之后变为-1，其二进制表示为&quot;11111111&quot;。</li><li>了解一下表达式&quot;(sbyte)(~bitNot)&quot;， 任何对类型sbyte, byte, short 或者 ushort 类型数据的运算，返回结果都是整数。要把值赋给bitNot变量，我们必须使用cast （类型）运算符（强制类型转换），其中Type表示你希望转换成的类型（本例中为sbyte）。 Cast运算符把大范围类型的数据转换为小范围类型的数据时，须特别谨慎，因为此时有丢失数据的危险。一般来说，把小类型的数据赋给大类型变量，并没有问题， 因为大范围数据类型的变量具有足够的空间存放小类型数据。 注意在signed 和unsigned类型之间进行Cast运算时，也存在此类危险。 许多初级程序设计教程对变量的位表示作出了很好的讲解，同时也介绍了直接进行Cast运算的危险。</li></ol><p>逻辑非(!)运算符可以处理布尔变量值。本例中，&quot;logNot&quot;变量从false 变为true。</p><p>上述程序的输出结果如下：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>&gt;Pre-Increment: 1
&gt;Pre-Decrement 0
&gt;Post-Decrement: 0
&gt;Post-Increment -1
&gt;Final Value of Unary: 0
&gt;Positive: 1
&gt;Netative: -1
&gt;Bitwise Not: -1
&gt;Logical Not: True
</code></pre></div><p>3.清单 1-3. 二元运算符 Binary.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Binary</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> result<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">float</span></span> floatResult<span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
        y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;x+y: {0}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;x-y: {0}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;x*y: {0}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;x/y: {0}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        floatResult <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>x <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>y<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;x/y: {0}&quot;</span><span class="token punctuation">,</span> floatResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> x <span class="token operator">%</span> y<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;x%y: {0}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">+=</span> x<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;result+=x: {0}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><p>清单1-3 演示了二元操作符的几个例子。加法（+），减法（-），乘法（*）和除法（/）的运算结果，就是我们通常进行的的四则运算的结果。</p><p>因为&quot;floatResult&quot;变量是浮点运算类型，所以整型变量&quot;x&quot;和&quot;y&quot; 被强制转换成浮点类型来计算FloatResult。</p><p>这里有个求余数的运算符，两个操作数相除，返回余数。</p><p>最后一条语句给出了另外一种赋值形式，这里用了（+=）运算符.无论什么时候你使用（+=）运算符，那么这个二进制运算符就应该在运算符左右两边都进行运算，然后把值赋给左边的参数。本语句相当于&quot;result = result + x&quot;，并返回同样的值。</p><p>前面的课程中，你看到的使用次数较多的一种类型是&quot;string&quot; （字符串）类型。&quot;string&quot;类型是由包含在引号内的Unicode编码的字符构成。例如&quot;This is a string.&quot;</p><p>另外一种数据类型是数组。数组可以看成是同种类型的元素构成的集合。当声明数组时，你要指定类型名，数组名，维数和数组大小。</p><p>4.清单 1-4. Array Operations: Array.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> myInts <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">bool</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> myBools <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">bool</span></span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        myBools<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">bool</span></span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        myBools<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">bool</span></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> myDoubles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">double</span></span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> myStrings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;myInts[0]: {0}, myInts[1]: {1}, myInts[2]: {2}&quot;</span><span class="token punctuation">,</span> myInts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> myInts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> myInts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myBools<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        myBools<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        myBools<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;myBools[0][0]: {0}, myBools[1][0]: {1}&quot;</span><span class="token punctuation">,</span> myBools<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> myBools<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myDoubles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3.147</span><span class="token punctuation">;</span>
        myDoubles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7.157</span><span class="token punctuation">;</span>
        myDoubles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2.117</span><span class="token punctuation">;</span>
        myDoubles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">56.00138917</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;myDoubles[0, 0]: {0}, myDoubles[1, 0]: {1}&quot;</span><span class="token punctuation">,</span> myDoubles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> myDoubles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myStrings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Joe&quot;</span><span class="token punctuation">;</span>
        myStrings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Matt&quot;</span><span class="token punctuation">;</span>
        myStrings<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Robert&quot;</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;myStrings[0]: {0}, myStrings[1]: {1}, myStrings[2]: {2}&quot;</span><span class="token punctuation">,</span> myStrings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> myStrings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> myStrings<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><p>清单 1-4 演示了数组的各种不同实现方法。第一个例子是&quot;myInts&quot;数组，它在声明的同时进行了初始化。</p><p>接着是个二维数组，可以把它理解为数组的数组。我们需要使用&quot;new&quot;运算符来实例化初始数组的大小，之后，再对每个子数组使用new运算符。</p><p>第三个例子是个二维数组。数组可以是多维的，每一维可以通过逗号隔开，也必须用&quot;new&quot;运算符进行实例化。</p><p>最后定义了一个一维的字符串数组。</p><p>每种情况下，对于数据元素的访问可以通过引用元素的位置（下标）来进行。数组的大小可以是任何整型值。其下标从0开始。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>到现在为止，你已经了解了C# 的变量，简单数据类型，数组和字符串。我们还学习了如何用C#的运算符构成表达式。</p><p>(责任编辑:DawnSummit guixf@staff.ccidnet.com)</p>`,38),e=[o];function c(u,l){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","cspcls4_2.html.vue"]]);export{i as default};
