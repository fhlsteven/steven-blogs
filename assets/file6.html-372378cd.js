import{_ as n,o as s,c as a,a as t}from"./app-f0851ed3.js";const e={},p=t(`<h1 id="在c-中调用com组件" tabindex="-1"><a class="header-anchor" href="#在c-中调用com组件" aria-hidden="true">#</a> 在C#中调用COM组件</h1><blockquote><p>源作者：追风 人气：4342</p></blockquote><p>.NET框架是COM的一个自然发展，两者共享许多核心要素，这包括组件的再利用以及语言的中立性。为了向后兼容，COM Interop可以使用现存的COM组件而不要求对原始组件进行修改。当一个 .NET 框架开发人员想将COM代码合并到一个管理应用程序中时，就可以用COM Interop功能引入相关的COM类型。引入之后，这个COM类型就可以使用了。这属于前期连接。但是有时候你需要对象的后期连接，这在.NET中也能实现，使用名称空间映射就可以通过后期连接来调用COM对象。</p><p>这里介绍一个应用程序例程，它将调用Excel，并且通过使用后期连接使它可视。</p><p>后期连接将使用Reflectionb的Type类，这个Type类有许多方法可以取得COM对象，就象我们已经使用过的 GetTypeFromProgID(&quot;Application&quot;)，这个方法从系统注册表中得到COM ID，然后使用STATIC类的成员 Activator.CreateInstance()创建这个COM对象的一个新例示。</p><p>要想调用COM对象的方法、函数和属性，就必须使用包含正确设置的Type对象的InvokeMethod()方法。这个方法接受一些参数变量，其中最重要的一个是方法类型的ex属性（get或set）。在例子中我们为Excel.Visible使用了set属性，从而使Excel应用程序可视。</p><p>我们将尝试在.NET环境中调用Excel应用程序。这是一个后期连接应用程序，因为如果是前期连接的话你就需要使用COM对象的RCW（RunTime Callable Wraper：运行时间的可调用包）来完成下面的命令行程序tblimp所完成的任务：</p><p><code>ex. c:\\&gt; tblimp /out:</code></p><p>下载COMinDOTNET.zip，这是一个控制台应用程序。下面是调用excel的代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//Variable</span>
<span class="token class-name">Type</span> excel<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> parameter<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">object</span></span> excelObject<span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token comment">//Get the excel object</span>
    excel <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token function">GetTypeFromProgID</span><span class="token punctuation">(</span><span class="token string">&quot;Excel.Application&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Create instance of excel</span>
    excelObject <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>excel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Set the parameter whic u want to set</span>
    parameter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">//Set the Visible property</span>
    excel<span class="token punctuation">.</span><span class="token function">InvokeMember</span><span class="token punctuation">(</span><span class="token string">&quot;Visible&quot;</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>SetProperty<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> excelObject<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Error Stack {0} &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">finally</span><span class="token punctuation">{</span>
    <span class="token comment">//When this object is destroyed the Excel application will be closed</span>
    <span class="token comment">//So Sleep for sometime and see the excel application</span>
    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Relaese the object</span>
    <span class="token comment">//GC.RunFinalizers()</span>
<span class="token punctuation">}</span>
</code></pre></div>`,10),o=[p];function c(l,u){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","file6.html.vue"]]);export{k as default};
