import{_ as o,r as e,o as p,c,b as n,d as a,e as t,a as l}from"./app-d9da1b6d.js";const u={},i=n("h1",{id:"extended-interface-for-toolbars",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#extended-interface-for-toolbars","aria-hidden":"true"},"#"),a(" Extended Interface for Toolbars")],-1),r=n("div",{class:"language-txt","data-ext":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`By psdavis
Posted 11 Apr 2002
38,858 views
`)])],-1),k={href:"http://www.codeproject.com/script/Articles/list_articles.asp?userid=32201",target:"_blank",rel:"noopener noreferrer"},d={href:"http://www.codeproject.com/cs/menu/ExtendedToolbar/ExtendedInterface.zip",target:"_blank",rel:"noopener noreferrer"},m=l(`<h2 id="problem" tabindex="-1"><a class="header-anchor" href="#problem" aria-hidden="true">#</a> Problem</h2><p><code>ToolbarButtons</code> in .NET lack the basic capability of performing a task on their own. It would be very convenient to set up all toolbar events directly inside of the toolbar itself.</p><p>The current accepted practice is to override the ButtonClick event and use a case statement to decide what button was pressed and what function should be called. The scribble example given by Microsoft is displayed below.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">toolBar1_ButtonClick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>ToolBarButtonClickEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>      e<span class="token punctuation">.</span>Button <span class="token operator">==</span> newButton     <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">New</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span>Button <span class="token operator">==</span> openButton    <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Open</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span>Button <span class="token operator">==</span> saveButton    <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Save</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span>Button <span class="token operator">==</span> previewButton <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">PrintPreview</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span>Button <span class="token operator">==</span> printButton   <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Print</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span>Button <span class="token operator">==</span> helpButton    <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">ShowHelpTopics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Or you could devise some sort of method for looking at the string text. I&#39;ve seen one example that was similar to this.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ToolBarOnClick</span><span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">,</span> <span class="token class-name">ToolBarButtonClickEventArgs</span> e <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">switch</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span>Button<span class="token punctuation">.</span>Text <span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&quot;&amp;Open&quot;</span><span class="token punctuation">:</span>
         <span class="token range operator">..</span><span class="token punctuation">.</span>
         <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&quot;&amp;Close&quot;</span><span class="token punctuation">:</span>

         <span class="token range operator">..</span><span class="token punctuation">.</span>

         <span class="token keyword">break</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Another process described by Petzolt will convert the ToolBarButtonClickEventArgs parameter into a MenuItem.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ToolBarOnClick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">,</span> <span class="token class-name">ToolBarButtonClickEventArgs</span> e <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">ToolBarButton</span> btn <span class="token operator">=</span> e<span class="token punctuation">.</span>Button<span class="token punctuation">;</span>
    <span class="token class-name">MenuItem</span> mnu <span class="token operator">=</span> <span class="token punctuation">(</span>MenuItem<span class="token punctuation">)</span> btn<span class="token punctuation">.</span>Tag<span class="token punctuation">;</span>
  
    mnu<span class="token punctuation">.</span><span class="token function">PerformClick</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Hopefully, we can overcome these shortcoming with a quick and simple extended property. Plus, give you a sample to create your own extended interfaces.</p><h2 id="background" tabindex="-1"><a class="header-anchor" href="#background" aria-hidden="true">#</a> Background</h2><p>The <code>IExtenderProvider</code> is a tremendously powerful tool when used in conjunction with the interface, yet the syntax is quite simple. Basically you need to create a Get/Set pairing similar to a standard C# property, but with the full name displayed.</p><p>The ProvideProperty tag tells the interface that you are adding a property called &quot;<code>ToolbarFunction</code>&quot; to all of your components in your current development. The CanExtend function narrows the components that receive this property to only ToolBarButtons. Each ToolBarButton will receive a new property that will allow each button to be assigned to a specific MenuItem.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ProvideProperty</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;ToolbarFunction&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Component</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span> <span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToolbarFunction</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Component</span><span class="token punctuation">,</span> <span class="token class-name">IExtenderProvider</span></span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetToolbarFunction</span><span class="token punctuation">(</span> <span class="token class-name">Component</span> pComponent<span class="token punctuation">,</span> <span class="token class-name">MenuItem</span> pMenuItem <span class="token punctuation">)</span>

   <span class="token range operator">..</span><span class="token punctuation">.</span>
   <span class="token keyword">public</span> <span class="token return-type class-name">MenuItem</span> <span class="token function">GetToolbarFunction</span><span class="token punctuation">(</span> <span class="token class-name">Component</span> pComponent <span class="token punctuation">)</span>

       <span class="token range operator">..</span><span class="token punctuation">.</span>

   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CanExtend</span><span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">object</span></span> pComponent <span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">(</span> pComponent <span class="token keyword">is</span> <span class="token class-name">ToolBarButton</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The source code for the interface is quite simple, but I&#39;ll refrain from discussing the actual coding process to keep this article on a basic level.</p><h3 id="_1-add-the-toolbarfunction-component-to-net" tabindex="-1"><a class="header-anchor" href="#_1-add-the-toolbarfunction-component-to-net" aria-hidden="true">#</a> 1. Add the ToolBarFunction component to .NET</h3><p>After copying the Extended Interface DLL (ExtendedInterface.DLL) to your desired destination, you will need to add it permanently to your toolbox.</p><ol><li>With the toolbox open, right click the list to select &#39;Customize Toolbox.</li><li>Select the tab .NET Framework Components</li><li>Click Browse...</li><li>Click on ExtendedInterface.DLL</li><li>Click OK.</li></ol><p>The Toolbox should have two new components: StatusMessage and ToolBarFunction.</p><p>The other component StatusMessage was discussed in an earlier article.</p><h3 id="_2-optional-give-useful-names-to-your-menus" tabindex="-1"><a class="header-anchor" href="#_2-optional-give-useful-names-to-your-menus" aria-hidden="true">#</a> 2. Optional: Give useful names to your menus</h3><p><a href="./img/tools_1.png">Menu Item Properties</a></p><p>An optional step is to use meaningful names for the (Name) parameter of each <code>MenuItem</code>. Names like MenuItem23 are certainly usable, but when you have to manage functionality based on those names, it can get quite complicated.</p><h3 id="_3-add-the-toolbarfunction-component-to-your-form" tabindex="-1"><a class="header-anchor" href="#_3-add-the-toolbarfunction-component-to-your-form" aria-hidden="true">#</a> 3. Add the ToolBarFunction component to your form</h3><p>Now it&#39;s time to add the ToolBarFunction to your application. Drag one over from your Toolbox and it should appear below the form with the other components.</p><h3 id="_4-assign-menuitem-functionality-to-your-toolbar" tabindex="-1"><a class="header-anchor" href="#_4-assign-menuitem-functionality-to-your-toolbar" aria-hidden="true">#</a> 4. Assign MenuItem functionality to your toolbar</h3><p>You will, of course, need to have a ToolBar on your form. Drag one over from your Toolbox if you haven&#39;t already.</p><ol><li>Display the properties of your ToolBar.</li><li>Click on the &#39;Buttons&#39; collection and make sure you have at least one button. Call it anything you wish, I used ToolOpen.</li><li>You will see a &#39;ToolbarFunction&#39; property that the component has added for you. Use the drop down list to view all of your menu items.</li><li>Select the MenuItem that you want the button to use when clicked.</li><li>Click OK to close the collection.</li></ol><p><a href="./img/tools_2.png">Adding ToolBar Buttons</a></p><h3 id="_5-test-your-application" tabindex="-1"><a class="header-anchor" href="#_5-test-your-application" aria-hidden="true">#</a> 5. Test your application</h3><p>Once you have a ToolBarButton tied into a MenuItem, clicking on a button will have the same effect as clicking the menu! That was just too easy.</p><h2 id="source-code" tabindex="-1"><a class="header-anchor" href="#source-code" aria-hidden="true">#</a> Source Code</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ProvideProperty</span><span class="token attribute-arguments"><span class="token punctuation">(</span> <span class="token string">&quot;ToolbarFunction&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Component</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToolbarFunction</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Component</span><span class="token punctuation">,</span> <span class="token class-name">IExtenderProvider</span></span>
<span class="token punctuation">{</span>
    <span class="token class-name">ToolBar</span> m_ToolBar <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Hashtable</span> m_Dictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetToolbarFunction</span><span class="token punctuation">(</span><span class="token class-name">Component</span> pComponent<span class="token punctuation">,</span> <span class="token class-name">MenuItem</span> pMenuItem <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m_Dictionary<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>pComponent<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>  
            m_Dictionary<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>pComponent<span class="token punctuation">,</span> pMenuItem<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>m_ToolBar <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">ToolBarButton</span> pToolBarButton <span class="token operator">=</span> pComponent <span class="token keyword">as</span> <span class="token class-name">ToolBarButton</span><span class="token punctuation">;</span> 

                <span class="token keyword">if</span><span class="token punctuation">(</span>pToolBarButton <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
                <span class="token punctuation">{</span> 
                    m_ToolBar <span class="token operator">=</span> pToolBarButton<span class="token punctuation">.</span>Parent <span class="token keyword">as</span> <span class="token class-name">ToolBar</span><span class="token punctuation">;</span> 

                    <span class="token keyword">if</span><span class="token punctuation">(</span> m_ToolBar <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
                        m_ToolBar<span class="token punctuation">.</span>ButtonClick <span class="token operator">+=</span> 
                            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ToolBarButtonClickEventHandler</span><span class="token punctuation">(</span>Handle_ToolbarButtonClick<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span> 
            m_Dictionary<span class="token punctuation">[</span>pComponent<span class="token punctuation">]</span> <span class="token operator">=</span> pMenuItem<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">MenuItem</span> <span class="token function">GetToolbarFunction</span><span class="token punctuation">(</span><span class="token class-name">Component</span> pComponent<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> m_Dictionary<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>pComponent<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>MenuItem<span class="token punctuation">)</span> m_Dictionary<span class="token punctuation">[</span>pComponent<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CanExtend</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> pComponent<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span>pComponent <span class="token keyword">is</span> <span class="token class-name">ToolBarButton</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Handle_ToolbarButtonClick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> pComponent<span class="token punctuation">,</span> <span class="token class-name">ToolBarButtonClickEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> m_Dictionary<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Button<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">MenuItem</span> pMenuItem <span class="token operator">=</span> <span class="token punctuation">(</span>MenuItem<span class="token punctuation">)</span>m_Dictionary<span class="token punctuation">[</span>e<span class="token punctuation">.</span>Button<span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>pMenuItem <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
                pMenuItem<span class="token punctuation">.</span><span class="token function">PerformClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="about-psdavis" tabindex="-1"><a class="header-anchor" href="#about-psdavis" aria-hidden="true">#</a> About psdavis</h2><p>Phillip has been a programmer long enough to remember cutting paper strip code out of Dr. Dobbs and running them thru a mechanical decoder to avoid typing in the samples.</p><p>Click here to view psdavis&#39;s online profile.</p><h2 id="other-popular-menus-toolbars-articles" tabindex="-1"><a class="header-anchor" href="#other-popular-menus-toolbars-articles" aria-hidden="true">#</a> Other popular Menus &amp; Toolbars articles</h2>`,36),h={href:"http://www.codeproject.com/cs/menu/aal-4.asp",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"Exploring the issues of menu management as specified externally via an XML file, in the context of status bars, toolbars, and events.",-1),f={href:"http://www.codeproject.com/cs/menu/menuimage.asp",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"How to extend the standard menus to support icons using IExtender in C#.",-1),b={href:"http://www.codeproject.com/cs/menu/magicmenucontrol.asp",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"Menus that mimic VS.NET/OfficeXP",-1),B={href:"http://www.codeproject.com/cs/menu/extendedinterface.asp",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"Adding an extended property to Menus in order to provide automatic statusbar messages as the user chooses different menu options.",-1);function _(T,x){const s=e("ExternalLinkIcon");return p(),c("div",null,[i,r,n("p",null,[n("a",k,[a("Articles by this author"),t(s)])]),n("p",null,[n("a",d,[a("Download project and source - 16 Kb"),t(s)])]),m,n("ul",null,[n("li",null,[n("p",null,[n("a",h,[a("The Application Automation Layer - Using XML to generate Menus"),t(s)])]),y]),n("li",null,[n("p",null,[n("a",f,[a("Menu Images using C# and IExtenderProvider - a better mousetrap!"),t(s)])]),w]),n("li",null,[n("p",null,[n("a",b,[a("Magic MenuControl - VS.NET Style"),t(s)])]),g]),n("li",null,[n("p",null,[n("a",B,[a("Extended Interface for Status Message"),t(s)])]),v])])])}const I=o(u,[["render",_],["__file","tools1.html.vue"]]);export{I as default};
