import{_ as n,o as s,c as a,a as p}from"./app-8e5157a8.js";const t={},e=p(`<h1 id="一周学会c-系列" tabindex="-1"><a class="header-anchor" href="#一周学会c-系列" aria-hidden="true">#</a> 一周学会C#系列</h1><ul><li><a href="#csp_1">一周学会C#（前言）</a></li><li><a href="#csp_2">一周学会C#（前言续）</a></li><li><a href="#csp_3">一周学会C#（前言续二）</a></li><li><a href="#csp_4">一周学会C#（函数一）</a></li><li><a href="#csp_5">一周学会C#（函数二）</a></li><li><a href="#csp_6">一周学会C#（函数三）</a></li></ul><hr><h2 id="一周学会c-前言" tabindex="-1"><a class="header-anchor" href="#一周学会c-前言" aria-hidden="true">#</a> <a id="csp_1">一周学会C#（前言）</a></h2><p>大家好！C#作为微软在21世纪推出的新语言，它有着其他语言无法比拟的优势。但如何在短时间内迅速掌握它，却是一个比较难的问题。但如果你看完这个教程后，你一定会理解并掌握C#。</p><p>这个教程共分六个部分，今天先介绍C#中比较基本的概念。</p><h3 id="_1-总体框架" tabindex="-1"><a class="header-anchor" href="#_1-总体框架" aria-hidden="true">#</a> 1.总体框架</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//Hiker.cs 类名不一定等于文件名</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span> <span class="token comment">//每一个程序必须在开头使用这一语句</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">HitchHiker</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//程序从Main开始执行</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">;</span>
        result <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> thirteen<span class="token punctuation">;</span>
        thirteen <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>result <span class="token operator">/</span> thirteen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出函数</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>result <span class="token operator">%</span> thirteen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//上面各语句的具体用法以后会介绍</span>
<span class="token comment">/* 这个程序用来 
 * 演示C#的总体框架
 */</span> 
</code></pre></div><p><strong>注意</strong>：上面的程序中，符号<code>//</code>表示注释，在<code>//</code>后面的同一行上的内容是注释; <code>/*</code>和<code>*/</code> 这间的内容都是注释<br> 你可以在windows的命令行提示符下键入：<code>csc Hiker.cs</code><br> 进行编译产生可执行文件<code>Hiker.exe</code><br> 然后在windows的命令行提示符下键入：<code>Hiker</code>，你就可以看到在屏幕上显视<code>42</code> <strong>(注：你必须装有.net framework)</strong></p><p>和Java不一样，C#源文件名不一定要和C#源文件中包含的类名相同。<br> C#对大小写敏感，所以Main的首字母为大写的M(这一点大家要注意，尤其是熟悉C语言的朋友)。<br> 你可以定义一个返回值为int的Main函数，当返回值为0时表示成功：<br><code>public static int Main() { ... return 0; }</code><br> 你也可以定义Main函数的返回值为void：<br><code>public static void Main() { ... }</code><br> 你还可以定义Main函数接收一个string数组：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> args <span class="token keyword">in</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>程序中的Main函数必须为<code>static</code>。</p><h3 id="_2-标识符" tabindex="-1"><a class="header-anchor" href="#_2-标识符" aria-hidden="true">#</a> 2.标识符</h3><p>标识符起名的规则：</p><p><strong>✓</strong> 局部变量、局部常量、非公有实例域、函数参数使用camelCase规则；其他类型的标识符使用PascalCase规则。</p><ul><li>privateStyle camelCase规则（第一个单词的首字母小写，其余单词的首字母大写）</li><li>PublicStyle PascalCase规则（所有单词的首字母大写）</li></ul><p><strong>✓</strong> 尽量不要使用缩写。</p><p>Message，而不要使用msg。</p><p><strong>✓</strong> 不要使用匈牙利命名法。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">GrammarHelper</span>
<span class="token punctuation">{</span>   
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">QualifiedSymbol</span> <span class="token function">Optional</span><span class="token punctuation">(</span><span class="token class-name">AnySymbol</span> symbol<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token class-name">AnyMultiplicity</span> optional <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OptionalMultiplicity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre></div><h3 id="_3-关键字" tabindex="-1"><a class="header-anchor" href="#_3-关键字" aria-hidden="true">#</a> 3.关键字</h3><p>C#中76个关键字：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">abstract</span>   <span class="token keyword">as</span>        <span class="token keyword">base</span>          <span class="token keyword">bool</span>         <span class="token keyword">break</span>
<span class="token keyword">byte</span>       <span class="token keyword">case</span>      <span class="token keyword">catch</span>         <span class="token keyword">char</span>         <span class="token keyword">checked</span>
<span class="token keyword">class</span>      <span class="token class-name"><span class="token keyword">const</span></span>     <span class="token keyword">continue</span>      <span class="token keyword">decimal</span>      <span class="token keyword">default</span>
<span class="token keyword">delegate</span>   <span class="token keyword">do</span>        <span class="token keyword">double</span>        <span class="token keyword">else</span>         <span class="token keyword">enum</span>
<span class="token class-name"><span class="token keyword">event</span></span>      <span class="token keyword">explicit</span>  <span class="token keyword">extern</span>        <span class="token boolean">false</span>        <span class="token keyword">finally</span>
<span class="token keyword">fixed</span>      <span class="token keyword">float</span>     <span class="token keyword">for</span>           <span class="token keyword">foreach</span>      <span class="token keyword">goto</span>
<span class="token keyword">if</span>         <span class="token keyword">implicit</span>  <span class="token keyword">in</span>            <span class="token keyword">int</span>          <span class="token keyword">interface</span>
<span class="token class-name"><span class="token keyword">internal</span></span>   <span class="token keyword">is</span>        <span class="token keyword">lock</span>          <span class="token keyword">long</span>         <span class="token keyword">namespace</span>
<span class="token keyword">new</span>        <span class="token keyword">null</span>      <span class="token keyword">object</span>        <span class="token keyword">operator</span>     <span class="token keyword">out</span>
<span class="token keyword">override</span>   <span class="token keyword">params</span>    <span class="token keyword">private</span>       <span class="token keyword">protected</span>    <span class="token keyword">public</span>
<span class="token keyword">readonly</span>   <span class="token keyword">ref</span>       <span class="token keyword">return</span>        <span class="token keyword">sbyte</span>        <span class="token keyword">sealed</span>
<span class="token keyword">short</span>      <span class="token keyword">sizeof</span>    <span class="token keyword">stackalloc</span>    <span class="token keyword">static</span>       <span class="token keyword">string</span>
<span class="token keyword">struct</span>     <span class="token class-name"><span class="token keyword">switch</span></span>    <span class="token keyword">this</span>          <span class="token keyword">throw</span>        <span class="token boolean">true</span>
<span class="token keyword">try</span>        <span class="token keyword">typeof</span>    <span class="token keyword">uint</span>          <span class="token keyword">ulong</span>        <span class="token keyword">unchecked</span>
<span class="token keyword">unsafe</span>     <span class="token keyword">ushort</span>    <span class="token keyword">using</span>         <span class="token keyword">virtual</span>      <span class="token keyword">void</span>
<span class="token keyword">while</span>
</code></pre></div><p>5个在某些情况下是关键字：<code>get set value add remove</code></p><p>C#中有76个在任何情况下都有固定意思的关键字。另外还有5个在特定情况下才有固定意思的标识符。例如，value能用来作为变量名，但有一种情况例外，那就是它用作属性/索引器的set语句的时候是一关键字。<br> 但你可以在关键字前加<code>@</code>来使它可以用作变量名：<code>int @int = 42;</code><br> 不过在一般情况下不要使用这种变量名。<br></p><p>你也可以使用<code>@</code>来产生跨越几行的字符串，这对于产生正则表达式非常有用。例如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> pattern <span class="token operator">=</span> <span class="token string">@&quot;
           (               # start the group
             abra(cad)?  # match abra and optional cad
           )+&quot;</span><span class="token punctuation">;</span>           <span class="token comment">// one or more occurrences</span>
</code></pre></div><p>如果你要在字符串中包含双引号，那你可以这样：<code>string quote = @&quot;&quot;&quot;quote&quot;&quot;&quot;;</code></p><h2 id="一周学会c-前言续" tabindex="-1"><a class="header-anchor" href="#一周学会c-前言续" aria-hidden="true">#</a> <a id="csp_2">一周学会C#（前言续）</a></h2><p>C#才鸟(QQ:249178521)</p><h3 id="_4-标点符号" tabindex="-1"><a class="header-anchor" href="#_4-标点符号" aria-hidden="true">#</a> 4.标点符号</h3><p><code>{</code> 和 <code>}</code> 组成语句块<br><code>;</code>分号表示一个语句的结束</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Hiker</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">;</span>
        result <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> thirteen<span class="token punctuation">;</span>
        thirteen <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>result <span class="token operator">/</span> thirteen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>result <span class="token operator">%</span> thirteen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>一个C#的“类/结构/枚举”的定义不需要一个终止的分号。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Hiker</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token comment">// 没有;是正确的</span>
</code></pre></div><p>然而你可以使用一个终止的分号，但对程序没有任何影响：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Hiker</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//有;是可以的但不推荐</span>
</code></pre></div><p>在Java中，一个函数的定义中可以有一个结尾分号，但在C#中是不允许的。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Hiker</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//;是不正确的</span>
<span class="token punctuation">}</span> <span class="token comment">// 没有;是正确的</span>
</code></pre></div><h3 id="_5-声明" tabindex="-1"><a class="header-anchor" href="#_5-声明" aria-hidden="true">#</a> 5.声明</h3><p>声明是在一个块中引入变量</p><ul><li>每个变量有一个标识符和一个类型</li><li>每个变量的类型不能被改变</li></ul><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Hiker</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">;</span>
        result <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> thirteen<span class="token punctuation">;</span>
        thirteen <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>result <span class="token operator">/</span> thirteen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>result <span class="token operator">%</span> thirteen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样声明一个变量是非法的：这个变量可能不会被用到。例如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">//编译时出错</span>
<span class="token keyword">else</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
</code></pre></div><h3 id="_6-表达式" tabindex="-1"><a class="header-anchor" href="#_6-表达式" aria-hidden="true">#</a> 6.表达式</h3><p>表达式是用来计算的!</p><ul><li>每个表达式产生一个值</li><li>每个表达式必须只有单边作用</li><li>每个变量只有被赋值后才能使用</li></ul><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Hiker</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">;</span>
        result <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> thirteen<span class="token punctuation">;</span>
        thirteen <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>result <span class="token operator">/</span> thirteen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>result <span class="token operator">%</span> thirteen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>C#不允许任何一个表达式读取变量的值，除非编译器知道这个变量已经被初始化或已经被赋值。例如，下面的语句会导致编译器错误：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> m<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 编译器错误，因为m有可能不会被赋值</span>
</code></pre></div><h3 id="_7-取值" tabindex="-1"><a class="header-anchor" href="#_7-取值" aria-hidden="true">#</a> 7.取值</h3><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">取值</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:center;">bool</td><td style="text-align:center;">true false</td><td>布尔型</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">3.14</td><td>实型</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">3.1415</td><td>双精度型</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">&#39;X&#39;</td><td>字符型</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">9</td><td>整型</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">&quot;Hello&quot;</td><td>字符串</td></tr><tr><td style="text-align:center;">object</td><td style="text-align:center;">null</td><td>对象</td></tr></tbody></table><h2 id="一周学会c-前言续二" tabindex="-1"><a class="header-anchor" href="#一周学会c-前言续二" aria-hidden="true">#</a> <a id="csp_3">一周学会C#（前言续二）</a></h2><h3 id="_8-操作符" tabindex="-1"><a class="header-anchor" href="#_8-操作符" aria-hidden="true">#</a> 8.操作符</h3><table><thead><tr><th>操作符</th><th>类型</th></tr></thead><tbody><tr><td><code>+ - * / %（取余数）</code></td><td>算术</td></tr><tr><td><code>&amp;&amp; || ! ?:</code></td><td>逻辑</td></tr><tr><td><code>&lt; &lt;= &gt; &gt;=</code></td><td>关系</td></tr><tr><td><code>== !=</code></td><td>相等</td></tr><tr><td><code>=</code></td><td>赋值</td></tr></tbody></table><h3 id="_9-编程风格" tabindex="-1"><a class="header-anchor" href="#_9-编程风格" aria-hidden="true">#</a> 9．编程风格</h3><h4 id="较正规的编程风格" tabindex="-1"><a class="header-anchor" href="#较正规的编程风格" aria-hidden="true">#</a> 较正规的编程风格</h4><ul><li>在一个二元操作符的每一边都加一个空格</li><li>在每一个逗号后面而不是前面加一个空格</li><li>每一个关键字后面加一个空格</li><li>一行一个语句</li><li>分号前不要有空格</li><li>函数的园括号和参数之间不加空格</li><li>在一元操作符和操作数之间不加空格</li></ul><p>在一个二元操作符的每一边都加一个空格：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> result <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//推荐</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> result<span class="token operator">/</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//不推荐</span>
</code></pre></div><p>在每一个逗号后面而不是前面加一个空格：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> result <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//推荐</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span>result <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不推荐</span>
</code></pre></div><p>每一个关键字后面加一个空格：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">OneLine</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token range operator">..</span><span class="token punctuation">.</span>   <span class="token comment">//推荐</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">OneLine</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token range operator">..</span><span class="token punctuation">.</span>    <span class="token comment">//不推荐</span>
</code></pre></div><p>分号前不要有空格：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> result <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//推荐</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> result <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">//不推荐</span>
</code></pre></div><p>函数的园括号和参数之间不加空格：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">OneLine</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token range operator">..</span><span class="token punctuation">.</span>  <span class="token comment">//推荐</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">OneLine</span><span class="token punctuation">(</span> comment <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token comment">//不推荐</span>
</code></pre></div><p>在一元操作符和操作数之间不加空格：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token operator">++</span>keywordCount<span class="token punctuation">;</span> <span class="token comment">//推荐</span>
<span class="token operator">++</span> keywordCount<span class="token punctuation">;</span> <span class="token comment">//不推荐</span>
</code></pre></div><h3 id="_10-找错" tabindex="-1"><a class="header-anchor" href="#_10-找错" aria-hidden="true">#</a> 10.找错</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">bool</span> <span class="token keyword">checked</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>                                         <span class="token number">1</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>                                     <span class="token number">2</span>

<span class="token class-name"><span class="token keyword">int</span></span> matched <span class="token operator">=</span> symbol<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>matched <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>                                           <span class="token number">3</span>
    <span class="token range operator">..</span><span class="token range operator">..</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">char</span></span> optional <span class="token operator">=</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> theory <span class="token operator">=</span> &#39;complex&#39;<span class="token punctuation">;</span>                  <span class="token number">4</span>

<span class="token class-name"><span class="token keyword">int</span></span> matched <span class="token operator">=</span> <span class="token function">0_or_more</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token number">5</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
</code></pre></div><ul><li>第1段程序的错误：<code>checked</code>是一个关键字</li><li>第2段程序的错误：不是<code>main</code>，而是<code>Main</code></li><li>第3段程序的错误：变量声明语句没有分号</li><li>第4段程序的错误：字符值必须用单引号表示，字符串必须用双引号表示</li><li>第5段程序的错误：第一个错误是标识符不能以数字开头;第二个错误是不能用下划线作标识符。</li></ul><h2 id="一周学会c-函数一" tabindex="-1"><a class="header-anchor" href="#一周学会c-函数一" aria-hidden="true">#</a> <a id="csp_4">一周学会C#（函数一）</a></h2><h3 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1.前言</h3><ul><li>C#不支持全局函数 <blockquote><p>所有的函数必须在类内部声明</p></blockquote></li><li>无源文件和头文件之分 <blockquote><p>所有的函数必须声明的时候被实现</p></blockquote></li></ul><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">NotAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//错误，C#没有全局函数</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Methods</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Inline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment">//错误，函数不能有结尾分号</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">AlsoError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//错误，函数必须声明的时候被实现</span>
<span class="token punctuation">}</span>
</code></pre></div><p>和Java一样，C#不允许有全局函数。所有的函数必须在类或结构内实现。函数是类或结构的成员，函数也被称为方法。</p><p>C#允许可以在类的声明中加入结尾分号，例如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Methods</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//可以有结尾分号</span>
</code></pre></div><p>但是，C#不允许在函数的声明中加入结尾分号，例如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Methods</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token punctuation">;</span> <span class="token comment">//错误，函数不能有结尾分号</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_2-声明函数" tabindex="-1"><a class="header-anchor" href="#_2-声明函数" aria-hidden="true">#</a> 2.声明函数</h3><p>数参数列表</p><ul><li>各参数以逗号隔开</li><li>参数必须命名</li><li>没有参数时括号不能省略</li></ul><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Methods</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token comment">//错误，参数没有命名</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NoError</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> delta<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span> 

    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment">//错误，无参数时不允许使用void</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> 
    <span class="token punctuation">}</span> 
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">NoError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre></div><h3 id="_3-值型参数" tabindex="-1"><a class="header-anchor" href="#_3-值型参数" aria-hidden="true">#</a> 3. 值型参数</h3><p>一般的函数参数是实参的一个拷贝</p><ul><li>实参必须预先被赋值</li><li>实参可以是常量类型</li></ul><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ParameterPassing</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Method</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> parameter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        parameter <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> arg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为0</span>
        <span class="token function">Method</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>（<strong>注：为了叙述的方便，以后所出现的“参数”这个词均指函数参数，也就是所谓的形参</strong>）</p><p>没有被<code>ref</code>或<code>out</code>修饰的函数参数是一个值型参数。值型参数只有在该参数所属的函数被调用的时候才存在，并且用调用时所传递的实参的值来进行初始化。当函数调用结束时，值型参数不复存在。</p><p>只有被预先赋值的实参才能被传递给值型参数，例如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">;</span>    <span class="token comment">// arg没有被赋初值</span>
<span class="token function">Method</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误，实参必须预先赋初值</span>
</code></pre></div><p>传递给函数的实参可以是纯粹的数而不是变量，例如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token function">Method</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">Method</span><span class="token punctuation">(</span><span class="token number">21</span> <span class="token operator">+</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="一周学会c-函数二" tabindex="-1"><a class="header-anchor" href="#一周学会c-函数二" aria-hidden="true">#</a> <a id="csp_5">一周学会C#（函数二）</a></h2><h3 id="_4-引用型参数" tabindex="-1"><a class="header-anchor" href="#_4-引用型参数" aria-hidden="true">#</a> 4.引用型参数</h3><p>引用型参数是实参的一个别名</p><ul><li>没有发生复制</li><li>实参必须预先被赋值</li><li>实参必须是一个变量类型</li><li>实参和函数参数都要有<code>ref</code></li></ul><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ParameterPassing</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> parameter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        parameter <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> arg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为0</span>
        <span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">ref</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为42</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>函数参数有<code>ref</code>修饰符时，被称为引用型参数。引用型参数不产生新的存储区间。实际上，引用型参数是函数调用时所传递的实参所代表的变量的别名。结果是引用型参数只是实参所代表的变量的另一个名字。</p><p><code>ref</code>修饰符必须同时出现在函数声明语句和函数调用语句中。</p><p>只有被预先赋值的实参才能被传递给引用型参数，例如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">;</span>    <span class="token comment">// arg没有被赋初值</span>
<span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">ref</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误，实参必须预先赋初值</span>
</code></pre></div><p>传递给引用型参数的实参必须是变量类型，而不能是纯粹的值或常量。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//错误，引用型参数的实参不能是纯粹的值</span>
<span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> arg <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">ref</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//错误，引用型参数的实参不能是常量</span>
</code></pre></div><h3 id="_5-out型参数" tabindex="-1"><a class="header-anchor" href="#_5-out型参数" aria-hidden="true">#</a> 5.<code>out</code>型参数</h3><p><code>out</code>型参数是实参的一个别名</p><ul><li>没有发生复制</li><li>实参不必预先赋值</li><li>实参必须是变量类型</li><li>函数参数必须被预先赋值才能使用</li><li>实参和函数参数都要有<code>out</code></li></ul><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ParameterPassing</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> parameter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        parameter <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">;</span>
        <span class="token comment">//Console.Write(arg);</span>
        <span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">out</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为42</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>函数参数有<code>out</code>修饰符时，被称为<code>out</code>型参数。<code>out</code>型参数不产生新的存储区间。实际上，<code>out</code>型参数是函数调用时所传递的实参所代表的变量的别名。结果是<code>out</code>型参数只是实参所代表的变量的另一个名字。</p><p><code>out</code>修饰符必须同时出现在函数声明语句和函数调用语句中。</p><p>没有被预先赋值的实参能够被传递给引用型参数，例如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">;</span>    <span class="token comment">// arg没有被赋初值</span>
<span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">out</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确，实参可以不赋初值</span>
</code></pre></div><p>传递给<code>out</code>型参数的实参必须是变量类型，而不能是纯粹的值或常量。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//错误，out型参数的实参不能是纯粹的值</span>
<span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> arg <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">out</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//错误，out型参数的实参不能是常量</span>
</code></pre></div><h3 id="_6-in型参数" tabindex="-1"><a class="header-anchor" href="#_6-in型参数" aria-hidden="true">#</a> 6.in型参数?</h3><p><code>readonly</code>, <code>const</code>和 <code>in</code>, 都是C# 关键字</p><ul><li>它们不能被用于函数参数</li><li><code>ref/out</code> 型参数总是被赋于写的权力</li></ul><h3 id="_7-函数重载" tabindex="-1"><a class="header-anchor" href="#_7-函数重载" aria-hidden="true">#</a> 7.函数重载</h3><p>一个类中的函数可以有同一个名字，称为重载</p><ul><li>函数名和参数称为标识</li><li>标识必须唯一</li><li>返回值类型不是标识</li></ul><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">System</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Console</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>和C++与Java一样，C#允许一个类声明两个以上的同名函数，只要参数的类型或个数不同。这就是重载。但是，一个类不能包含标识为相同的实例函数和静态函数，例如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Illegal</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Overload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Overload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token comment">//错误</span>
<span class="token punctuation">}</span>
</code></pre></div><p>和C++与Java一样，返回值的类型不是标识的一部分，不能被用作重载的标准，例如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">AlsoIllegal</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token comment">//错误</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="一周学会c-函数三" tabindex="-1"><a class="header-anchor" href="#一周学会c-函数三" aria-hidden="true">#</a> <a id="csp_6">一周学会C#（函数三）</a></h2><h3 id="_8-ref-out重载" tabindex="-1"><a class="header-anchor" href="#_8-ref-out重载" aria-hidden="true">#</a> 8.<code>ref/out</code>重载</h3><p><code>ref/out</code> 在大部分情况下是标识的一部分!</p><ul><li>你可以重载一个<code>ref</code>型参数和一个普通参数</li><li>你可以重载一个<code>out</code>型参数和一个普通参数</li><li>你不可以重载一个<code>ref</code>型参数和一个<code>out</code>型参数</li></ul><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Overloading</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Allowed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> parameter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Allowed</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> parameter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token comment">//正确，重载一个ref型参数和一个普通参数</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AlsoAllowed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> parameter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AlsoAllowed</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> parameter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

    <span class="token comment">//正确，重载一个out型参数和一个普通参数</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotAllowed</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> parameter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotAllowed</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> parameter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token comment">//错误，不能重载一个ref型参数和一个out型参数</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>ref</code>和<code>out</code>修饰符可以是一个函数的标识。但是你不能同时重载<code>ref</code>和<code>out</code>型参数。<code>ref</code>和<code>out</code>修饰符在某种意义上是“安全的“，因为只有<code>ref</code>型实参才能传递给<code>ref</code>型函数参数，只有<code>out</code>型实参才能传递给<code>out</code>型函数参数。但是，当调用函数的时候，你会非常容易忘记<code>ref</code>和<code>out</code>修饰符，所以最好不要重载<code>ref</code>和<code>out</code>型参数。例如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Overloading</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> parameter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> parameter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> argument <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
        <span class="token function">Example</span><span class="token punctuation">(</span>argument<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在这儿非常容易忘记ref修饰符</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_9-访问规则" tabindex="-1"><a class="header-anchor" href="#_9-访问规则" aria-hidden="true">#</a> 9.访问规则</h3><p>函数参数或返回值不能比所属函数的访问级别低</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>  <span class="token comment">//类的默认访问级别是internal</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Bad</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span>    <span class="token comment">//错误，函数的访问级别（public）比参数高</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token function">Return</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">//错误，函数的访问级别（public）比返回值高</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Good</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span>   <span class="token comment">//正确，函数的访问级别（private）比参数低</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name">T</span> <span class="token function">Return</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">//正确，函数的访问级别（private）比返回值低</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_10-找错误" tabindex="-1"><a class="header-anchor" href="#_10-找错误" aria-hidden="true">#</a> 10.找错误</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Buggy</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Defaulted</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> d <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span>             <span class="token number">1</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReadOnly</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">ref</span> <span class="token class-name">Wibble</span> w<span class="token punctuation">)</span>          <span class="token number">2</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">ref</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">ReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token number">3</span>
    <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> fieldModifier<span class="token punctuation">;</span>                     <span class="token number">4</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>第1个函数的错误是：C#中函数不能拥有缺省参数。</li><li>第2个函数的错误是：<code>ref</code>型参数不能用<code>const</code>修饰，因为<code>ref</code>型参数是可能变化的。</li><li>第3,4个函数的错误是：<code>ref</code>和<code>out</code>型参数只能用于函数参数和实参。</li></ul><p>C#中可以通过函数重载的办法实现缺省参数的功能，以下是实现的方法：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Overload</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DefaultArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">DefaultArgument</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DefaultArgument</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,144),o=[e];function c(l,k){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","cspcls5.html.vue"]]);export{r as default};
