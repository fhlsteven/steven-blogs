import{_ as n,o as s,c as a,a as t}from"./app-477de5b2.js";const p={},o=t(`<h1 id="c-实现网段扫描" tabindex="-1"><a class="header-anchor" href="#c-实现网段扫描" aria-hidden="true">#</a> C#实现网段扫描</h1><h2 id="摘要" tabindex="-1"><a class="header-anchor" href="#摘要" aria-hidden="true">#</a> 摘要</h2><p>想必大家对小榕时光等扫描器都非常熟悉了，有没有自己写一个的冲动。最近微软推实施了.NET战略方案，C#是主推语言，你们是否有兴趣用C#来实现对局域网IP地址的扫描，尝试一下自己写的快乐，那么请跟我来。</p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>1.使用的类
2.获取本地主机IP地址
3.远程查询
4.实现网段的扫描
</code></pre></div><h2 id="正文" tabindex="-1"><a class="header-anchor" href="#正文" aria-hidden="true">#</a> 正文</h2><h3 id="_1-先介绍一下使用的类" tabindex="-1"><a class="header-anchor" href="#_1-先介绍一下使用的类" aria-hidden="true">#</a> 1.先介绍一下使用的类</h3><ul><li>DNS类：在.net中的System.net命名空间下，主要的功能是从 Internet 域名系统 (DNS) 检索关于特定主机的信息。</li><li>IPHostEntry类：将一个域名系统 (DNS) 主机与一组别名和一组匹配的 IP 地址关联，和DNS类一起使用。</li><li>IPAddress 类：IP 网络上的地址。</li></ul><p>使用的命名空间有：</p><ul><li>System.Net 命名空间为当前网络上使用的多种协议提供了简单的编程接口.</li><li>System.IO命名空间包含允许在数据流和文件上进行同步和异步读取及写入的类型。</li><li>System.Thread 命名空间主要是用来多线程序编程。</li></ul><p>程序实现以下几个功能：</p><h3 id="_2-获取本地主机ip地址" tabindex="-1"><a class="header-anchor" href="#_2-获取本地主机ip地址" aria-hidden="true">#</a> 2.获取本地主机IP地址</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//对Button控件的事件的响应</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">buttion1_click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span><span class="token class-name">System<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>Args</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">IPHostEntry</span> myHost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPHostEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Dns.GetHostName()获取本地计算机的主机名</span>
        <span class="token comment">// Dns.GetHostByName()获取指定 DNS 主机名的 DNS 信息</span>
        <span class="token comment">//得到本地主机的DNS信息</span>
        myHost <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">GetHostByName</span><span class="token punctuation">(</span>Dns<span class="token punctuation">.</span><span class="token function">GetHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//显示本地主机名</span>
        textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> myHost<span class="token punctuation">.</span>HostName<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//显示本地主机的IP地址表</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>myHost<span class="token punctuation">.</span>AddressList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            richTextBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;本地主机IP地址-&gt;&quot;</span><span class="token operator">+</span>myHost<span class="token punctuation">.</span>AddressList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> error<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token comment">//private</span>
</code></pre></div><h3 id="_3-远程查询" tabindex="-1"><a class="header-anchor" href="#_3-远程查询" aria-hidden="true">#</a> 3.远程查询</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">buttion2_click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> Sender<span class="token punctuation">,</span><span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">IPHostEntry</span> myDnsToIP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPHostEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Dns.Resolve 方法: 将 DNS 主机名或以点分隔的四部分表示法格式的 //  IP 地址解析为 IPHostEntry实例</span>
    myDnsToIP <span class="token operator">=</span>Dns<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>textBox2<span class="token punctuation">.</span>Text<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//显示此域名的IP地址的列表</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>myDnsToIPAddressList<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rich<span class="token punctuation">.</span>TextBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>textBox2<span class="token punctuation">.</span>Text<span class="token operator">+</span><span class="token string">&quot;的IP地址是&quot;</span><span class="token operator">+</span>myDnsToIP<span class="token punctuation">.</span>AddressList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_4-实现网段的扫描" tabindex="-1"><a class="header-anchor" href="#_4-实现网段的扫描" aria-hidden="true">#</a> 4.实现网段的扫描</h3><p>实现网段的扫描，确定网络中正在使用的主机数目。这里使用了多线程技术，增加了一个线程，为了防止程序扫描的时间过长，影响程序的响应。不过在.net中由于使用了垃圾收集技术所以对线程的控制也不是很复杂的。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button3_click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//Thread 类: 创建并控制线程</span>
    <span class="token class-name">Thread</span> thScan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStrart</span><span class="token punctuation">(</span>ScanTarget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Thread.Start 方法:启动线程</span>
    thScan<span class="token punctuation">.</span><span class="token function">Strart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ScanTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//构造IP地址的31-8BIT 位，也就是固定的IP地址的前段</span>
    <span class="token comment">// numericUpDown1是定义的System.Windows.Forms.NumericUpDown控件</span>
    <span class="token class-name"><span class="token keyword">string</span></span> strIPAddress <span class="token operator">=</span> numericUpDown1<span class="token punctuation">.</span>Text<span class="token operator">+</span><span class="token string">&quot;.&quot;</span><span class="token operator">+</span>numericUpDown2<span class="token punctuation">.</span>Text<span class="token operator">+</span><span class="token string">&quot;.&quot;</span><span class="token operator">+</span>numericUpDown3<span class="token punctuation">.</span>Text<span class="token operator">+</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//开始扫描地址</span>
    <span class="token class-name"><span class="token keyword">int</span></span> nStrat <span class="token operator">=</span> Int32<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>numericUpDown4<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//终止扫描地址</span>
    <span class="token class-name"><span class="token keyword">int</span></span> nEnd <span class="token operator">=</span> Int32<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>numericUpDown5<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//扫描的操作</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> nStrat<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> strScanIPAdd <span class="token operator">=</span> strIPAddress <span class="token operator">+</span>i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//转换成IP地址</span>
        <span class="token class-name">IPAddress</span> myScanIP <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>strScanIPAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//你可以加入自已的,增强功能</span>
            <span class="token comment">// Dns.GetHostByAddress 方法: 根据 IP 地</span>
            <span class="token comment">//址获取 DNS 主机信息。</span>
            <span class="token class-name">IPHostEntry</span> myScanHost <span class="token operator">=</span> 
                Dns<span class="token punctuation">.</span><span class="token function">GetHostByAddress</span><span class="token punctuation">(</span>myScanIP<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//获取主机的名</span>
            <span class="token class-name"><span class="token keyword">string</span></span> strHostName <span class="token operator">=</span> myScanHost<span class="token punctuation">.</span>HostName<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            richTextBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>strScanIPAdd<span class="token operator">+</span><span class="token string">&quot;-&gt;&quot;</span><span class="token operator">+</span>strHostName<span class="token operator">+</span><span class="token string">&quot;\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> error<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token comment">//for</span>
<span class="token punctuation">}</span><span class="token comment">//private</span>
</code></pre></div><p>到此为止一个简单用C#实现扫描器的主要功能就完成了，试一下你可以看到你的网络上的主机，有没有成就感了：），</p><hr><p>作者：落叶夏日</p>`,21),e=[o];function c(u,l){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","netcode20.html.vue"]]);export{i as default};
