import{_ as h,r as d,o as t,c as n,b as e,d as a,e as p,a as i}from"./app-a2b6e588.js";const o={},c={id:"人月神话-微软开发模式和原则-转",tabindex:"-1"},s=e("a",{class:"header-anchor",href:"#人月神话-微软开发模式和原则-转","aria-hidden":"true"},"#",-1),u={href:"http://www.cnblogs.com/SoulStore/archive/2007/08/06/845010.html",target:"_blank",rel:"noopener noreferrer"},l=i('<h2 id="原则一-将大项目分成若干里程碑式的重要阶段-各阶段之间有缓冲时间-但不进行单独的产品维护" tabindex="-1"><a class="header-anchor" href="#原则一-将大项目分成若干里程碑式的重要阶段-各阶段之间有缓冲时间-但不进行单独的产品维护" aria-hidden="true">#</a> 原则一：将大项目分成若干里程碑式的重要阶段，各阶段之间有缓冲时间，但不进行单独的产品维护</h2><p>微软通常采用“同步－稳定产品开发法”。典型项目的生命周期包括三个阶段：</p><p>计划阶段：完成功能的说明和进度表的最后制定<br> 开发阶段：写出完整的的源代码<br> 稳定化阶段：完成产品，使之能够批量生产（Roll Out）</p><p>这三个大阶段以及阶段间内在的循环方法与传统的“瀑布”（Water Fall）式开发方式很不相同，后者是由需求、详尽设计、模块化的代码设计与测试、集成测试以及系统测试组成的。<strong>而微软的三个阶段更像是风险驱动的、渐进的“螺旋”式的生命周期模型</strong>。</p><p>在开发和稳定化阶段的所有时间中，一个项目通常会将2/3的时间用于开发，1/3的时间用于稳定化。这种里程碑式的工作过程使微软经理们可以清楚地了解产品开发过程进行到了哪一步，也使他们在开发阶段的后期有能力灵活地删去一些产品特性以满足进度要求。</p><h3 id="计划阶段" tabindex="-1"><a class="header-anchor" href="#计划阶段" aria-hidden="true">#</a> 计划阶段</h3><p>这里我总结了一下，主要是做以下事情</p><p>1.把你准备做什么样一个产品搞清楚，这个产品有什么特性<br> 2.这个产品有没有市场，用户为何需要这个产品，已经该产品的走势<br> 3.这个产品大概是个什么样子，是否有个大概的原型展示方便高层决策<br> 4.设计的功能，目标，优先级，大概的进度。</p><p>所以微软指的这个计划阶段保护了很多可行性研究和产品规划的内容在里面，更多的是一个产品规划的内容。</p><h3 id="开发阶段" tabindex="-1"><a class="header-anchor" href="#开发阶段" aria-hidden="true">#</a> 开发阶段</h3><p>开发阶段的计划对三四个主要的里程碑版本都逐个分配一组特性，规定出特性的细节和技术上的相关性，记录下单个开发员的任务以及对进度的估计。在开发阶段中，开发员在功能性说明的指导下写源代码，测试员写出测试项目组以检查产品的特性与工作范围是否正常，用户教育人员（User Education）则编写出文档草案。(<strong>参考微软的MSF模型</strong>)</p><p>当测试员发现错误时，开发员并不是留待以后处理，而是马上改正，并在整个开发阶段内使测试不断地、自动地进行。这就改善了产品的稳定性并且使版本发布日期更易估计。当达到项目中的一定阶段点后（40%时），开发员就试图“锁定”产品的主要功能要求或特性，从此只允许小范围的改动。如果在此点之后开发员想作大的改动，他们必须与程序经理以及开发经理进行讨论协商，也许还要征求产品部门经理的意见。(这里有两点，一个是提倡及早的发现缺陷和持续的集成，一个是后期严格的对需求变更进行控制)</p><p>一个项目是围绕着3或4个主要的内部版本，或“里程碑子项目”来组织开发阶段的。一般用2至4个月来开发每一个主要的里程碑版本。每个版本都包括其自身的编码、优化、测试以及调试活动。项目为意外事故保留总开发1/3的时间，即“缓冲时间”（Padding Time）。 (应该所1/3时间是足够多的，一般研发项目很难预备这么足够的Buffer)</p><p>当对最后一个主要的里程碑版本做了测试与稳定化之后，产品就要进行“外观固定”（UI Freeze），即确定产品的主要用户界面，如菜单、对话框以及文件窗口等。此后有关用户界面将不再进行大的改动，以免引进同步修改相应文档的困难。</p><h3 id="稳定化阶段" tabindex="-1"><a class="header-anchor" href="#稳定化阶段" aria-hidden="true">#</a> 稳定化阶段</h3><p>稳定化阶段着重于对产品的测试与调试。项目在此阶段尽量不再增加新的功能，除非是竞争产品或者市场发生了变化。稳定化阶段也包括了缓冲时间，以应付不可预见的问题或者延迟。在软件的开发流程中，软件的测试与开发是一种“矛与盾”的关系，互为补充，缺一不可。在微软，可能这种关系发挥到了极至：有时开发部门与测试部门互相较着劲，开发经理和测试经理的地位是相同的，有时甚至测试经理的地位甚至凌驾于开发经理之上，但他们之间没有根本的利益冲突，只有一个共同的目标：将产品的质量提高。</p><p>在微软内部有专门的SLM源代码管理工具，负责管理源代码和自动构建。开发人员每天在下班前将自己的代码Check In,SLM由预先定义好的脚本进行自动编译。第二天测试人员再下载前一天的Build进行测试。将测试的情况及时的反映到另外一个工具软件中,可以根据这个工具查询哪个开发员当天的BUG活动的、解决的数量，哪个测试员的BUG质量数目等等一些基本的产品质量情况，这样项目经理可以很容易的掌握该项目的具体进展情况。还有项目经理可以根据这个工具，及时的掌握、了解每个测试员和开发员的工作状态，这一点也很重要。(微软的源代码管理和每日构造和持续集成机制是很值得推广的地方)</p><p>微软也许正是靠着“程序员的聪明和测试员的勤奋”构建起软件帝国的大厦、谱写着软件事业的辉煌。</p><h2 id="原则二-运用想象性描述和对特性的概要说明指导项目" tabindex="-1"><a class="header-anchor" href="#原则二-运用想象性描述和对特性的概要说明指导项目" aria-hidden="true">#</a> 原则二：运用想象性描述和对特性的概要说明指导项目</h2><p>为了给出足够的开发框架以使工作能持续进行，并且能容纳开发过程中出现的变化并保持足够的灵活性，微软采用想象性描述和概要的说明来指导项目开发，而不是在一开始就努力写出一份完整和详细的说明。所谓想象性描述是由程序经理和来自市场营销组的产品计划人员共同编写的一份非常短的文件，在其中主要是定义产品开发的目标（不涉及产品的具体细节！）。通常对一个全新的产品，想象性描述一般会相对较详细，在其中还含有一份粗略的说明文件。总的来说，微软对于想象性描述的要求是：</p><p>越短越好，尽量说明&quot;产品不做什么&quot;(而不是&quot;产品要做什么&quot;！)。</p><p>运用想象性描述，程序经理开始编写功能说明文件，该文件解释产品的特性是什么以及这些特性如何与其他特性及产品发生关系。最初它只是一个概要性的说明文件，随着项目的进展，程序经理会随时向其中添加更多的细节，最终的说明文件将变得象用户手册一样。完整的说明不只起着对产品最新功能的描述作用，而且它还是在产品投产与发货之前进行测试与评估的主要依据。</p><p>想象性描述有助于决定删除哪些特性。</p><p>微软内的各个开发组采用想象性描述帮助细化产品版本的规定主题，然后以此主题来决定是否需要增加产品各个可能的特性。通常不要轻易改变所确定的主题，否则可能造成产品开发上的混乱。</p><h3 id="编写说明文件" tabindex="-1"><a class="header-anchor" href="#编写说明文件" aria-hidden="true">#</a> 编写说明文件</h3><p>说明文件在产品小组的所有成员之间，产品小组之间以及产品小组与管理部门之间起着传递产品的设想与要求的作用。在说明文件中必须清楚地描述产品特性（描述每个特性如何工作，外观如何以及从用户的角度出发如何与用户交互。如果特性有一个界面，还应包括一张示意图，以显示出界面的效果），并赋于其相应的优先级。程序经理据此建立起项目的开发进度表。此外在其中还应包括以下各项内容：用一句话表示的项目开发目的，关于产品是什么与不是什么的清单，对顾客的定义，对竞争产品的定义，产品对系统的要求（包括操作系统版本、最小内存要求、硬盘空间、处理器速度以及显示器分辩率），对第三方（如打印机驱动程序、组件）的任何依赖性。程序经理负责协调并&quot;写下&quot;说明</p><p>程序经理（Program Manager）应考虑以下问题：</p><p>这项特性的要点是什么？<br> 用户如何使用该特性？<br> 这项特性有意义吗？<br> 该产品中或微软的其他产品中有类似的特性吗？<br> 有哪些问题被遗漏了？<br> 组内的交流令人满意吗？<br> 最终程序经理通过与组内开发人员的共同讨论决定有关特性的内容，并将其写下来。</p><h3 id="构造原型" tabindex="-1"><a class="header-anchor" href="#构造原型" aria-hidden="true">#</a> 构造原型</h3><p>构造原型是程序经理具体说明一件新产品或一个新版本的最好方法，这从许多方面来说都使开发前测试成为可能，尤其在可用性方面，并且有助于对与用户交互情况作出好的理解，它也能使产品说明更紧凑。</p><p>微软的开发人员通常采用VB构造用户界面原型，但是对于构造计算机屏幕模型之类的工作，画笔（Paint brush）也是一个很好用的工具。死板的说明变成有生命的文件，说明不应过于详细以至限制了发明创造。在项目开发过程中，说明文件的早期版本会有相当大的增加与改变。由于说明的变动可能会导致相应开发工作的极大变动，所以微软通常是将精力首先集中于那些没有什么用户界面的特性上，因为在完成开发前不必去了解用户对它们有何反应，也就是说这些特性不大可能改变。然后再面对其它特性。但是当产品开发到一定程序后，例如40%之后，程序经理必须严格控制对特性的修改（主要是指增加新的特性），否则不光会造成开发延迟，而且会压缩可用的测试时间。</p><p>(做一个新产品的时候，刚开始是根本无法想清楚很多细节特征的。确实可能只有一个框架性的概念。所以微软应该也是很强调迭代开发和逐步细化，强调通过原型进一步细化设计.所有这也是原型为何在挖掘用户深处需求的时候有重要作用的原因，用户刚开始可能也不清楚要哪些细节性的功能，当用户看到原型后才能够提出深层次的一些需求来)</p><h2 id="原则三-根据用户行为和有关用户的资料确定产品特牲及其优先顺序" tabindex="-1"><a class="header-anchor" href="#原则三-根据用户行为和有关用户的资料确定产品特牲及其优先顺序" aria-hidden="true">#</a> 原则三：根据用户行为和有关用户的资料确定产品特牲及其优先顺序</h2><p>对于一个开发项目而言，如何确定最终产品中应包含什么特性通常是比较困难的一件事。为此微软采用了一个称之为“基于行为制定计划”的方式来进行特性选择与优先级安排。</p><p>基于行为制定计划法从对用户行为，诸如写信或做预算，做系统研究开始。然后，根据某一特性在支持重要的或者是经常的用户行为上的程序对其进行评价。这样做的优点是对特性取舍更具理性：讨论对顾客想要做什么加以更好的安排，对某个给定特性是否方便了特定任务的更集中的辩论，可读性更强的说明，以及在市场营销、用户教育和产品开发中更好地同步。</p><h3 id="特性选择和优先级安排中的基于行为制定计划" tabindex="-1"><a class="header-anchor" href="#特性选择和优先级安排中的基于行为制定计划" aria-hidden="true">#</a> 特性选择和优先级安排中的基于行为制定计划</h3><p>基于行为制定计划法中的关键点在于按用户行为、产品特性以及行为和特性之间的内部联系来分析产品。程序经理和产品计划者把产品试图支持的用户任务或方案分成大约20个“行为”，然后他们努力把行为（以及任何子行为）映射入微软的现行特性和竞争对手产品的特性中去。他们也把行为映射到不同的顾客形象或不同的市场部分中去。</p><p>当说明产品的新版本时，基于行为制定计划法帮助程序经理和开发员集中他们的精力与创造力。象Excel之类的项目，争取在每个新版本中加入的主要行为不超过四个。绝大多数特性直接映射入这些行为之中。该做法使项目可以按特性对用户的价值来进行分级。通过分级，促使程序经理和开发人员都行动起来，使他们的特性支持尽可能多的行为。这种良性竞争对于用户有益，同时也利于提高生产率。</p><p>(这个原则充分的体现了微软产品完全由用户驱动，软件创造客户价值)</p><p>由于基于行为制定计划法是从整个产品的观点着眼，因此有助于在不同职能上工作的项目成员理解产品做什么，以及其他产品的相应特性如何可能支持那些需要或不需要其他应用软件产品的行为。</p><h2 id="原则四-建立模块化的和水平式的设计结构-并使项目结构反映产品结构的特点" tabindex="-1"><a class="header-anchor" href="#原则四-建立模块化的和水平式的设计结构-并使项目结构反映产品结构的特点" aria-hidden="true">#</a> 原则四：建立模块化的和水平式的设计结构，并使项目结构反映产品结构的特点</h2><p>微软产品设计中的一个关键概念是产品的基础结构（Infrastructure），尤其是生命周期短的应用软件，应随项目的进展变得更加单一（而不是错综复杂）。当开发组构造产品的第一版时，他们更多地使用分级式结构，好为产品设计规定出一个最初的架构。随着时间推移，他们向单一的结构迈进，以使项目能集中于特性开发。微软越来越强调不同产品间的特性共享。共享有助于使不同产品的“性能与感觉”（Look and Feel）都统一协调起来；它也方便了需要不只一个应用软件的用户，减少了代码的重复书写，缩小了单独一个应用软件的规模。</p><p>微软用特性小组组织产品开发，这种方法使得每个人都容易明白小组是如何与整个产品相关联的。项目从规定概要说明开始。概要说明的形式是一份已确定了优先级安排的内容清单，涉及产品下一版本将要开发的相对独立的特性，以便由分开的特性小组加以开发。</p><p>程序经理和开发员把项目分成特性子集，再将之分配给每个特性小组，让他们在3到4个主要的内部项目里程碑中进行生产。这种产品组织与开发方法使微软能靠简单地增加开发员和创建一个大的小组来渐进地增加产品的功能。</p><h3 id="把特性-与函数-作为开发单位" tabindex="-1"><a class="header-anchor" href="#把特性-与函数-作为开发单位" aria-hidden="true">#</a> 把特性(与函数)作为开发单位</h3><p>微软软件产品的特性是用户最终可见的相对独立的功能单位，就如建筑材料一般，对应用软件产品更是如此。系统软件产品，如NT或者95的特性，对最终用户通常不直接可见。微软和其他公司有时简单地称这些不直接可见的特性为“函数”。</p><p>程序经理承担开发一组特性或函数，实现从说明经测试、文档化直到最后完成的过程。他们必须与开发员合作，后者负责估计进度表与完善每个特性。开发员还要在一台联网开发计算机上存储一到几个文件，用以保存特性的程序源代码。大多数特性的开发与改进只要一名开发员，而有的大型特性则要一个小的小组。</p><p>(感觉有点类似于特征驱动的开发，要做好每日构建功能点的拆分一定要足够细)</p><h3 id="产品结构是决定其长期结构完整性的基石" tabindex="-1"><a class="header-anchor" href="#产品结构是决定其长期结构完整性的基石" aria-hidden="true">#</a> 产品结构是决定其长期结构完整性的基石</h3><p>产品结构是产品内部的基干，它规定了重要的结构构件以及这些构件如何组装到一起。产品结构及用于组装结构的构件，提供了实现产品特性（即做详细设计与编码）的支柱。产品的结构对最终用户而言，通常并非直接可见。只有结构要实现的特性是可见的。产品结构也是决定产品长期结构完整性的基石。产品功能的任何改变都不应造成潜在的产品结构散架。</p><h3 id="产品的层次结构" tabindex="-1"><a class="header-anchor" href="#产品的层次结构" aria-hidden="true">#</a> 产品的层次结构</h3><p>对于产品，也可以采用层次结构的方法加以分析。通常定义良好的层次结构有助于对产品特性进行灵活的增加、删除与改进。此外良好的层次结构有助于产品在不同平台上的移植。（例如Excel总共定义了五层，其中只有最底层的操作系统层是与平台相关的，其它各层均是通过调用其下层所提供的API接口加以实现的，所以其移植极其方便。而在Windows 95中通过“虚拟机”的概念实现了对16位、32位以及DOS程序的支持。）</p><h3 id="小的结构文档-源代码是唯一文件" tabindex="-1"><a class="header-anchor" href="#小的结构文档-源代码是唯一文件" aria-hidden="true">#</a> 小的结构文档：源代码是唯一文件</h3><p>除了API文档，微软不对其产品结构生成相应的文档，虽然有时高级开发员可能会写下高层结构。对复杂的特性，许多开发员在某些点记录并复查特定于他们所负责的结构细节，但此工作是可选的，并不强制执行。除了源代码文件与特性说明，为数不多的组为新程序员准务了描绘某层结构的文档（主要的数据结构，如何工作等等）。但是这些文件并不时常更新，经理们也不要求项目组生成此类内部文档。在有关的说明文件中，并不涉及实现问题。开发员应该知道如何去实现，或者能够去学会。记录的关于结构的文档如此之少是因为“一个开发员的工作是编写我们要卖的代码，而不是花时间写高水平的设计文件”，“设计文件不应与源代码分离”。分割代码与“保持事情的简单”。(源代码就是设计)</p><h3 id="特性小组和作为-内容专家-的小组领导" tabindex="-1"><a class="header-anchor" href="#特性小组和作为-内容专家-的小组领导" aria-hidden="true">#</a> 特性小组和作为&quot;内容专家&quot;的小组领导</h3><p>特性小组一般由一个领导和3至8名开发人员组成，工作于相关的特性领域。小组的规模常常视小组领导的经验和能力而定。特性小组领导向项目开发领导汇报并负责项目的全部开发工作；而项目开发领导则拥有对产品的更为全局性的观点，从而最有可能发现不互相关联的问题。在特性小组中的每个人均是此领域的“专家”，他们了解如何使用产品、了解竞争对手的产品、了解未来将向何处去。通常为便于交流，提高软件的组织结构（软件倾向于映射出构造它的组织的结构），应保持特性小组的小规模。(不在于小组的人数，而在于小组成员的整体技能不能差别太大)</p><h2 id="原则五-靠个人负责和固定项目资源实旋控制" tabindex="-1"><a class="header-anchor" href="#原则五-靠个人负责和固定项目资源实旋控制" aria-hidden="true">#</a> 原则五：靠个人负责和固定项目资源实旋控制</h2><p>对于软件项目而言，精确估计产品的开发与交付进度是很困难的。对此微软采取的方法是将进度安排和工作管理的责任推到最底层，即单个的开发人员和测试人员那儿去。这保证了每个人除了作为小组的一部分外，还负有个人的责任。单独的开发人员设立他们自已的进度表，程序经理把单独的进度表汇总起来，再加上缓冲时间，以制定出一个全面的项目进度表。顶层的总经理也固定人员与时间等基本资源，以确保项目集中并限制其努力与创造程序。</p><p>关键的目标，尤其对应用软件，是指明产品的目标出品日并争取尽可能长久地坚持它。程序经理和开发员从出品日回溯，规定中间的项目里程碑的日期。这个“固定的出品日法“的中心在开发员身上。以避免因为项目没有固定的结束点，导致在最终无用的设计、再设计和测试的循环中消耗一年或更多的时间。</p><h3 id="开发人员做出他们自已的进度估计" tabindex="-1"><a class="header-anchor" href="#开发人员做出他们自已的进度估计" aria-hidden="true">#</a> 开发人员做出他们自已的进度估计</h3><p>“日期设定方法&quot;。但是开发人员一般会做出较乐观的估计，因此开发经理还需对他们所提供的日期进行调整并加上缓冲时间以避免因因信息不完全而出现的问题。微软这种制定进度的方法的优点在于：它从人们那儿得到更多的合作，因为日期是自已定的，不是经理定的；进度总是富有进取性，因为开发人员不可避免地会低估他们真正需要的时间。</p><h3 id="对细致的任务的进度估计" tabindex="-1"><a class="header-anchor" href="#对细致的任务的进度估计" aria-hidden="true">#</a> 对细致的任务的进度估计</h3><p>微软的第二个进度安排方法是：对要完成的任务做非常详尽的考虑，在此基础上请开发人员给出他们对“实现”的估计，以此力图“促使”更加现实主义并避免过度低估。</p><p>通常微软把任务细化到4小时（半天）到3天之间。对于准确进度的安排，微软的经理是这样认识的：“任何任务只要超过一星期，那人们就一定没有充分地全盘考虑它。任何任务某人估计只用少于半天就可完成，则他对它考虑得太多了。他应该用更多的时间去编程，更少的时间来考虑”。对于类似类于Windows NT之类的操作系统而言，进度安排更加困难，对其一般以几天或者半周为工作单位进行进度估计。</p><h3 id="安排开发人员与小组进度时的心理学" tabindex="-1"><a class="header-anchor" href="#安排开发人员与小组进度时的心理学" aria-hidden="true">#</a> 安排开发人员与小组进度时的心理学</h3><p>当项目变大时，微软把员工分成小组。然后经理把进度的责任和所有权尽可能地分发下去，直到小组和个人；这使二者都产生了一种拥用工作的感觉。它还在小组中，个人中，尤其是小组领导中造成强烈的跟上其它同事预计进度的压力，因为经理可能再平衡进度，从落后的小组或个人手中拿走工作。这样，同事间的压力使经理不需要太多的努力就可以对个人或单个小组的进程实施严格控制。(厉害)</p><h3 id="固定的-出品日-rtm-release-to-manufacture" tabindex="-1"><a class="header-anchor" href="#固定的-出品日-rtm-release-to-manufacture" aria-hidden="true">#</a> &quot;固定的&quot;出品日(　RTM: Release To Manufacture)</h3><p>为了把创造力约束在时间限制之中，微软现在在新产品或者产品新版本开始前争取固定出品日，至少是有出品日的内部目标。这给人们施加砍去特性和集中在一个项目上的压力，逼迫他们去苦苦思考应将哪个新特性加入产品中。虽然最终产品的交付目标可能是由高级执行人员设定，但是开发人员与小组仍然设定他们自已的进度表。</p><p>微软一般根据预先的时间进度的大致估计出一个RTM日期，然后向前回溯相应的各个Milestone日期，如RC、Beta、Tree Lock、UI Freeze、Feature Complete以及CC（Code Complete）等等各个Milestone的相应日期。制定出十分详尽的产品研究开发时间进度表，产品开发组的各个成员以这个进度表为目标统一协调工作。</p><p>微软十分强调软件开发过程中的Teamwork Spirits，这种理念贯穿在微软各个产品开发的各个阶段。这也是微软得以成功的一个十分重要的原因。</p><p>本文来源：<code>http://blog.sina.com.cn/u/493a8455010004v3</code></p>',71);function f(b,x){const r=d("ExternalLinkIcon");return t(),n("div",null,[e("h1",c,[s,a(),e("a",u,[a("人月神话：微软开发模式和原则[转]"),p(r)])]),l])}const m=h(o,[["render",f],["__file","devfuc5.html.vue"]]);export{m as default};
