import{_ as a,o as n,c as s,a as p}from"./app-a2b6e588.js";const t={},e=p(`<h1 id="c-和java的对比" tabindex="-1"><a class="header-anchor" href="#c-和java的对比" aria-hidden="true">#</a> C#和Java的对比</h1><blockquote><p>源作者：追风 人气：4560</p></blockquote><p>自从互联网出现以来,Java就成了许多开发者的首选.而许多C++开发者在较短的时间内转移到了Java开发者的队伍中来. Java成功的开发和实现了许多高质量的多线程动画, 游戏, 以及分布的应用程序. 更重要的是,Java 语言是完全平台无关的.</p><p>被称作Apllets(小应用程序)的Java程序在被下载到本地以前必须首先通过安全认证,这样就避免了任何病毒钻入用户的计算机的企图. 许多新的改进,诸如旋摆软件包(swing package), Java2D API, 连网软件包(java .net)在最初的Java开发包发布以后被加进了这种语言里. 从Sun公司发布Java以来,它的许多竞争对手开发了这种热门语言的替代品,一些公司甚至在两年以前就开始了.</p><p>现在一家无需更多介绍的公司--微软已经发布了一种新的叫做微软.NET的技术. .NET家族的一种主要的语言是C#或者说C-sharp. 这种语言是从Java/C++继承而来的. 从我的对C#的六个月的技术上的经验来说,我觉得C#或多或少与Java是相似的.但是C++的许多功能,比方说操作符重载(它在Java中已经被移去了)还存在于C#中.</p><p>Java程序能够在安装了Java虚拟机或者JVM的任何平台上运行.但是.NET程序的平台要求安装了通用语言运行库或者称做CLR. 它是所有.NET语言运行所需的运行库.所以一种.NET语言能够调用另一种.NET语言写成的模块和函数. 更进一步的说,如果你学习了种像C#之类的语言,那么你就很容易学习另一种.NET语言因为所有的.NET语言遵循微软所谓的.NET Framework(架构). 这种架构包括了编写和安装健壮的.NET应用程序所必需的类库.使用.NET你可以通过ASP.NET进行服务器端的编程,这点非常像JAVA中的servlets.</p><p>就象Java中的Applets, C#引入了WinForms 和WebForms的概念.使用WinForms你可以设计基于Windows的应用程序而使用WebForms你能够开发Web应用程序. 这点可以要么通过C#编程或者是使用Visual Studio.NET这样的开发环境工具来实现. 它包含了Visual C#,使用Visual C#你可以非常容易的编写C#应用程序.</p><p>在我们使用Visual C++编程的时候,WinForms几乎就是win32程序.用C++来开发这些程序是可能的.但是VC++给我们提供向导来简化我们的开发过程.现在Visual C#也在做同样的工作.因此如果你已经是一个VC++的程序员了,那么你最好试一试VC#.</p><h2 id="java程序和c-程序的比较" tabindex="-1"><a class="header-anchor" href="#java程序和c-程序的比较" aria-hidden="true">#</a> Java程序和C#程序的比较</h2><p>我们应该比较一下用Java写成的程序和C#的有什么不同. 我们将讨论两个程序间主要的不同点.</p><p>Hello Java 程序</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token comment">// 类声明</span>
<span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// main 方法,入口点</span>
 <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向控制台输出Hello Java</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Hello C# 程序</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span> <span class="token comment">// 调用System命名空间</span>

<span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token comment">// 类声明</span>
<span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> Main <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// main 方法, 入口点</span>
 <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">writeLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello C#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向控制台输出 Hello C#</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在Java中, lang软件包是自动引入的.在简单的程序里没有必要引入这个包.但是在C#中,我们不得不在所有的程序里调用System命名空间. 请记住控制台是System命名空间下的一个类. 试着运行一下上面的程序并查看它们的输出结果.</p><h2 id="main方法" tabindex="-1"><a class="header-anchor" href="#main方法" aria-hidden="true">#</a> Main方法</h2><p>Java: 你有可能编写一个没有main方法的Java程序,只要这个类是用来作为父类.但是只有类中包含有正确的Main方法的时候程序才能运行.</p><p>C#: 没有正确的Main方法就不可能编译C#源程序.如果main方法缺失了,那么编译器就会显示一个错误消息:程序&quot;filename.exe&quot;没有定义入口点.</p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><p>Java 和C#都不支持多重继承而且都提供接口的概念作为多重继承的替代品.但是C#在接口中包括了更高级的内容.请在本文末找出题为新增加的特点的内容.</p><h2 id="操作符和控制流语句" tabindex="-1"><a class="header-anchor" href="#操作符和控制流语句" aria-hidden="true">#</a> 操作符和控制流语句</h2><p>Java中出现的所有诸如算术,逻辑,自增和自减等操作符都可以在C#中找到. 而Java中的像if, else, if-else, for, do-while, while等控制流语句C#统统支持. 但是C# 增加了C++中流行的goto语句.</p><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h2><p>在C#中你可以重用try, catch, finally, throws 语句处理运行时错误(通常也叫做异常).C# 中的异常处理过程除了一些小的不同以外几乎与Java完全相同. C#中System.Exception命名空间是所有异常类的基类.</p><h2 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程" aria-hidden="true">#</a> 多线程</h2><p>C#中多线程的应用比起Java来要容易得多.我们可以使用Monitor 和 Mutex类同步线程.</p><h2 id="新增特点" tabindex="-1"><a class="header-anchor" href="#新增特点" aria-hidden="true">#</a> 新增特点</h2><p>索引,属性和代理是C#中的新概念.索引几乎与Java中的向量相同. 对其新特点的完全的讨论已经超出了我们的范围.但是我将尽量在这个网站的其它地方解释它们. C#引入了Java所没有的操作符重载的概念.但是Java和C#都支持方法重载.</p><p>让我们回到对接口的讨论,我们能够验证包括在接口中的方法是否是使用is 和 as 操作符实现的.当我们实现接口的时候能避免命名冲突.你甚至可以将两个接口结合到一个中来,并在类中实现这个复合的接口,如下面的代码所示:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">First</span> <span class="token punctuation">{</span>
<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Second</span> <span class="token punctuation">{</span>
<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Combined</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">First</span><span class="token punctuation">,</span> <span class="token class-name">Second</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Combineimple</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Combined</span></span> <span class="token punctuation">{</span>
<span class="token comment">// 这里是程序代码</span>
<span class="token comment">// main方法</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre></div><p>而且C#在显示编译错误的时候还显示它们的错误代码.你可以搜索与SDK有关的在线文档寻找和这个错误代码有关的内容并找出这个错误发生的原因的细节.</p>`,31),o=[e];function c(l,i){return n(),s("div",null,o)}const k=a(t,[["render",c],["__file","summary1.html.vue"]]);export{k as default};
