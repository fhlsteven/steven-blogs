import{_ as n,o as s,c as a,a as t}from"./app-d9da1b6d.js";const p={},o=t(`<h1 id="动态加载类-在程序中调用dll文件" tabindex="-1"><a class="header-anchor" href="#动态加载类-在程序中调用dll文件" aria-hidden="true">#</a> 动态加载类（在程序中调用DLL文件）</h1><blockquote><p>yistudio（原作） 关键字 动态加载类,在程序中调用DLL文件,dynamicclass</p></blockquote><p>本人刚刚开始编写程序不久，开发中发现一非常好的方法。大家共享。</p><p>我们在编写程序的时候经常会遇到这样的情况：程序中要用到某种计算，而且这种计算的计算方式很多，我们不得不在编写程序时就要考虑的十分全面，将各种情况到考虑到。但是这样做又非常的费力，因为我们无法预测到程序编好后，还会出现什么样的计算方式。如果计算方式是在交付给客户后，客户新提出的我们就不得不将新的计算方式写人程序中，然后重新编译，再交给客户。这样做是相当麻烦的，而且只为了这么一小段程序，就要重新编译整个工程，似乎代价也挺大的。</p><p>使用MS.NET中System.Reflection中的一些方法，可以帮助我们很好的解决上面的问题。</p><p>首先，在遇到上面提出的问题的时候，我们先要进行一下分析，这种计算需要一些什么参数？在不同的计算方式中，它们共同的参数是什么？不同的计算方式中特有的参数是否可以通过共有的参数计算出来，或是通过其它方法获得？分析完后，提取出可用的共同参数。</p><p>接下来，我们就可以编写计算方法了。将这种计算的每一种方式都写成一个DLL一个类中的方法，并将其编译为一个DLL文件。MS.NET中，类的格式要定死，也就是说编写的类的namespace和class要一样，类中的方法名称也必须是一样的。而且，方法的参数就是上面所说的共同参数。</p><p>然后，将编译好的DLL文件放在同一文件夹内，随程序一起发布就可以了。</p><p>在程序中可以这样处理所要用到的不同计算方式：给每一种计算方式起一个名字（客户能够明白的），然后将这些名字放在下拉列表框的text属性中，并将对应的DLL文件名放在下拉列表框的value属性中。这样，用户选择不同的计算方式就可以调用不同DLL文件中的计算方法了。</p><p>下面是一个简单的示例：</p><p>我将计算方式的名字和DLL文件名放在一个xml文件中，程序加载时将它们读取到下拉列表框中。方法如下：（asp.net中）</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 在此处放置用户代码以初始化页面</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>Page<span class="token punctuation">.</span>IsPostBack<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 页面首次加载时读取XML文件</span>
    <span class="token class-name">System<span class="token punctuation">.</span>Xml<span class="token punctuation">.</span>XmlDocument</span> xmlDoc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Xml<span class="token punctuation">.</span>XmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System<span class="token punctuation">.</span>Xml<span class="token punctuation">.</span>XmlNode</span> xmlNd<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">;</span>

    xmlDoc<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>Server<span class="token punctuation">.</span><span class="token function">MapPath</span><span class="token punctuation">(</span><span class="token string">&quot;MyConfig.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xmlNd<span class="token operator">=</span>xmlDoc<span class="token punctuation">.</span><span class="token function">SelectSingleNode</span><span class="token punctuation">(</span><span class="token string">&quot;//dllfile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将读出的XML文件的有关内容写入下拉列表框中</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>xmlNd<span class="token punctuation">.</span><span class="token function">SelectNodes</span><span class="token punctuation">(</span><span class="token string">&quot;field&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">ListItem</span> it<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ListItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        it<span class="token punctuation">.</span>Text<span class="token operator">=</span>xmlNd<span class="token punctuation">.</span><span class="token function">SelectNodes</span><span class="token punctuation">(</span><span class="token string">&quot;field&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Attributes<span class="token punctuation">[</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        it<span class="token punctuation">.</span>Value<span class="token operator">=</span>xmlNd<span class="token punctuation">.</span><span class="token function">SelectNodes</span><span class="token punctuation">(</span><span class="token string">&quot;field&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Attributes<span class="token punctuation">[</span><span class="token string">&quot;filename&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ddlType<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后，在输入完参数之后，可以使用下面的代码来完成计算并将结果显示出来。我写的方法是计算后返回一个DataTable。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DataTable</span> dt<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">// 加载类所在的dll文件</span>
<span class="token class-name">Assembly</span> ass<span class="token operator">=</span>Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span>Server<span class="token punctuation">.</span><span class="token function">MapPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ddlType<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取类型</span>
<span class="token class-name">Type</span> tp<span class="token operator">=</span>ass<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;MyNamespace.MyClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取方法</span>
<span class="token class-name">MethodInfo</span> mi<span class="token operator">=</span>tp<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;MyMethodl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建实例</span>
<span class="token class-name">Object</span> obj<span class="token operator">=</span>System<span class="token punctuation">.</span>Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 付值参数数组(要求类型一致性)</span>
<span class="token class-name">Object<span class="token punctuation">[</span><span class="token punctuation">]</span></span> objArray<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
objArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
objArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
objArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBox3<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用方法</span>
dt<span class="token operator">=</span><span class="token punctuation">(</span>DataTable<span class="token punctuation">)</span>mi<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>objArray<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 有返回值就绑定到DataGrid</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>dt<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>grdResult<span class="token punctuation">.</span>DataSource<span class="token operator">=</span>dt<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>grdResult<span class="token punctuation">.</span><span class="token function">DataBind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>作者：绿荫（yistudio）
E-mail：yistudio@hotmail.com
</code></pre></div>`,15),c=[o];function e(u,l){return s(),a("div",null,c)}const i=n(p,[["render",e],["__file","toolbox23.html.vue"]]);export{i as default};
