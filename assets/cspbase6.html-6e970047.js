import{_ as s,o as n,c as a,d as t}from"./app-e911b801.js";const p={},o=t(`<h1 id="解读c-中的规则表达式" tabindex="-1"><a class="header-anchor" href="#解读c-中的规则表达式" aria-hidden="true">#</a> 解读C＃中的规则表达式</h1><p>（作者：刘彦青编译　2001年02月28日 13:51）</p><p>多少年来，许多的编程语言和工具都包含对规则表达式的支持，.NET基础类库中包含有一个名字空间和一系列可以充分发挥规则表达式威力的类，而且它们也都与未来的Perl 5中的规则表达式兼容。</p><p>此外，regexp类还能够完成一些其他的功能，例如从右至左的结合模式和表达式的编辑等。</p><p>在这篇文章中，我将简要地介绍<code>System.Text.RegularExpression</code>中的类和方法、一些字符串匹配和替换的例子以及组结构的详细情况，最后，还会介绍一些你可能会用到的常见的表达式。</p><h2 id="应该掌握的基础知识" tabindex="-1"><a class="header-anchor" href="#应该掌握的基础知识" aria-hidden="true">#</a> 应该掌握的基础知识</h2><p>规则表达式的知识可能是不少编程人员“常学常忘”的知识之一。在这篇文章中，我们将假定你已经掌握了规则表达式的用法，尤其是Perl 5中表达式的用法。.NET的regexp类是Perl 5中表达式的一个超集，因此，从理论上说它将作为一个很好的起点。我们还假设你具有了C#的语法和.NET架构的基本知识。</p><p>如果你没有规则表达式方面的知识，我建议你从Perl 5的语法着手开始学习。在规则表达式方面的权威书籍是由杰弗里·弗雷德尔编写的《掌握表达式》一书，对于希望深刻理解表达式的读者，我们强烈建议阅读这本书。</p><h2 id="regularexpression组合体" tabindex="-1"><a class="header-anchor" href="#regularexpression组合体" aria-hidden="true">#</a> RegularExpression组合体</h2><p>regexp规则类包含在<code>System.Text.RegularExpressions.dll</code>文件中，在对应用软件进行编译时你必须引用这个文件，例如，csc r:System.Text.RegularExpressions.dll foo.cs命令将创建foo.exe文件，它就引用了System.Text.RegularExpressions文件。</p><h2 id="名字空间简介" tabindex="-1"><a class="header-anchor" href="#名字空间简介" aria-hidden="true">#</a> 名字空间简介</h2><p>在名字空间中仅仅包含着6个类和一个定义，它们是：</p><ul><li><code>Capture</code>: 包含一次匹配的结果；</li><li><code>CaptureCollection</code>: Capture的序列；</li><li><code>Group</code>: 一次组记录的结果，由Capture继承而来；</li><li><code>Match</code>: 一次表达式的匹配结果，由Group继承而来；</li><li><code>MatchCollection</code>: Match的一个序列；</li><li><code>MatchEvaluator</code>: 执行替换操作时使用的代理；</li><li><code>Regex</code>：编译后的表达式的实例</li></ul><p><code>Regex</code>类中还包含一些静态的方法：</p><ul><li><code>Escape</code>: 对字符串中的regex中的转义符进行转义；</li><li><code>IsMatch</code>: 如果表达式在字符串中匹配，该方法返回一个布尔值；</li><li><code>Match</code>: 返回Match的实例；</li><li><code>Matches</code>: 返回一系列的Match的方法；</li><li><code>Replace</code>: 用替换字符串替换匹配的表达式；</li><li><code>Split</code>: 返回一系列由表达式决定的字符串；</li><li><code>Unescape</code>:不对字符串中的转义字符转义。</li></ul><h2 id="简单匹配" tabindex="-1"><a class="header-anchor" href="#简单匹配" aria-hidden="true">#</a> 简单匹配</h2><p>我们首先从使用<code>Regex</code>、<code>Match</code>类的简单表达式开始学习。</p><p><code>Match m = Regex.Match(&quot;abracadabra&quot;, &quot;(a|b|r)+&quot;);</code></p><p>我们现在有了一个可以用于测试的<code>Match</code>类的实例，例如：<code>if (m.Success)...</code></p><p>如果想使用匹配的字符串，可以把它转换成一个字符串：</p><p><code>Console.WriteLine(&quot;Match=&quot;+m.ToString());</code></p><p>这个例子可以得到如下的输出:<code>Match=abra</code>。这就是匹配的字符串了。</p><h2 id="字符串的替换" tabindex="-1"><a class="header-anchor" href="#字符串的替换" aria-hidden="true">#</a> 字符串的替换</h2><p>简单字符串的替换非常直观。例如下面的语句：</p><p><code>string s = Regex.Replace(&quot;abracadabra&quot;, &quot;abra&quot;, &quot;zzzz&quot;);</code></p><p>它返回字符串<code>zzzzcadzzzz</code>，所有匹配的字符串都被替换成了<code>zzzzz</code>。</p><p>现在我们来看一个比较复杂的字符串替换的例子：</p><p><code>string s = Regex.Replace(&quot; abra &quot;, @&quot;^\\s*(.*?)\\s*$&quot;, &quot;$1&quot;);</code></p><p>这个语句返回字符串<code>abra</code>，其前导和后缀的空格都去掉了。</p><p>上面的模式对于删除任意字符串中的前导和后续空格都非常有用。在C#中，我们还经常使用字母字符串，在一个字母字符串中，编译程序不把字符“ \\” 作为转义字符处理。在使用字符“\\”指定转义字符时，@&quot;...&quot;是非常有用的。另外值得一提的是$1在字符串替换方面的使用，它表明替换字符串只能包含被替换的字符串。</p><h2 id="匹配引擎的细节" tabindex="-1"><a class="header-anchor" href="#匹配引擎的细节" aria-hidden="true">#</a> 匹配引擎的细节</h2><p>现在，我们通过一个组结构来理解一个稍微复杂的例子。看下面的例子：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">&quot;abracadabra1abracadabra2abracadabra3&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> pat <span class="token operator">=</span> <span class="token string">@&quot;
　　　　( # 第一个组的开始
　　　　 abra # 匹配字符串abra
　　　　 ( # 第二个组的开始
　　　　 cad # 匹配字符串cad
　　　　 )? # 第二个组结束（可选）
　　　　) # 第一个组结束
　　　　+ # 匹配一次或多次
　　　　&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//利用x修饰符忽略注释</span>
<span class="token class-name">Regex</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Regex</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//获得组号码的清单 </span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> gnums <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">GetGroupNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//首次匹配 </span>
<span class="token class-name">Match</span> m <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//从组1开始 </span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gnums<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Group</span> g <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span>gnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获得这次匹配的组 </span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Group&quot;</span> <span class="token operator">+</span> gnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;=[&quot;</span> <span class="token operator">+</span> g<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//计算这个组的起始位置和长度 </span>
        <span class="token class-name">CaptureCollection</span> cc <span class="token operator">=</span> g<span class="token punctuation">.</span>Captures<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cc<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Capture</span> c <span class="token operator">=</span> cc<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot; Capture&quot;</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">&quot;=[&quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] Index=&quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>Index <span class="token operator">+</span> <span class="token string">&quot; Length=&quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//下一个匹配 </span>
    m <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">NextMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个例子的输出如下所示：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">Group1</span><span class="token operator">=</span><span class="token punctuation">[</span>abra<span class="token punctuation">]</span> 
<span class="token assign-left variable">Capture0</span><span class="token operator">=</span><span class="token punctuation">[</span>abracad<span class="token punctuation">]</span> <span class="token assign-left variable">Index</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">Length</span><span class="token operator">=</span><span class="token number">7</span> 
<span class="token assign-left variable">Capture1</span><span class="token operator">=</span><span class="token punctuation">[</span>abra<span class="token punctuation">]</span> <span class="token assign-left variable">Index</span><span class="token operator">=</span><span class="token number">7</span> <span class="token assign-left variable">Length</span><span class="token operator">=</span><span class="token number">4</span> 
<span class="token assign-left variable">Group2</span><span class="token operator">=</span><span class="token punctuation">[</span>cad<span class="token punctuation">]</span> 
<span class="token assign-left variable">Capture0</span><span class="token operator">=</span><span class="token punctuation">[</span>cad<span class="token punctuation">]</span> <span class="token assign-left variable">Index</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">Length</span><span class="token operator">=</span><span class="token number">3</span> 
<span class="token assign-left variable">Group1</span><span class="token operator">=</span><span class="token punctuation">[</span>abra<span class="token punctuation">]</span> 
<span class="token assign-left variable">Capture0</span><span class="token operator">=</span><span class="token punctuation">[</span>abracad<span class="token punctuation">]</span> <span class="token assign-left variable">Index</span><span class="token operator">=</span><span class="token number">12</span> <span class="token assign-left variable">Length</span><span class="token operator">=</span><span class="token number">7</span> 
<span class="token assign-left variable">Capture1</span><span class="token operator">=</span><span class="token punctuation">[</span>abra<span class="token punctuation">]</span> <span class="token assign-left variable">Index</span><span class="token operator">=</span><span class="token number">19</span> <span class="token assign-left variable">Length</span><span class="token operator">=</span><span class="token number">4</span> 
<span class="token assign-left variable">Group2</span><span class="token operator">=</span><span class="token punctuation">[</span>cad<span class="token punctuation">]</span> 
<span class="token assign-left variable">Capture0</span><span class="token operator">=</span><span class="token punctuation">[</span>cad<span class="token punctuation">]</span> <span class="token assign-left variable">Index</span><span class="token operator">=</span><span class="token number">16</span> <span class="token assign-left variable">Length</span><span class="token operator">=</span><span class="token number">3</span> 
<span class="token assign-left variable">Group1</span><span class="token operator">=</span><span class="token punctuation">[</span>abra<span class="token punctuation">]</span> 
<span class="token assign-left variable">Capture0</span><span class="token operator">=</span><span class="token punctuation">[</span>abracad<span class="token punctuation">]</span> <span class="token assign-left variable">Index</span><span class="token operator">=</span><span class="token number">24</span> <span class="token assign-left variable">Length</span><span class="token operator">=</span><span class="token number">7</span> 
<span class="token assign-left variable">Capture1</span><span class="token operator">=</span><span class="token punctuation">[</span>abra<span class="token punctuation">]</span> <span class="token assign-left variable">Index</span><span class="token operator">=</span><span class="token number">31</span> <span class="token assign-left variable">Length</span><span class="token operator">=</span><span class="token number">4</span> 
<span class="token assign-left variable">Group2</span><span class="token operator">=</span><span class="token punctuation">[</span>cad<span class="token punctuation">]</span> 
<span class="token assign-left variable">Capture0</span><span class="token operator">=</span><span class="token punctuation">[</span>cad<span class="token punctuation">]</span> <span class="token assign-left variable">Index</span><span class="token operator">=</span><span class="token number">28</span> <span class="token assign-left variable">Length</span><span class="token operator">=</span><span class="token number">3</span> 
</code></pre></div><p>我们首先从考查字符串<code>pat</code>开始，<code>pat</code>中包含有表达式。第一个<code>capture</code>是从第一个圆括号开始的，然后表达式将匹配到一个<code>abra</code>。第二个capture组从第二个圆括号开始，但第一个<code>capture</code>组还没有结束，这意味着第一个组匹配的结果是<code>abracad</code> ，而第二个组的匹配结果仅仅是<code>cad</code>。因此如果通过使用？符号而使cad成为一项可选的匹配，匹配的结果就可能是<code>abra</code>或<code>abracad</code>。然后，第一个组就会结束，通过指定+符号要求表达式进行多次匹配。</p><p>现在我们来看看匹配过程中发生的情况。首先，通过调用Regex的constructor方法建立表达式的一个实例，并在其中指定各种选项。在这个例子中，由于在表达式中有注释，因此选用了x选项，另外还使用了一些空格。打开x选项，表达式将会忽略注释和其中没有转义的空格。</p><p>然后，取得表达式中定义的组的编号的清单。你当然可以显性地使用这些编号，在这里使用的是编程的方法。如果使用了命名的组，作为一种建立快速索引的途径这种方法也十分有效。</p><p>接下来是完成第一次匹配。通过一个循环测试当前的匹配是否成功，接下来是从group 1开始重复对组清单执行这一操作。在这个例子中没有使用group 0的原因是group 0是一个完全匹配的字符串，如果要通过收集全部匹配的字符串作为一个单一的字符串，就会用到group 0了。</p><p>我们跟踪每个group中的<code>CaptureCollection</code>。通常情况下每次匹配、每个group中只能有一个capture，但本例中的Group1则有两个capture：Capture0和Capture1。如果你仅需要Group1的ToString，就会只得到abra，当然它也会与abracad匹配。组中ToString的值就是其CaptureCollection中最后一个Capture的值，这正是我们所需要的。如果你希望整个过程在匹配abra后结束，就应该从表达式中删除+符号，让regex引擎知道我们只需要对表达式进行匹配。</p><h2 id="基于过程和基于表达式方法的比较" tabindex="-1"><a class="header-anchor" href="#基于过程和基于表达式方法的比较" aria-hidden="true">#</a> 基于过程和基于表达式方法的比较</h2><p>一般情况下，使用规则表达式的用户可以分为以下二大类：第一类用户尽量不使用规则表达式，而是使用过程来执行一些需要重复的操作；第二类用户则充分利用规则表达式处理引擎的功能和威力，而尽可能少地使用过程。</p><p>对于我们大多数用户而言，最好的方案莫过于二者兼而用之了。我希望这篇文章能够说明.NET语言中regexp类的作用以及它在性能和复杂性之间的优、劣点。</p><h3 id="基于过程的模式" tabindex="-1"><a class="header-anchor" href="#基于过程的模式" aria-hidden="true">#</a> 基于过程的模式</h3><p>我们在编程中经常需要用到的一个功能是对字符串中的一部分进行匹配或其他一些对字符串处理，下面是一个对字符串中的单词进行匹配的例子：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">&quot;the quick red fox jumped over the lazy brown dog.&quot;</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;text=[&quot;</span> <span class="token operator">+</span> text <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> result <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> pattern <span class="token operator">=</span> <span class="token string">@&quot;\\w+|\\W+&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Match</span> m <span class="token keyword">in</span> Regex<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 取得匹配的字符串 </span>
    <span class="token class-name"><span class="token keyword">string</span></span> x <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果第一个字符是小写 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsLower</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 变成大写 </span>
        x <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 收集所有的字符 </span>
    result <span class="token operator">+=</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;result=[&quot;</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>正象上面的例子所示，我们使用了C#语言中的<code>foreach</code>语句处理每个匹配的字符，并完成相应的处理，在这个例子中，新创建了一个result字符串。这个例子的输出所下所示：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">text</span><span class="token operator">=</span><span class="token punctuation">[</span>the quick red fox jumped over the lazy brown dog.<span class="token punctuation">]</span> 
<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token punctuation">[</span>The Quick Red Fox Jumped Over The Lazy Brown Dog.<span class="token punctuation">]</span> 
</code></pre></div><h3 id="基于表达式的模式" tabindex="-1"><a class="header-anchor" href="#基于表达式的模式" aria-hidden="true">#</a> 基于表达式的模式</h3><p>完成上例中的功能的另一条途径是通过一个<code>MatchEvaluator</code>，新的代码如下所示：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>RegularExpressions</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">CapText</span><span class="token punctuation">(</span><span class="token class-name">Match</span> m<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//取得匹配的字符串 </span>
        <span class="token class-name"><span class="token keyword">string</span></span> x <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果第一个字符是小写 </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsLower</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">// 转换为大写 </span>
            <span class="token keyword">return</span> <span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">&quot;the quick red fox jumped over the lazy brown dog.&quot;</span><span class="token punctuation">;</span> 
        System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;text=[&quot;</span> <span class="token operator">+</span> text <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> pattern <span class="token operator">=</span> <span class="token string">@&quot;\\w+&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> result <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MatchEvaluator</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span>CapText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;result=[&quot;</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>同时需要注意的是，由于仅仅需要对单词进行修改而无需对非单词进行修改，这个模式显得非常简单。</p><h2 id="常用表达式" tabindex="-1"><a class="header-anchor" href="#常用表达式" aria-hidden="true">#</a> 常用表达式</h2><p>为了能够更好地理解如何在C#环境中使用规则表达式，我写出一些对你来说可能有用的规则表达式，这些表达式在其他的环境中都被使用过，希望能够对你有所帮助。</p><h3 id="罗马数字" tabindex="-1"><a class="header-anchor" href="#罗马数字" aria-hidden="true">#</a> 罗马数字</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> p1 <span class="token operator">=</span> <span class="token string">&quot;^m*(d?c{0,3}|c[dm])&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;(l?x{0,3}|x[lc])(v?i{0,3}|i[vx])$&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> t1 <span class="token operator">=</span> <span class="token string">&quot;vii&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Match</span> m1 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="交换前二个单词" tabindex="-1"><a class="header-anchor" href="#交换前二个单词" aria-hidden="true">#</a> 交换前二个单词</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t2 <span class="token operator">=</span> <span class="token string">&quot;the quick brown fox&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> p2 <span class="token operator">=</span> <span class="token string">@&quot;(\\S+)(\\s+)(\\S+)&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Regex</span> x2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Regex</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> r2 <span class="token operator">=</span> x2<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> <span class="token string">&quot;$3$2$1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="关健字-值" tabindex="-1"><a class="header-anchor" href="#关健字-值" aria-hidden="true">#</a> 关健字=值</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t3 <span class="token operator">=</span> <span class="token string">&quot;myval = 3&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> p3 <span class="token operator">=</span> <span class="token string">@&quot;(\\w+)\\s*=\\s*(.*)\\s*$&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Match</span> m3 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>t3<span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="实现每行80个字符" tabindex="-1"><a class="header-anchor" href="#实现每行80个字符" aria-hidden="true">#</a> 实现每行80个字符</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t4 <span class="token operator">=</span> <span class="token string">&quot;********************&quot;</span>
　　 <span class="token operator">+</span> <span class="token string">&quot;******************************&quot;</span>
　　 <span class="token operator">+</span> <span class="token string">&quot;******************************&quot;</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> p4 <span class="token operator">=</span> <span class="token string">&quot;.{80,}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Match</span> m4 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>t4<span class="token punctuation">,</span> p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="月-日-年-小时-分-秒的时间格式" tabindex="-1"><a class="header-anchor" href="#月-日-年-小时-分-秒的时间格式" aria-hidden="true">#</a> 月/日/年 小时:分:秒的时间格式</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t5 <span class="token operator">=</span> <span class="token string">&quot;01/01/01 16:10:01&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> p5 <span class="token operator">=</span> <span class="token string">@&quot;(\\d+)/(\\d+)/(\\d+) (\\d+):(\\d+):(\\d+)&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Match</span> m5 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>t5<span class="token punctuation">,</span> p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
\`\`\`　

<span class="token preprocessor property">### 改变目录（仅适用于Windows平台） </span>

\`\`\`csharp
<span class="token class-name"><span class="token keyword">string</span></span> t6 <span class="token operator">=</span> <span class="token string">@&quot;C:\\Documents and Settings\\user1\\Desktop\\&quot;; 
string r6 = Regex.Replace(t6,@&quot;</span>\\\\user1\\\\&quot;<span class="token punctuation">,</span> <span class="token string">@&quot;\\\\user2\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><h3 id="扩展16位转义符" tabindex="-1"><a class="header-anchor" href="#扩展16位转义符" aria-hidden="true">#</a> 扩展16位转义符</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t7 <span class="token operator">=</span> <span class="token string">&quot;%41&quot;</span><span class="token punctuation">;</span> <span class="token comment">// capital A</span>
<span class="token class-name"><span class="token keyword">string</span></span> p7 <span class="token operator">=</span> <span class="token string">&quot;%([0-9A-Fa-f][0-9A-Fa-f])&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> r7 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>t7<span class="token punctuation">,</span> p7<span class="token punctuation">,</span> HexConvert<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="删除c语言中的注释-有待完善" tabindex="-1"><a class="header-anchor" href="#删除c语言中的注释-有待完善" aria-hidden="true">#</a> 删除C语言中的注释（有待完善）</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t8 <span class="token operator">=</span> <span class="token string">@&quot; 
　　/* 
　　 * 传统风格的注释 
　　 */&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> p8 <span class="token operator">=</span> <span class="token string">@&quot;
　　 /\\* # 匹配注释开始的定界符
　　 .*? # 匹配注释
　　 \\*/ # 匹配注释结束定界符 
　　&quot;</span><span class="token punctuation">;</span> 

<span class="token class-name"><span class="token keyword">string</span></span> r8 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>t8<span class="token punctuation">,</span> p8<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><h3 id="删除字符串中开始和结束处的空格" tabindex="-1"><a class="header-anchor" href="#删除字符串中开始和结束处的空格" aria-hidden="true">#</a> 删除字符串中开始和结束处的空格</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t9a <span class="token operator">=</span> <span class="token string">&quot; leading&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> p9a <span class="token operator">=</span> <span class="token string">@&quot;^\\s+&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> r9a <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>t9a<span class="token punctuation">,</span> p9a<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> t9b <span class="token operator">=</span> <span class="token string">&quot;trailing &quot;</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> p9b <span class="token operator">=</span> <span class="token string">@&quot;\\s+$&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> r9b <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>t9b<span class="token punctuation">,</span> p9b<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><h3 id="在字符-后添加字符n-使之成为真正的新行" tabindex="-1"><a class="header-anchor" href="#在字符-后添加字符n-使之成为真正的新行" aria-hidden="true">#</a> 在字符\\后添加字符n，使之成为真正的新行</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t10 <span class="token operator">=</span> <span class="token string">@&quot;\\ntest\\n&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> r10 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>t10<span class="token punctuation">,</span> <span class="token string">@&quot;\\\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><h3 id="转换ip地址" tabindex="-1"><a class="header-anchor" href="#转换ip地址" aria-hidden="true">#</a> 转换IP地址</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t11 <span class="token operator">=</span> <span class="token string">&quot;55.54.53.52&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> p11 <span class="token operator">=</span> <span class="token string">&quot;^&quot;</span> <span class="token operator">+</span> 
　　 <span class="token string">@&quot;([01]?\\d\\d|2[0-4]\\d|25[0-5])\\.&quot;</span> <span class="token operator">+</span> 
　　 <span class="token string">@&quot;([01]?\\d\\d|2[0-4]\\d|25[0-5])\\.&quot;</span> <span class="token operator">+</span> 
　　 <span class="token string">@&quot;([01]?\\d\\d|2[0-4]\\d|25[0-5])\\.&quot;</span> <span class="token operator">+</span> 
　　 <span class="token string">@&quot;([01]?\\d\\d|2[0-4]\\d|25[0-5])&quot;</span> <span class="token operator">+</span> 
　　 <span class="token string">&quot;$&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">Match</span> m11 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>t11<span class="token punctuation">,</span> p11<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="删除文件名包含的路径" tabindex="-1"><a class="header-anchor" href="#删除文件名包含的路径" aria-hidden="true">#</a> 删除文件名包含的路径</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t12 <span class="token operator">=</span> <span class="token string">@&quot;c:\\file.txt&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> p12 <span class="token operator">=</span> <span class="token string">@&quot;^.*\\\\&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> r12 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>t12<span class="token punctuation">,</span> p12<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="联接多行字符串中的行" tabindex="-1"><a class="header-anchor" href="#联接多行字符串中的行" aria-hidden="true">#</a> 联接多行字符串中的行</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t13 <span class="token operator">=</span> <span class="token string">@&quot;this is a split line&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> p13 <span class="token operator">=</span> <span class="token string">@&quot;\\s*\\r?\\n\\s*&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> r13 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>t13<span class="token punctuation">,</span> p13<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><h3 id="提取字符串中的所有数字" tabindex="-1"><a class="header-anchor" href="#提取字符串中的所有数字" aria-hidden="true">#</a> 提取字符串中的所有数字</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t14 <span class="token operator">=</span> <span class="token string">@&quot;
　　test 1 
　　test 2.3 
　　test 47&quot;</span><span class="token punctuation">;</span> 

<span class="token class-name"><span class="token keyword">string</span></span> p14 <span class="token operator">=</span> <span class="token string">@&quot;(\\d+\\.?\\d*|\\.\\d+)&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">MatchCollection</span> mc14 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>t14<span class="token punctuation">,</span> p14<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><h3 id="找出所有的大写字母" tabindex="-1"><a class="header-anchor" href="#找出所有的大写字母" aria-hidden="true">#</a> 找出所有的大写字母</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t15 <span class="token operator">=</span> <span class="token string">&quot;This IS a Test OF ALL Caps&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> p15 <span class="token operator">=</span> <span class="token string">@&quot;(\\b[^\\Wa-z0-9_]+\\b)&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">MatchCollection</span> mc15 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>t15<span class="token punctuation">,</span> p15<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="找出小写的单词" tabindex="-1"><a class="header-anchor" href="#找出小写的单词" aria-hidden="true">#</a> 找出小写的单词</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t16 <span class="token operator">=</span> <span class="token string">&quot;This is A Test of lowercase&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> p16 <span class="token operator">=</span> <span class="token string">@&quot;(\\b[^\\WA-Z0-9_]+\\b)&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">MatchCollection</span> mc16 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>t16<span class="token punctuation">,</span> p16<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="找出第一个字母为大写的单词" tabindex="-1"><a class="header-anchor" href="#找出第一个字母为大写的单词" aria-hidden="true">#</a> 找出第一个字母为大写的单词</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t17 <span class="token operator">=</span> <span class="token string">&quot;This is A Test of Initial Caps&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> p17 <span class="token operator">=</span> <span class="token string">@&quot;(\\b[^\\Wa-z0-9_][^\\WA-Z0-9_]*\\b)&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">MatchCollection</span> mc17 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>t17<span class="token punctuation">,</span> p17<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="找出简单的html语言中的链接" tabindex="-1"><a class="header-anchor" href="#找出简单的html语言中的链接" aria-hidden="true">#</a> 找出简单的HTML语言中的链接</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> t18 <span class="token operator">=</span> <span class="token string">@&quot;
　　&lt;html&gt; 
　　&lt;a href=&quot;&quot;first.htm&quot;&quot;&gt;first tag text&lt;/a&gt;
　　&lt;a href=&quot;&quot;next.htm&quot;&quot;&gt;next tag text&lt;/a&gt;
　　&lt;/html&gt; &quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> p18 <span class="token operator">=</span> <span class="token string">@&quot;&lt;A[^&gt;]*?HREF\\s*=\\s*[&quot;&quot;&#39;]?&quot;</span> <span class="token operator">+</span> <span class="token string">@&quot;([^&#39;&quot;&quot; &gt;]+?)[ &#39;&quot;&quot;]?&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">MatchCollection</span> mc18 <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>t18<span class="token punctuation">,</span> p18<span class="token punctuation">,</span> <span class="token string">&quot;si&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,88),e=[o];function c(l,u){return n(),a("div",null,e)}const k=s(p,[["render",c],["__file","cspbase6.html.vue"]]);export{k as default};
