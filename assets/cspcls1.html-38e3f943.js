import{_ as i,o as l,c as a,a as e}from"./app-8e5157a8.js";const o={},t=e('<h1 id="c-及其特性" tabindex="-1"><a class="header-anchor" href="#c-及其特性" aria-hidden="true">#</a> C#及其特性</h1><ol><li>C#是一种从C++和Java继承而来的,简单的,现代的,面向对象的语言.</li><li>它的目标是综合Visual Basic高产和C++底层高效的特性.</li><li>它是Microsoft Visual Studio7.0 的一部分.</li><li>Visual studio支持Vb,VC++,C++,Vbscript,Jscript.所有这些语言提供对Microsft .NET平台的访问.</li><li>.NET包括一个Common Execution引擎和一个丰富的类库.</li><li>Microsofts JVM eqiv就是Common language(通用语言)运行库(CLR).</li><li>CLR支持不止一种语言,诸如 C#,VB.NET,Jscript,ASP.NET,C++.</li><li>源代码---&gt;中间语言代码(IL)---&gt;(JIT 编译器)机器码.</li><li>类和数据类型对所有.NET语言是通用的.</li><li>我们能够用C#开发控制台应用程序,Windows应用程序,Web应用程序.</li><li>在C#中微软处理了C++问题,比如内存管理,指针等.</li><li>它支持垃圾回收(无用内存回收),内存自动管理和其他许多特性.</li></ol><h2 id="c-的主要特点" tabindex="-1"><a class="header-anchor" href="#c-的主要特点" aria-hidden="true">#</a> C#的主要特点</h2><h3 id="a-简单" tabindex="-1"><a class="header-anchor" href="#a-简单" aria-hidden="true">#</a> A.简单</h3><ol><li>C#中指针已经消失.</li><li>不安全的操作,比方说直接内存操作不被允许了.</li><li>C#中&quot;::&quot;或&quot;-&gt;&quot;操作符是没用的.</li><li>因为它是基于.NET平台的,它继承了自动内存管理和垃圾回收的特点.</li><li>原始数据类型可变的数据范围象Integer,Floats等.</li><li>整形数值0和1不再作为布尔值出现.C#中的布尔值是纯粹的true和false值而且没有更多的&quot;=&quot;操作符和&quot;==&quot;操作符错误.&quot;==&quot;被用于进行比较操作而&quot;=&quot;被用做赋值操作.</li></ol><h3 id="b-现代" tabindex="-1"><a class="header-anchor" href="#b-现代" aria-hidden="true">#</a> B.现代</h3><ol><li>C#建立在当前的潮流上,对于创建相互兼容的,可伸缩的,健壮的应用程序来说是非常强大和简单的.</li><li>C#拥有内建的支持来将任何组件转换成一个web service,运行在任何平台上的任何应用程序都可以通过互联网来使用这个服务.</li></ol><h3 id="c-面向对象的" tabindex="-1"><a class="header-anchor" href="#c-面向对象的" aria-hidden="true">#</a> C.面向对象的</h3><ol><li>C#支持数据封装,继承,多态和对象界面(即java中的interface关键字).</li><li>(int,float,double)在java中都不是对象,但是C#引入和结构体(structs)来使原始数据类型变成对象int i=1;String a=i Tostring();//转换(或者)Boxing</li></ol><h3 id="d-类型安全" tabindex="-1"><a class="header-anchor" href="#d-类型安全" aria-hidden="true">#</a> D.类型安全</h3><ol><li>在C#中我们不能进行不安全的类型转换象将double转换成boolean.</li><li>值类型(常量类型)被初始化为零值而引用类型(对象和类被编译器自动初始化为零值.</li><li>数组类型下标从零开始而且进行越界检查.</li><li>类型溢出将被检查.</li></ol><h3 id="e-相互兼容性" tabindex="-1"><a class="header-anchor" href="#e-相互兼容性" aria-hidden="true">#</a> E.相互兼容性</h3><ol><li>C#提供对COM和基于windows的应用程序的原始的支持.</li><li>允许对原始指针的有限制的使用.</li><li>用户不再需要显式的实现unkown和其它COM界面,这些功能已经内建.</li><li>C#允许用户将指针作为不安全的代码段来操作老的代码.</li><li>VB.NET和其它中间代码语言中的组件可以在C#中直接使用.</li></ol><h3 id="f-可伸缩性和可升级性" tabindex="-1"><a class="header-anchor" href="#f-可伸缩性和可升级性" aria-hidden="true">#</a> F.可伸缩性和可升级性</h3><ol><li>.NET引入了零部件的概念,它们通过其&quot;手册&quot;具有自描述的功能.手册确立了零部件的身份,版本,语言和数字签名等.零部件不需要在任何地方注册.</li><li>要扩展我们的程序,我们只需要删除老的文件并用新的文件来升级它们.不需要注册动态链接库.</li><li>升级软件组件的过程只是一个错误探测的任务.对代码的修改能够影响现存的程序,C#在语言中支持版本修改.对界面和方法重载的支持使得复杂的程序框架能随着时间发展和进化.</li></ol><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>C#是一种现代的,类型安全的,面向对象的编程语言,它使得程序员能够快速而容易的为微软.NET平台开发解决方案.</p>',17),r=[t];function d(h,c){return l(),a("div",null,r)}const s=i(o,[["render",d],["__file","cspcls1.html.vue"]]);export{s as default};
