import{_ as a,o as s,c as e,a as n}from"./app-477de5b2.js";const p={},o=n(`<h1 id="vb-net-编码规范-也适用于c" tabindex="-1"><a class="header-anchor" href="#vb-net-编码规范-也适用于c" aria-hidden="true">#</a> VB.net 编码规范（也适用于C#）</h1><p>在开发中保持良好的编码规范是十分重要的。我所采用的新的VB.net编码规范，是一种被证明能明显改善代码可读性，并有助于代码管理、分类的编码规范。采用这种编码规范，能避免如匈牙利命名法带来的繁长前缀，便于记忆变量的用途。下面的介绍这种编码规范。</p><h2 id="一、类型级单位的命名" tabindex="-1"><a class="header-anchor" href="#一、类型级单位的命名" aria-hidden="true">#</a> 一、类型级单位的命名</h2><h3 id="_1、类" tabindex="-1"><a class="header-anchor" href="#_1、类" aria-hidden="true">#</a> 1、类</h3><p>以Class声明的类，都必须以名词或名词短语命名，体现类的作用。如：</p><p><code>Class Indicator</code></p><p>当类是一个特性（Attribute）时，以Attribute结尾，当类是一个异常（Exception）时，以Exception结尾：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Class</span> ColorSetException
<span class="token keyword">Class</span> CauseExceptionAttribute
</code></pre></div><p>当类只需有一个对象实例（全局对象，比如Application等），必须以Class结尾，如</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Class</span> ScreenClass
<span class="token keyword">Class</span> SystemClass
</code></pre></div><p>当类只用于作为其他类的基类，根据情况，以Base结尾：</p><p><code>MustInherit Class IndicatorBase</code></p><p>如果定义的类是一个窗体，那么名字的后面必须加后缀Form，如果是Web窗体，必须加后缀Page：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Class</span> PrintForm <span class="token punctuation">:</span> <span class="token keyword">Inherits</span> Form 注释：<span class="token operator">*</span> Windows窗体
<span class="token keyword">Class</span> StartPage <span class="token punctuation">:</span> <span class="token keyword">Inherits</span> Page 注释：<span class="token operator">*</span> Web窗体
</code></pre></div><h3 id="_2、枚举和结构" tabindex="-1"><a class="header-anchor" href="#_2、枚举和结构" aria-hidden="true">#</a> 2、枚举和结构</h3><p>同样必须以名词或名词短语命名。最好体现枚举或结构的特点，如：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Enum</span> ColorButtons 注释：以复数结尾，表明这是一个枚举
<span class="token keyword">Structure</span> CustomerInfoRecord 注释：以Record结尾，表明这是一个结构体
</code></pre></div><h3 id="_3、委派类型" tabindex="-1"><a class="header-anchor" href="#_3、委派类型" aria-hidden="true">#</a> 3、委派类型</h3><p>普通的委派类型以描述动作的名词命名，以体现委派类型实例的功能：</p><p><code>Delegate Sub DataSeeker (ByVal SeekString As String)</code></p><p>用于事件处理的委派类型，必须以EventHandler结尾，如：</p><p><code>Delegate Sub DataChangedEventHandler (ByVal Sender As Object, ByVal e As DataChangedEventArgs)</code></p><h3 id="_4、接口" tabindex="-1"><a class="header-anchor" href="#_4、接口" aria-hidden="true">#</a> 4、接口</h3><p>与其他类型不同，接口必须要由I作为前缀，并用形容词命名，突出表现实现接口的类将具有什么能力：</p><p><code>Interface ISortable</code></p><h3 id="_5、模块" tabindex="-1"><a class="header-anchor" href="#_5、模块" aria-hidden="true">#</a> 5、模块</h3><p>模块不是类型，他的名称除了必须以名词命名外，必须加以后缀Module:</p><p><code>Module SharedFunctionsModule</code></p><p>上述所有规则的共同特点是，每个组成名称的词语都必须是大写开头，禁止完全大写或小写的名称。</p><h2 id="二、方法和属性的命名" tabindex="-1"><a class="header-anchor" href="#二、方法和属性的命名" aria-hidden="true">#</a> 二、方法和属性的命名</h2><h3 id="_1、方法" tabindex="-1"><a class="header-anchor" href="#_1、方法" aria-hidden="true">#</a> 1、方法</h3><p>无论是函数还是子程序，方法都必须以动词或动词短语命名。无需区分函数和子程序，也无需指明返回类型。</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Sub</span> Open<span class="token punctuation">(</span><span class="token keyword">ByVal</span> CommandString <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">)</span>
<span class="token keyword">Function</span> SetCopyNumber<span class="token punctuation">(</span><span class="token keyword">ByVal</span> CopyNumber <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token punctuation">)</span>
</code></pre></div><p>参数需要指明ByVal还是ByRef，这一点写起来会让程序边长，但非常必要。如果没有特别情况，都使用ByVal。参数的命名方法，参考后面“变量的命名方法”。需要重载的方法，一般不写Overloads，根据需要编写重载的方法。</p><h3 id="_2、属性" tabindex="-1"><a class="header-anchor" href="#_2、属性" aria-hidden="true">#</a> 2、属性</h3><p>原则上，字段（Field）是不能公开的，要访问字段的值，一般使用属性。属性以简洁清晰的名词命名：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Property</span> Concentration <span class="token keyword">As</span> <span class="token keyword">Single</span>
<span class="token keyword">Property</span> Customer <span class="token keyword">As</span> CustomerTypes
</code></pre></div><h3 id="_3、事件" tabindex="-1"><a class="header-anchor" href="#_3、事件" aria-hidden="true">#</a> 3、事件</h3><p>事件是特殊的属性，只能在事件处理上下文中使用。命名的原则一般是动词或动词的分词，通过时态表明事件发生的时间：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Event</span> Click <span class="token keyword">As</span> ClickEventHandler
<span class="token keyword">Event</span> ColorChanged <span class="token keyword">As</span> ColorChangedEventHangler
</code></pre></div><h2 id="三、变量和常数" tabindex="-1"><a class="header-anchor" href="#三、变量和常数" aria-hidden="true">#</a> 三、变量和常数</h2><p>常数以表明常数意义的名词命名，一般不区分常数的类型：</p><p><code>Const DefaultConcentration As Single = 0.01</code></p><p>在严格要求的代码中，常数以c_开头，如c_DefaultConcentration，但最好不要用它，它会带来输入困难。<br> 普通类型的变量，只要用有意义的名字命名即可，不可使用简称和无意义的名称诸如A，x1等，下面给出了良好的例子：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Dim</span> Index <span class="token keyword">As</span> <span class="token keyword">Integer</span>
<span class="token keyword">Dim</span> NextMonthExpenditure <span class="token keyword">As</span> <span class="token keyword">Decimal</span>
<span class="token keyword">Dim</span> CustomerName <span class="token keyword">As</span> <span class="token keyword">String</span>
</code></pre></div><p>不能起太长的名字，应该尽量简洁，如下面的例子：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Dim</span> VariableUsedToStoreSystemInformation <span class="token keyword">As</span> <span class="token keyword">String</span> 注释： 错误，太复杂了
<span class="token keyword">Dim</span> SystemInformation <span class="token keyword">As</span> <span class="token keyword">String</span> 注释： 正确，简单明了
<span class="token keyword">Dim</span> sysInfo <span class="token keyword">As</span> <span class="token keyword">String</span> 注释： 错误，过于简单
</code></pre></div><p>特殊情况可以考虑一个字母的变量：</p><p><code>Dim g As Graphic</code></p><p>对于控件，应该指明控件的类型，方法是直接在变量后面加以类名：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Friend</span> <span class="token keyword">WithEvents</span> NextPageButton <span class="token keyword">As</span> Button 注释：<span class="token operator">*</span> 按钮
<span class="token keyword">Friend</span> <span class="token keyword">WithEvents</span> ColorChoicerPanel <span class="token keyword">As</span> Panel 注释：<span class="token operator">*</span> 面版
<span class="token keyword">Friend</span> <span class="token keyword">WithEvents</span> CardFileOpenDialog <span class="token keyword">As</span> FileOpenDialog 注释：<span class="token operator">*</span> 文件打开对话框
</code></pre></div><p>等等，无需规定某种类型的变量的前缀，只需把类型写在后面就行了，试对比下列代码：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code>btnCancel<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&amp;Cancel&quot;</span>
CancelButton<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&amp;Cancel&quot;</span>
</code></pre></div><p>显然后者更能使阅读者明白变量的类型是一个按钮。</p><h2 id="四、标签" tabindex="-1"><a class="header-anchor" href="#四、标签" aria-hidden="true">#</a> 四、标签</h2><p>标签就是用于Goto跳转的代码标识，由于Goto并不推荐使用，所以标签的使用也比较苛刻。标签必须全部大写，中间的空格用下划线_代替，而且应该以_开头，比如：</p><p><code>_A_LABEL_EXAMPLE:</code></p><p>如此定义标签是为了与其他代码元素充分区别。</p><h2 id="五、名字空间" tabindex="-1"><a class="header-anchor" href="#五、名字空间" aria-hidden="true">#</a> 五、名字空间</h2><p>通常，一个工程使用一个名字空间，通常不需要用Namespace语句，而是在工程选项的“Root Namespace”中指定，使用根名字空间可以使代码更加整齐，容易修改，这一点是VB十足的优点。名字空间的语法是：</p><p><code>公司名.产品名[.组件名的复数]</code></p><p>如：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Namespace</span> Ninputer<span class="token punctuation">.</span>VirtualScreen
<span class="token keyword">Namespace</span> Ninputer<span class="token punctuation">.</span>CardEditor<span class="token punctuation">.</span>CustomeControls
</code></pre></div><p>随便起一个名字空间的名字绝对不是一个好主意，一定要遵守上述规定。</p><h2 id="六、注释" tabindex="-1"><a class="header-anchor" href="#六、注释" aria-hidden="true">#</a> 六、注释</h2><p>注释的规则繁多，这里仅提到其中一点：正常的注释以注释：*开头，单独的注释：只用来注释暂时不用的代码</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code>注释：<span class="token operator">*</span> 这是普通的注释
注释：<span class="token operator">*</span> 这段代码在调试正确后加入
注释：<span class="token keyword">If</span> UseHighSpeed<span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">Then</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre></div><p>这样能够方便的采用代码注释工具控制代码的使用。</p><p>以上已经简单的介绍了我使用的VB.net代码规范，这个代码规范也适用于C#。仅供大家参考。</p>`,69),t=[o];function r(c,d){return s(),e("div",null,t)}const i=a(p,[["render",r],["__file","cspcsg2.html.vue"]]);export{i as default};
