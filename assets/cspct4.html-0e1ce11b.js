import{_ as n,o as s,c as a,a as t}from"./app-d9da1b6d.js";const e={},o=t(`<h1 id="初探c-4" tabindex="-1"><a class="header-anchor" href="#初探c-4" aria-hidden="true">#</a> 初探c#-4</h1><p>作者： 依栏望海[17731168] 2000-10-25 23:52:26 修改 删除 [回复]</p><h2 id="_1。4-预定义类型-predefined-types" tabindex="-1"><a class="header-anchor" href="#_1。4-预定义类型-predefined-types" aria-hidden="true">#</a> 1。4 预定义类型（Predefined types）</h2><p>c#提供了一系列预定义类型。它们与c/c++有不少相似的地方。预定义引用类型有<code>object</code>和<code>string</code>。 <code>object</code>类型是所有其他类型的基础。</p><p>预定义类型包括符号数、无符号数、浮点、布尔、字符和十进制数。</p><ul><li>符号数有：<code>sbyte</code>、<code>short</code>、<code>int</code>和<code>long</code>；</li><li>无符号数有：<code>byte</code>、<code>ushort</code>、<code>uint</code>和<code>ulong</code>；</li><li>浮点数有：<code>float</code>和<code>double</code>。</li><li>布尔类型就像一个开关，只有两种状态：<code>true</code>或<code>false</code>。</li></ul><p>c#对布尔的要求比c/c++严格，与java类似。</p><p>在c#中false不等于0，true也不等于1；false和true都是单独分离出来的一个值。学过c/c++的网友都知道</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Bug: 应该是 (i == 0) </span>
<span class="token range operator">..</span><span class="token range operator">..</span> 
<span class="token punctuation">}</span> 
<span class="token comment">/* 是没有问题的。但在c#中会引发一个编译错误（error CS0029: Cannot implicitly convert type &#39;int&#39; to &#39;bool&#39;）。
当然，这样牺牲了一点没有必要的灵活性。我们再也不能这样：*/</span> 

<span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">;</span> 
<span class="token range operator">..</span><span class="token range operator">..</span> 
<span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your comments are: {0}&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token range operator">..</span><span class="token range operator">..</span> 
<span class="token comment">/* 而必须：*/</span> 
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span> 
<span class="token keyword">class</span> <span class="token class-name">BoolTest</span> 
<span class="token punctuation">{</span> 
  <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//也可以：string str; </span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>                   <span class="token comment">//        if((str = Console.ReadLine()) == &quot;&quot;) </span>
      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;i can&#39;t read your comments. Please tell me something! O.K.?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">else</span> 
      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your comments are: {0}&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre></div><p>我抄了一张预定义类型的简表供大家参考。</p><table><thead><tr><th>Type</th><th>Description</th><th>Examples</th></tr></thead><tbody><tr><td>object</td><td>The ultimate base type of all other types</td><td><code>object o = new Stack();</code></td></tr><tr><td>string</td><td>String type; a string is a sequence of Unicode characters</td><td><code>string s = &quot;Hello&quot;;</code></td></tr><tr><td>sbyte</td><td>8-bit signed integral type</td><td><code>sbyte val = 12;</code></td></tr><tr><td>short</td><td>16-bit signed integral type</td><td><code>short val = 12;</code></td></tr><tr><td>int</td><td>32-bit signed integral type</td><td><code>int val = 12;</code></td></tr><tr><td>long</td><td>64-bit signed integral type</td><td><code>long val1 = 12;long val2 = 34L;</code></td></tr><tr><td>byte</td><td>8-bit unsigned integral type</td><td><code>byte val1 = 12;byte val2 = 34U;</code></td></tr><tr><td>ushort</td><td>16-bit unsigned integral type</td><td><code>ushort val1 = 12;ushort val2 = 34U;</code></td></tr><tr><td>uint</td><td>32-bit unsigned integral type</td><td><code>uint val1 = 12; uint val2 = 34U;</code></td></tr><tr><td>ulong</td><td>64-bit unsigned integral type</td><td><code>ulong val1 = 12;ulong val2 = 34U;</code><br><code>ulong val3 = 56L;ulong val4 = 78UL;</code></td></tr><tr><td>float</td><td>Single-precision floating point type</td><td><code>float value = 1.23F;</code></td></tr><tr><td>double</td><td>Double-precision floating point type</td><td><code>double val1 = 1.23;double val2 = 4.56D;</code></td></tr><tr><td>bool</td><td>Boolean type; a bool value is either true or false</td><td><code>bool value = true;</code></td></tr><tr><td>char</td><td>Character type; a char value is a Unicode character</td><td><code>char value = &#39;h&#39;;</code></td></tr><tr><td>decimal</td><td>Precise decimal type with 28 significant digits</td><td><code>decimal value = 1.23M;</code></td></tr></tbody></table><p>你也可以自定义自己的预定义类型，可以这样：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Digit</span>
<span class="token punctuation">{</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestDigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Digit</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>Digit<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">Digit</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>Digit<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token class-name">Digit</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">TestInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">TestDigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这一节有点沉闷。：（</p><hr><p>作者： Burn[5151599] 2000-10-26 09:55:02 [回复]</p><blockquote><p>呵呵，我又是第一个了，呵呵，那个王先生呢！ 兄弟再来，我喜欢看。</p><p>我是个盖世英雄，有一天我会驾着七彩降云杀入敌营去救我的情人，我猜对了前头 也猜对了这结果。（Zzzz....)</p></blockquote><p>作者： 王志清[21847847] 2000-10-27 21:26:28 [回复]</p><blockquote><p>兄弟今天来的是晚了一点，真是抱歉之极！ 只好坐后面一点，认真听课了……</p></blockquote>`,19),p=[o];function c(l,u){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","cspct4.html.vue"]]);export{d as default};
