import{_ as n,o as s,c as a,a as t}from"./app-d9da1b6d.js";const p="/steven-blogs/assets/sysop14_1-088f7f6e.png",o="/steven-blogs/assets/sysop14_2-ef1d8bf4.png",e={},c=t('<h1 id="c-设计多功能关机程序" tabindex="-1"><a class="header-anchor" href="#c-设计多功能关机程序" aria-hidden="true">#</a> C#设计多功能关机程序</h1><blockquote><p>www.wenhui.org 11/18/2002 CSharp vs Java</p></blockquote><p>许多软件都有自动关机功能，特别是在长时间下载的时候，这个功能可是使你不用以守候在计算机前面，而电脑却能按照您事先的设定自动关闭。现在我们用visual C#来编写一个多功能的关机程序。该程序具有：定时关机、倒计时关机、关机提醒、系统信息获取等四项功能, 可设定关机时间精确到秒。并且让你很快掌握Visual C#中对API的操作程序。</p><blockquote><p>熟悉windows的用户对操作系统的关机程序一定了解，您是不是觉得它的功能不是很多。许多软件都有自动关机功能，比如一些下载软件，这一功能能让您半夜踏踏实实地睡个好觉，而电脑却能按照您事先的设定自动关闭 , 您在使用电脑听音乐、看电影、或是下载等一些自动功能的时候，是不是经常为忘记关机而心痛不已。现在我们用visual C#来编写一个多功能的关机程序。该程序具有：定时关机、倒计时关机、关机提醒、系统信息获取等四项功能, 可设定关机时间精确到秒。并且让你很快掌握Visual C#中对API的操作程序。编写过程如下</p></blockquote><h2 id="一-设计关闭windows窗体" tabindex="-1"><a class="header-anchor" href="#一-设计关闭windows窗体" aria-hidden="true">#</a> 一. 设计关闭Windows窗体</h2><h3 id="_1-界面的设计" tabindex="-1"><a class="header-anchor" href="#_1-界面的设计" aria-hidden="true">#</a> 1. 界面的设计</h3><p>新建一个标准工程，向工程中增加一个Windows窗体并向窗体中添加如下控件，并分别设置其属性：</p><table><thead><tr><th>控件名</th><th>类别</th><th>Text</th><th>控件名</th><th>类别</th><th>Text</th></tr></thead><tbody><tr><td>CheckBox1</td><td>CheckBox</td><td>自动关机</td><td>GroupBox1</td><td>GroupBox</td><td>当前系统时间</td></tr><tr><td>CheckBox1</td><td>CheckBox</td><td>倒计时执行操作</td><td>GroupBox2</td><td>GroupBox</td><td>设定时间</td></tr><tr><td>CheckBox1</td><td>CheckBox</td><td>定时报警</td><td>TxtTime</td><td>TextBox</td><td></td></tr><tr><td>ButCancle</td><td>Button</td><td>取消</td><td>SetupTime</td><td>DateTimePicker</td><td></td></tr><tr><td>ButReOpen</td><td>Button</td><td>重新启动</td><td>SetupDate</td><td>DateTimePicker</td><td></td></tr><tr><td>ButClose</td><td>Button</td><td>关机</td><td>Timer1</td><td>Timer</td><td>100</td></tr><tr><td>ButSysInto</td><td>Button</td><td>系统信息</td><td>ButReLogin</td><td>Button</td><td>注消</td></tr></tbody></table><p>Windows窗体界面：</p><p><img src="'+p+`" alt="img_1"></p><p>将窗体属性中的caption设置为&quot;关闭windows&quot;，名称设置为&quot;frmmain&quot;。</p><h3 id="_2-在窗体类中引用api函数" tabindex="-1"><a class="header-anchor" href="#_2-在窗体类中引用api函数" aria-hidden="true">#</a> 2. 在窗体类中引用API函数</h3><p>API函数是构筑Windows应用程序的基石，是Windows编程的必备利器。每一种Windows应用程序开发工具都提供了间接或直接调用了Windows API函数的方法，或者是调用Windows API函数的接口，也就是说具备调用动态连接库的能力。Visual C#和其它开发工具一样也能够调用动态链接库的API函数。</p><p>在Visual C#中调用API的基本过程：</p><p>首先，在调用API之前，你必须先导入<code>System.Runtime.InteropServices</code>这个名称空间。该名称空间包含了在Visual C#中调用API的一些必要集合，具体的方法如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>
</code></pre></div><p>在导入了名称空间后，我们要声明在程序中所要用到的API函数。我们的程序主要是获取系统的相关信息，所以用到的API函数都是返回系统信息的。先给出在Visual C#中声明API的方法：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">SetWindowPos</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> hwnd <span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> hWndInsertAfter<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> X <span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> y <span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> cx<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> cy<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> wFlagslong<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>其中，&quot;DllImport&quot;属性用来从不可控代码中调用一个方法，它指定了DLL的位置，该DLL中包含调用的外部方法；&quot;kernel32&quot;设定了类库名；&quot;public&quot;指明函数的访问类型为公有的；&quot;static&quot;修饰符声明一个静态元素，而该元素属于类型本身而不是指定的对象；&quot;extern&quot;表示该方法将在工程外部执行，同时使用DllImport导入的方法必须使用&quot;extern&quot;修饰符；最后GetWindowsDirectory函数包含了两个参数，一个为StringBuilder类型的，另一个为int类型的，该方法返回的内容存在于StringBuilder类型的参数中。同时，因为我们在这里使用到了StringBuilder类，所以在程序的开始处，我们还得添加System.Text这个名称空间，方法同上。</p><p>声明其它的在程序中所要用到的API函数：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">ExitWindowsEx</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> uFlags<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> dwReserved<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;shell32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">ShellAbout</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> uFlags<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> dwReserved<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_3-增加窗体类的变量" tabindex="-1"><a class="header-anchor" href="#_3-增加窗体类的变量" aria-hidden="true">#</a> 3. 增加窗体类的变量</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">long</span></span> dwReserved<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> SHUTDOWN <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> REBOOT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> LOGOFF <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">long</span></span> sh<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> counter <span class="token punctuation">,</span> n<span class="token punctuation">;</span>
</code></pre></div><h3 id="_4-编写窗体类的方法" tabindex="-1"><a class="header-anchor" href="#_4-编写窗体类的方法" aria-hidden="true">#</a> 4. 编写窗体类的方法</h3><p>在窗体的Load(事件过程中编写如下代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">frmmain1_Load</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>用系统时间初始化组件
    Time<span class="token punctuation">.</span>Text <span class="token operator">=</span> System<span class="token punctuation">.</span>DateTime<span class="token punctuation">.</span>Today<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token operator">+</span> System<span class="token punctuation">.</span>DateTime<span class="token punctuation">.</span>Today<span class="token punctuation">.</span><span class="token function">ToLongTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在组件Timer1的OnTimer事件过程中编写如下代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 在组件Timer1的OnTimer事件过程中编写如下代码：</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Timer1_Timer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>接收当前日期和时间，用于即时显示
    <span class="token class-name"><span class="token keyword">string</span></span> CurrDate<span class="token operator">=</span>System<span class="token punctuation">.</span>DateTime<span class="token punctuation">.</span>Today<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> CurrTime<span class="token operator">=</span>System<span class="token punctuation">.</span>DateTime<span class="token punctuation">.</span>Today<span class="token punctuation">.</span><span class="token function">ToShortTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>随时检测设定的关机日期和时间是否有效
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CheckBox1<span class="token punctuation">.</span>Checked <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>CurrDate<span class="token operator">==</span> SetupDate<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> CurrTime<span class="token operator">==</span>SetupTime<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">ColseComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ColseComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    sh <span class="token operator">=</span> <span class="token function">ExitWindowsEx</span><span class="token punctuation">(</span>SHUTDOWN<span class="token punctuation">,</span> dwReserved<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Form2</span> frm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form2</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    frm<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ButReOpen_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    sh <span class="token operator">=</span> <span class="token function">ExitWindowsEx</span><span class="token punctuation">(</span>REBOOT<span class="token punctuation">,</span> dwReserved<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ButReLogin_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    sh <span class="token operator">=</span> <span class="token function">ExitWindowsEx</span><span class="token punctuation">(</span>LOGOFF<span class="token punctuation">,</span> dwReserved<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ButCancle_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ButClose_Click_1</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    sh <span class="token operator">=</span> <span class="token function">ExitWindowsEx</span><span class="token punctuation">(</span>REBOOT<span class="token punctuation">,</span> dwReserved<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="二-设计获取系统信息的windows窗体" tabindex="-1"><a class="header-anchor" href="#二-设计获取系统信息的windows窗体" aria-hidden="true">#</a> 二. 设计获取系统信息的Windows窗体</h2><h3 id="_1-界面的设计-1" tabindex="-1"><a class="header-anchor" href="#_1-界面的设计-1" aria-hidden="true">#</a> 1. 界面的设计</h3><p>向工程中增加一个Windows窗体并向窗体中添加如下控件：</p><p><img src="`+o+`" alt="img_2"></p><h3 id="_2-在窗体类中引用api函数-1" tabindex="-1"><a class="header-anchor" href="#_2-在窗体类中引用api函数-1" aria-hidden="true">#</a> 2. 在窗体类中引用API函数</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span> <span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetWindowsDirectory</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> WinDir<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> SysDir<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetSystemInfo</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">CPU_INFO</span> cpuinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GlobalMemoryStatus</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">MEMORY_INFO</span> meminfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetSystemTime</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">SYSTEMTIME_INFO</span> stinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>以上几个API的作用分别是获取系统路径，获得CPU相关信息，获得内存的相关信息，获得系统时间等。</p><h3 id="_3-定义以下各结构" tabindex="-1"><a class="header-anchor" href="#_3-定义以下各结构" aria-hidden="true">#</a> 3. 定义以下各结构</h3><p>在声明完所有的API函数后，我们发现后三个函数分别用到了CPU_INFO、MEMORY_INFO、SYSTEMTIME_INFO等结构，这些结构并非是.Net内部的，它们从何而来？其实，我们在用到以上API调用时均需用到以上结构，我们将函数调用获得的信息存放在以上的结构体中，最后返回给程序输出。这些结构体比较复杂，但是如果开发者能够熟练运用，那么整个API世界将尽在开发者的掌握之中。以下就是上述结构体的声明：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//定义CPU的信息结构</span>
<span class="token punctuation">[</span><span class="token function">StructLayout</span><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">CPU_INFO</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwOemId<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwPageSize<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> lpMinimumApplicationAddress<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> lpMaximumApplicationAddress<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwActiveProcessorMask<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwNumberOfProcessors<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwProcessorType<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwAllocationGranularity<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwProcessorLevel<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwProcessorRevision<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>定义内存的信息结构
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StructLayout</span><span class="token attribute-arguments"><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">MEMORY_INFO</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwLength<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwMemoryLoad<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwTotalPhys<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwAvailPhys<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwTotalPageFile<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwAvailPageFile<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwTotalVirtual<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwAvailVirtual<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>定义系统时间的信息结构
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StructLayout</span><span class="token attribute-arguments"><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">SYSTEMTIME_INFO</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wYear<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wMonth<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wDayOfWeek<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wDay<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wHour<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wMinute<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wSecond<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wMilliseconds<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_5-编写窗体类的方法" tabindex="-1"><a class="header-anchor" href="#_5-编写窗体类的方法" aria-hidden="true">#</a> 5. 编写窗体类的方法</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>调用GetWindowsDirectory和GetSystemDirectory函数分别取得Windows路径和系统路径
    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> nChars <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> Buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span>nChars<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetWindowsDirectory</span><span class="token punctuation">(</span>Buff<span class="token punctuation">,</span> nChars<span class="token punctuation">)</span><span class="token punctuation">;</span>
    WindowsDirectory<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;Windows路径：&quot;</span> <span class="token operator">+</span> Buff<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span>Buff<span class="token punctuation">,</span> nChars<span class="token punctuation">)</span><span class="token punctuation">;</span>
    SystemDirectory<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot; 系统路径：&quot;</span> <span class="token operator">+</span> Buff<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>调用GetSystemInfo函数获取CPU的相关信息
    <span class="token class-name">CPU_INFO</span> CpuInfo<span class="token punctuation">;</span>
    CpuInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CPU_INFO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetSystemInfo</span><span class="token punctuation">(</span><span class="token keyword">ref</span> CpuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    NumberOfProcessors<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;本计算机中有&quot;</span> <span class="token operator">+</span> CpuInfo<span class="token punctuation">.</span>dwNumberOfProcessors<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;个CPU&quot;</span><span class="token punctuation">;</span>
    ProcessorType<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;CPU的类型为&quot;</span> <span class="token operator">+</span> CpuInfo<span class="token punctuation">.</span>dwProcessorType<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ProcessorLevel<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;CPU等级为&quot;</span> <span class="token operator">+</span> CpuInfo<span class="token punctuation">.</span>dwProcessorLevel<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    OemId<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;CPU的OEM ID为&quot;</span> <span class="token operator">+</span> CpuInfo<span class="token punctuation">.</span>dwOemId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PageSize<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;CPU中的页面大小为&quot;</span> <span class="token operator">+</span> CpuInfo<span class="token punctuation">.</span>dwPageSize<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>调用GlobalMemoryStatus函数获取内存的相关信息
    <span class="token class-name">MEMORY_INFO</span> MemInfo<span class="token punctuation">;</span>
    MemInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MEMORY_INFO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GlobalMemoryStatus</span><span class="token punctuation">(</span><span class="token keyword">ref</span> MemInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    MemoryLoad<span class="token punctuation">.</span>Text <span class="token operator">=</span> MemInfo<span class="token punctuation">.</span>dwMemoryLoad<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;%的内存正在使用&quot;</span><span class="token punctuation">;</span>
    TotalPhys<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;物理内存共有&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwTotalPhys<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>
    AvailPhys<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;可使用的物理内存有&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwAvailPhys<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>
    TotalPageFile<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;交换文件总大小为&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwTotalPageFile<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>
    AvailPageFile<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;尚可交换文件大小为&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwAvailPageFile<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>
    TotalVirtual<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;总虚拟内存有&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwTotalVirtual<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>
    AvailVirtual<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;未用虚拟内存有&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwAvailVirtual<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>

file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>调用GetSystemTime函数获取系统时间信息
    <span class="token class-name">SYSTEMTIME_INFO</span> StInfo<span class="token punctuation">;</span>
    StInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SYSTEMTIME_INFO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetSystemTime</span><span class="token punctuation">(</span><span class="token keyword">ref</span> StInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Date<span class="token punctuation">.</span>Text <span class="token operator">=</span> StInfo<span class="token punctuation">.</span>wYear<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;年&quot;</span> <span class="token operator">+</span> StInfo<span class="token punctuation">.</span>wMonth<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;月&quot;</span> <span class="token operator">+</span> StInfo<span class="token punctuation">.</span>wDay<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;日&quot;</span><span class="token punctuation">;</span>
    Time<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token punctuation">(</span>StInfo<span class="token punctuation">.</span>wHour <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;点&quot;</span> <span class="token operator">+</span> StInfo<span class="token punctuation">.</span>wMinute<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;分&quot;</span> <span class="token operator">+</span> StInfo<span class="token punctuation">.</span>wSecond<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;秒&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="三-结束语" tabindex="-1"><a class="header-anchor" href="#三-结束语" aria-hidden="true">#</a> 三. 结束语</h2><p>上面介绍了Visual C#开发多功能关机程序的整个过程，该程序有一定的实用价值。通过本文的学习，我相信稍有API使用基础的开发者可以马上触类旁通，很快掌握Visual C#中对API的操作。上面给出的实例仅仅是一个简单的程序，不过有兴趣的读者可以进一步完善其功能，做出更完美的系统应用程序。</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>原作者：痕迹
来 源：本站
共有343位读者阅读过此文
</code></pre></div>`,43),l=[c];function u(k,i){return s(),a("div",null,l)}const d=n(e,[["render",u],["__file","sysop14.html.vue"]]);export{d as default};
