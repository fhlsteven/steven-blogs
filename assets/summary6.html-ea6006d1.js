import{_ as n,o as s,c as a,a as t}from"./app-d9da1b6d.js";const p={},o=t(`<h1 id="wmi问题答案集锦" tabindex="-1"><a class="header-anchor" href="#wmi问题答案集锦" aria-hidden="true">#</a> WMI问题答案集锦</h1><blockquote><p>作者：网际浪子</p></blockquote><h2 id="wmi使用技巧集" tabindex="-1"><a class="header-anchor" href="#wmi使用技巧集" aria-hidden="true">#</a> WMI使用技巧集</h2><p>很多的朋友对WMI可能见过但理解不深，我也是十分想了解关于WMI的知识，可一直找不对太合适的资料，在网上的一些资料不是有很多错误，就是讲解不清，我有空的时候将关于WMI的知识集中一下，放在这里便于大家学习。本贴会不断增加。</p><h3 id="_1、-什么是wmi" tabindex="-1"><a class="header-anchor" href="#_1、-什么是wmi" aria-hidden="true">#</a> 1、 什么是WMI</h3><p>WMI是英文Windows Management Instrumentation的简写，它的功能主要是：访问本地主机的一些信息和服务，可以管理远程计算机（当然你必须要拥有足够的权限），比如：重启，关机，关闭进程，创建进程等。</p><h3 id="_2、-如何用wmi获得本地磁盘的信息" tabindex="-1"><a class="header-anchor" href="#_2、-如何用wmi获得本地磁盘的信息" aria-hidden="true">#</a> 2、 如何用WMI获得本地磁盘的信息？</h3><p>首先要在VS.NET中创建一个项目，然后在添加引用中引用一个.net的装配件：System.Management.dll,这样你的项目才能使用WMI。代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Management</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Sample_ManagementObject</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">SelectQuery</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SelectQuery</span><span class="token punctuation">(</span><span class="token string">&quot;Select * From Win32_LogicalDisk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ManagementObjectSearcher</span> searcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementObjectSearcher</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementBaseObject</span> disk <span class="token keyword">in</span> searcher<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span> <span class="token operator">+</span> disk<span class="token punctuation">[</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> disk<span class="token punctuation">[</span><span class="token string">&quot;DriveType&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> disk<span class="token punctuation">[</span><span class="token string">&quot;VolumeName&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>disk[&quot;DriveType&quot;]</code> 的返回值意义如下:</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>1 No type
2 Floppy disk
3 Hard disk
4 Removable drive or network drive
5 CD-ROM
6 RAM disk
</code></pre></div><h3 id="_3、如何用wmi获得指定磁盘的容量" tabindex="-1"><a class="header-anchor" href="#_3、如何用wmi获得指定磁盘的容量" aria-hidden="true">#</a> 3、如何用WMI获得指定磁盘的容量？</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Management</span><span class="token punctuation">;</span>

<span class="token comment">// This example demonstrates reading a property of a ManagementObject.</span>
<span class="token keyword">class</span> <span class="token class-name">Sample_ManagementObject</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">ManagementObject</span> disk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementObject</span><span class="token punctuation">(</span><span class="token string">&quot;win32_logicaldisk.deviceid=\\&quot;c:\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        disk<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Logical Disk Size = &quot;</span> <span class="token operator">+</span> disk<span class="token punctuation">[</span><span class="token string">&quot;Size&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_4、-如何列出机器中所有的共享资源" tabindex="-1"><a class="header-anchor" href="#_4、-如何列出机器中所有的共享资源" aria-hidden="true">#</a> 4、 如何列出机器中所有的共享资源？</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Management</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">TestApp</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">STAThread</span></span><span class="token punctuation">]</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">ManagementObjectSearcher</span> searcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementObjectSearcher</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM Win32_share&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> share <span class="token keyword">in</span> searcher<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>share<span class="token punctuation">.</span><span class="token function">GetText</span><span class="token punctuation">(</span>TextFormat<span class="token punctuation">.</span>Mof<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>别忘记在引用中把<code>System.Management</code>添加进来。</p><h2 id="_5、-怎样写程控制让系统中的某个文件夹共享或取消共享" tabindex="-1"><a class="header-anchor" href="#_5、-怎样写程控制让系统中的某个文件夹共享或取消共享" aria-hidden="true">#</a> 5、 怎样写程控制让系统中的某个文件夹共享或取消共享.？</h2><p>首先，这需要以有相应权限的用户登录系统才行。然后，试试下面的代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Management</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">CreateShare</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">ManagementClass</span> _class <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementPath</span><span class="token punctuation">(</span><span class="token string">&quot;Win32_Share&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;C:\\\\Temp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;我的共享&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;Dot Net 实现的共享&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        _class<span class="token punctuation">.</span><span class="token function">InvokeMethod</span><span class="token punctuation">(</span><span class="token string">&quot;create&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>将<br><code>object[] obj = {&quot;C:\\\\Temp&quot;,&quot;我的共享&quot;,0,10,&quot;Dot Net 实现的共享&quot;,&quot;&quot;};</code><br> 改为<br><code>object[] obj = {&quot;C:\\\\Temp&quot;,&quot;我的共享&quot;,0,null,&quot;Dot Net 实现的共享&quot;,&quot;&quot;};</code><br> 就可以实现授权给最多用户了。</p><h2 id="_6、-如何获得系统服务的运行状态" tabindex="-1"><a class="header-anchor" href="#_6、-如何获得系统服务的运行状态" aria-hidden="true">#</a> 6、 如何获得系统服务的运行状态？</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">ManagementObjectCollection</span> queryCollection<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> lvData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        queryCollection <span class="token operator">=</span> <span class="token function">getServiceCollection</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM Win32_Service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> queryCollection<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//create child node for operating system</span>
            lvData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> mo<span class="token punctuation">[</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lvData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> mo<span class="token punctuation">[</span><span class="token string">&quot;StartMode&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mo<span class="token punctuation">[</span><span class="token string">&quot;Started&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                lvData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Started&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                lvData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Stop&quot;</span><span class="token punctuation">;</span>
            lvData<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> mo<span class="token punctuation">[</span><span class="token string">&quot;StartName&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//create list item</span>
            <span class="token class-name">ListViewItem</span> lvItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ListViewItem</span><span class="token punctuation">(</span>lvData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            listViewServices<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>lvItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;Error: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_7、-通过wmi修改ip-而实现不用重新启动" tabindex="-1"><a class="header-anchor" href="#_7、-通过wmi修改ip-而实现不用重新启动" aria-hidden="true">#</a> 7、 通过WMI修改IP，而实现不用重新启动？</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Management</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">WmiIpChanger</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">IpChanger</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MTAThread</span></span><span class="token punctuation">]</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">ReportIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// SwitchToDHCP();</span>
            <span class="token function">SwitchToStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ReportIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;end.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchToDHCP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">ManagementBaseObject</span> inPar <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">ManagementBaseObject</span> outPar <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">&quot;Win32_NetworkAdapterConfiguration&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span>mo<span class="token punctuation">[</span><span class="token string">&quot;IPEnabled&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>

                inPar <span class="token operator">=</span> mo<span class="token punctuation">.</span><span class="token function">GetMethodParameters</span><span class="token punctuation">(</span><span class="token string">&quot;EnableDHCP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                outPar <span class="token operator">=</span> mo<span class="token punctuation">.</span><span class="token function">InvokeMethod</span><span class="token punctuation">(</span><span class="token string">&quot;EnableDHCP&quot;</span><span class="token punctuation">,</span> inPar<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchToStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">ManagementBaseObject</span> inPar <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">ManagementBaseObject</span> outPar <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">&quot;Win32_NetworkAdapterConfiguration&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span>mo<span class="token punctuation">[</span><span class="token string">&quot;IPEnabled&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>

                inPar <span class="token operator">=</span> mo<span class="token punctuation">.</span><span class="token function">GetMethodParameters</span><span class="token punctuation">(</span><span class="token string">&quot;EnableStatic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                inPar<span class="token punctuation">[</span><span class="token string">&quot;IPAddress&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;192.168.1.1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
                inPar<span class="token punctuation">[</span><span class="token string">&quot;SubnetMask&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;255.255.255.0&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
                outPar <span class="token operator">=</span> mo<span class="token punctuation">.</span><span class="token function">InvokeMethod</span><span class="token punctuation">(</span><span class="token string">&quot;EnableStatic&quot;</span><span class="token punctuation">,</span> inPar<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReportIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;****** Current IP addresses:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">&quot;Win32_NetworkAdapterConfiguration&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span>mo<span class="token punctuation">[</span><span class="token string">&quot;IPEnabled&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>

                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0}\\n SVC: &#39;{1}&#39; MAC: [{2}]&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span>mo<span class="token punctuation">[</span><span class="token string">&quot;Caption&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                 <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span>mo<span class="token punctuation">[</span><span class="token string">&quot;ServiceName&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span>mo<span class="token punctuation">[</span><span class="token string">&quot;MACAddress&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> addresses <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>mo<span class="token punctuation">[</span><span class="token string">&quot;IPAddress&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> subnets <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>mo<span class="token punctuation">[</span><span class="token string">&quot;IPSubnet&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot; Addresses :&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sad <span class="token keyword">in</span> addresses<span class="token punctuation">)</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&#39;{0}&#39;&quot;</span><span class="token punctuation">,</span> sad<span class="token punctuation">)</span><span class="token punctuation">;</span>

                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot; Subnets :&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sub <span class="token keyword">in</span> subnets<span class="token punctuation">)</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&#39;{0}&#39;&quot;</span><span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_8、-如何利用wmi远程重启远程计算机" tabindex="-1"><a class="header-anchor" href="#_8、-如何利用wmi远程重启远程计算机" aria-hidden="true">#</a> 8、 如何利用WMI远程重启远程计算机？</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Management</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">WMI3</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Summary description for Class1.</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">class</span> <span class="token class-name">Class1</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Computer details retrieved using Windows Management Instrumentation (WMI)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;mailto:Written%2002/01/02%20By%20John%20O&#39;Donnell%20-%20csharpconsulting@hotmail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;=========================================================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//连接远程计算机</span>
            <span class="token class-name">ConnectionOptions</span> co <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConnectionOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            co<span class="token punctuation">.</span>Username <span class="token operator">=</span> <span class="token string">&quot;john&quot;</span><span class="token punctuation">;</span>
            co<span class="token punctuation">.</span>Password <span class="token operator">=</span> <span class="token string">&quot;john&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">System<span class="token punctuation">.</span>Management<span class="token punctuation">.</span>ManagementScope</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Management<span class="token punctuation">.</span>ManagementScope</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\\\\\192.168.1.2\\\\root\\\\cimv2&quot;</span><span class="token punctuation">,</span> co<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//查询远程计算机</span>
            <span class="token class-name">System<span class="token punctuation">.</span>Management<span class="token punctuation">.</span>ObjectQuery</span> oq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Management<span class="token punctuation">.</span>ObjectQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM Win32_OperatingSystem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">ManagementObjectSearcher</span> query1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementObjectSearcher</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> oq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ManagementObjectCollection</span> queryCollection1 <span class="token operator">=</span> query1<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> queryCollection1<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> ss <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
                mo<span class="token punctuation">.</span><span class="token function">InvokeMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Reboot&quot;</span><span class="token punctuation">,</span> ss<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mo<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_9、-利用wmi创建一个新的进程" tabindex="-1"><a class="header-anchor" href="#_9、-利用wmi创建一个新的进程" aria-hidden="true">#</a> 9、 利用WMI创建一个新的进程？</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Management</span><span class="token punctuation">;</span>

<span class="token comment">// This sample demonstrates invoking a WMI method using parameter objects</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvokeMethod</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//Get the object on which the method will be invoked</span>
        <span class="token class-name">ManagementClass</span> processClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">&quot;Win32_Process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Get an input parameters object for this method</span>
        <span class="token class-name">ManagementBaseObject</span> inParams <span class="token operator">=</span> processClass<span class="token punctuation">.</span><span class="token function">GetMethodParameters</span><span class="token punctuation">(</span><span class="token string">&quot;Create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Fill in input parameter values</span>
        inParams<span class="token punctuation">[</span><span class="token string">&quot;CommandLine&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;calc.exe&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">//Execute the method</span>
        <span class="token class-name">ManagementBaseObject</span> outParams <span class="token operator">=</span> processClass<span class="token punctuation">.</span><span class="token function">InvokeMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Create&quot;</span><span class="token punctuation">,</span> inParams<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Display results</span>
        <span class="token comment">//Note: The return code of the method is provided in the &quot;returnvalue&quot; property of the outParams object</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Creation of calculator process returned: &quot;</span> <span class="token operator">+</span> outParams<span class="token punctuation">[</span><span class="token string">&quot;returnvalue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Process ID: &quot;</span> <span class="token operator">+</span> outParams<span class="token punctuation">[</span><span class="token string">&quot;processId&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_10、-如何通过wmi终止一个进程" tabindex="-1"><a class="header-anchor" href="#_10、-如何通过wmi终止一个进程" aria-hidden="true">#</a> 10、 如何通过WMI终止一个进程？</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Management</span><span class="token punctuation">;</span>

<span class="token comment">// This example demonstrates how to stop a system service. </span>
<span class="token keyword">class</span> <span class="token class-name">Sample_InvokeMethodOptions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">ManagementObject</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementObject</span><span class="token punctuation">(</span><span class="token string">&quot;win32_service=\\&quot;winmgmt\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InvokeMethodOptions</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvokeMethodOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        options<span class="token punctuation">.</span>Timeout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeSpan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ManagementBaseObject</span> outParams <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">InvokeMethod</span><span class="token punctuation">(</span><span class="token string">&quot;StopService&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Return Status = &quot;</span> <span class="token operator">+</span> outParams<span class="token punctuation">[</span><span class="token string">&quot;Returnvalue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_11、-如何用wmi-来获取远程机器的目录以及文件-比如如何列出一个目录下的所有文件-或者所有子目录-如何删除-舔加-更改文件" tabindex="-1"><a class="header-anchor" href="#_11、-如何用wmi-来获取远程机器的目录以及文件-比如如何列出一个目录下的所有文件-或者所有子目录-如何删除-舔加-更改文件" aria-hidden="true">#</a> 11、 如何用WMI 来获取远程机器的目录以及文件.比如如何列出一个目录下的所有文件,或者所有子目录;如何删除,舔加,更改文件?</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Management</span><span class="token punctuation">;</span>

<span class="token comment">// This example demonstrates reading a property of a ManagementObject.</span>
<span class="token keyword">class</span> <span class="token class-name">Sample_ManagementObject</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">ManagementObject</span> disk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementObject</span><span class="token punctuation">(</span><span class="token string">&quot;win32_logicaldisk.deviceid=\\&quot;c:\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        disk<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Logical Disk Size = &quot;</span> <span class="token operator">+</span> disk<span class="token punctuation">[</span><span class="token string">&quot;Size&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_12、-参考资料" tabindex="-1"><a class="header-anchor" href="#_12、-参考资料" aria-hidden="true">#</a> 12、 参考资料</h2><p>可以参考下列内容：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>msdn WMI SDK:
http://msdn.microsoft.com/library/default.asp?url=/library/en-  us/wmisdk/wmi/wmi_start_page.asp

WMI使用说明（csdn）:
http://www.csdn.net/develop/article/15/15346.shtm

WMI技术的应用 for .net（csdn）:
http://www.csdn.net/develop/article/16/16419.shtm

在.NET中轻松获取系统信息(1) －WMI篇（csdn）:
http://www.csdn.net/develop/article/15/15744.shtm
</code></pre></div><p>😃</p><h2 id="_13、-一些技巧" tabindex="-1"><a class="header-anchor" href="#_13、-一些技巧" aria-hidden="true">#</a> 13、 一些技巧</h2><p>我使用WMI可以取出网卡的MAC地址，CPU的系列号，主板的系列号，其中主板的系列号已经核对过没有错的，其余的有待于验证，因为我使用的是笔记本，笔记本背面有一个主板的系列号，所以可以肯定主板系列号没有问题</p><h3 id="网卡的mac地址" tabindex="-1"><a class="header-anchor" href="#网卡的mac地址" aria-hidden="true">#</a> 网卡的MAC地址</h3><p><code>SELECT MACAddress FROM Win32_NetworkAdapter WHERE ((MACAddress Is Not NULL) AND (Manufacturer &lt;&gt; &#39;Microsoft&#39;))</code></p><p>结果：<code>08:00:46:63:FF:8C</code></p><h3 id="cpu的系列号" tabindex="-1"><a class="header-anchor" href="#cpu的系列号" aria-hidden="true">#</a> CPU的系列号</h3><p><code>Select ProcessorId From Win32_Processor</code></p><p>结果：<code>3FEBF9FF00000F24</code></p><h3 id="主板的系列号" tabindex="-1"><a class="header-anchor" href="#主板的系列号" aria-hidden="true">#</a> 主板的系列号</h3><p><code>Select SerialNumber From Win32_BIOS</code></p><p>结果：<code>28362630-3700521</code></p><h3 id="获取硬盘id" tabindex="-1"><a class="header-anchor" href="#获取硬盘id" aria-hidden="true">#</a> 获取硬盘ID</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">String</span> HDid<span class="token punctuation">;</span>
<span class="token class-name">ManagementClass</span> cimobject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">&quot;Win32_DiskDrive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> cimobject<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    HDid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span>mo<span class="token punctuation">.</span>Properties<span class="token punctuation">[</span><span class="token string">&quot;Model&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">;</span>
    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>HDid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_14、-一个使用wmi后的异常处理的问题" tabindex="-1"><a class="header-anchor" href="#_14、-一个使用wmi后的异常处理的问题" aria-hidden="true">#</a> 14、 一个使用WMI后的异常处理的问题</h2><p>下面是我整理的一段代码.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">ManagementObjectCollection</span> queryCollection1<span class="token punctuation">;</span>
<span class="token class-name">ConnectionOptions</span> co <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConnectionOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
co<span class="token punctuation">.</span>Username <span class="token operator">=</span> <span class="token string">&quot;administrator&quot;</span><span class="token punctuation">;</span>
co<span class="token punctuation">.</span>Password <span class="token operator">=</span> <span class="token string">&quot;111&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token class-name">System<span class="token punctuation">.</span>Management<span class="token punctuation">.</span>ManagementScope</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Management<span class="token punctuation">.</span>ManagementScope</span><span class="token punctuation">(</span><span class="token string">@&quot;\\\\csnt3\\root\\cimv2&quot;</span><span class="token punctuation">,</span> co<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System<span class="token punctuation">.</span>Management<span class="token punctuation">.</span>ObjectQuery</span> oq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Management<span class="token punctuation">.</span>ObjectQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM Win32_OperatingSystem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ManagementObjectSearcher</span> query1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementObjectSearcher</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> oq<span class="token punctuation">)</span><span class="token punctuation">;</span>

    queryCollection1 <span class="token operator">=</span> query1<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> queryCollection1<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> ss <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        mo<span class="token punctuation">.</span><span class="token function">InvokeMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Reboot&quot;</span><span class="token punctuation">,</span> ss<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mo<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ee<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_15、windows-管理规范-wmi-是可伸缩的系统管理结构-它采用一个统一的、基于标准的、可扩展的面向对象接口。wmi-为您提供与系统管理信息和基础-wmi-api-交互的标准方法。wmi-主要由系统管理应用程序开发人员和管理员用来访问和操作系统管理信息" tabindex="-1"><a class="header-anchor" href="#_15、windows-管理规范-wmi-是可伸缩的系统管理结构-它采用一个统一的、基于标准的、可扩展的面向对象接口。wmi-为您提供与系统管理信息和基础-wmi-api-交互的标准方法。wmi-主要由系统管理应用程序开发人员和管理员用来访问和操作系统管理信息" aria-hidden="true">#</a> 15、Windows 管理规范 (WMI) 是可伸缩的系统管理结构，它采用一个统一的、基于标准的、可扩展的面向对象接口。WMI 为您提供与系统管理信息和基础 WMI API 交互的标准方法。WMI 主要由系统管理应用程序开发人员和管理员用来访问和操作系统管理信息</h2><p>WMI 可用于生成组织和管理系统信息的工具，使管理员或系统管理人员能够更密切地监视系统活动。例如，可以使用 WMI 开发一个应用程序，用于在 Web 服务器崩溃时呼叫管理员。</p><h3 id="将-wmi-与-net-框架一起使用" tabindex="-1"><a class="header-anchor" href="#将-wmi-与-net-框架一起使用" aria-hidden="true">#</a> 将 WMI 与 .NET 框架一起使用</h3><p>WMI 提供了大量的规范以便为许多高端应用程序（例如，Microsoft Exchange、Microsoft SQL Server 和 Microsoft Internet 信息服务 (IIS)）实现几乎任何管理任务。管理员可以执行下列任务：</p><ul><li>监视应用程序的运行状况。</li><li>检测瓶颈或故障。</li><li>管理和配置应用程序。</li><li>查询应用程序数据（使用对象关系的遍历和查询）。</li><li>执行无缝的本地或远程管理操作。</li></ul><p>WMI 结构由以下三层组成：</p><ul><li>客户端 使用 WMI 执行操作（例如，读取管理详细信息、配置系统和预订事件）的软件组件。</li><li>对象管理器 提供程序与客户端之间的中间装置，它提供一些关键服务，如标准事件发布和预订、事件筛选、查询引擎等。</li><li>提供程序 软件组件，它们捕获实时数据并将其返回到客户端应用程序，处理来自客户端的方法调用并将客户端链接到所管理的基础结构。</li></ul><p>通过定义完善的架构向客户端和应用程序无缝地提供了数据和事件以及配置系统的能力。在 .NET 框架中，System.Management 命名空间提供了用于遍历 WMI 架构的公共类。</p><p>除了 .NET 框架，还需要在计算机上安装 WMI 才能使用该命名空间中的管理功能。如果使用的是 Windows Millennium Edition、Windows 2000 或 Windows XP，那么已经安装了 WMI。否则，将需要从 MSDN 下载 WMI。</p><h3 id="用-system-management-访问管理信息" tabindex="-1"><a class="header-anchor" href="#用-system-management-访问管理信息" aria-hidden="true">#</a> 用 System.Management 访问管理信息</h3><p>System.Management 命名空间是 .NET 框架中的 WMI 命名空间。此命名空间包括下列支持 WMI 操作的第一级类对象：</p><ul><li>ManagementObject 或 ManagementClass：分别为单个管理对象或类。</li><li>ManagementObjectSearcher：用于根据指定的查询或枚举检索 ManagementObject 或 ManagementClass 对象的集合。</li><li>ManagementEventWatcher：用于预订来自 WMI 的事件通知。</li><li>ManagementQuery：用作所有查询类的基础。</li></ul><p>System.Management 类的使用编码范例对 .NET 框架环境很适合，并且 WMI 在任何适当的时候均使用标准基框架。例如，WMI 广泛利用 .NET 集合类并使用推荐的编码模式，如 .NET 异步操作的“委托”模式。因此，使用 .NET 框架的开发人员可以使用他们的当前技能访问有关计算机或应用程序的管理信息。</p><p>请参见<br> 使用 WMI 管理应用程序 | 检索管理对象的集合 | 查询管理信息 | 预订和使用管理事件 | 执行管理对象的方法 | 远程处理和连接选项 | 使用强类型对象</p><h4 id="获取cpu序列号代码" tabindex="-1"><a class="header-anchor" href="#获取cpu序列号代码" aria-hidden="true">#</a> 获取CPU序列号代码</h4><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> cpuInfo <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token comment">//cpu序列号</span>
<span class="token class-name">ManagementClass</span> cimobject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">&quot;Win32_Processor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> cimobject<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cpuInfo <span class="token operator">=</span> mo<span class="token punctuation">.</span>Properties<span class="token punctuation">[</span><span class="token string">&quot;ProcessorId&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>cpuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="获取网卡硬件地址" tabindex="-1"><a class="header-anchor" href="#获取网卡硬件地址" aria-hidden="true">#</a> 获取网卡硬件地址</h4><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Management</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">&quot;Win32_NetworkAdapterConfiguration&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span>mo<span class="token punctuation">[</span><span class="token string">&quot;IPEnabled&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;MAC address\\t{0}&quot;</span><span class="token punctuation">,</span> mo<span class="token punctuation">[</span><span class="token string">&quot;MacAddress&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mo<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="获取硬盘id-1" tabindex="-1"><a class="header-anchor" href="#获取硬盘id-1" aria-hidden="true">#</a> 获取硬盘ID</h4><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">String</span> HDid<span class="token punctuation">;</span>
<span class="token class-name">ManagementClass</span> cimobject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">&quot;Win32_DiskDrive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> cimobject<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    HDid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span>mo<span class="token punctuation">.</span>Properties<span class="token punctuation">[</span><span class="token string">&quot;Model&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">;</span>
    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>HDid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_16、在-net中轻松获取系统信息-1-wmi篇" tabindex="-1"><a class="header-anchor" href="#_16、在-net中轻松获取系统信息-1-wmi篇" aria-hidden="true">#</a> 16、在.NET中轻松获取系统信息(1) －WMI篇</h2><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>Montaque
申明：
    1、个人的一点心得，仅供参考
    2、转载时候，请保留原本。
</code></pre></div><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>不知道大家有没有这种体会？有时候为了获取系统一点点信息，比如考虑一下操作系统的版本号，或者当前屏幕的分辨率。其实说到底就是读操作系统某个方面的一个属性值而已，然后就看到我们的程序中密密麻麻的Win32 API申明，调用，代码的可读性和维护性不言而喻。到了.NET，微软提供了更为丰富的类，有很多以前要调用API的方法可以在.NET中轻而易举的调用实现。今天简单介绍一个在.NET中如何通过与WMI（Windows 管理规范）的通讯，从而得到获取信息的目的。</p><h3 id="主要思路" tabindex="-1"><a class="header-anchor" href="#主要思路" aria-hidden="true">#</a> 主要思路</h3><p>举一个获取操作系统共享目录和获取主板号的例子，介绍如何利用System.Managment下面的类获取系统相关的信息：</p><h3 id="正文" tabindex="-1"><a class="header-anchor" href="#正文" aria-hidden="true">#</a> 正文</h3><p>WMI（Windows管理规范：Windows Management Instrumentation）是Microsoft基于Web的企业管理（WBEM）的实现，同时也是一种基于标准的系统管理接口。WMI最早出现在Microsoft Windows 2000系统上，但它同样可以安装在Windows NT 4和Windows 9x计算机上。WMI是一种轻松获取系统信息的强大工具。</p><p>在.NET中，有一个System.Management名空间（系统默认没有引用，我们可以手动添加引用），通过下面的Class的操作，可以查询系统软硬件的信息，先看一个简单的例子：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Imports</span> System<span class="token punctuation">.</span>Management
<span class="token keyword">Dim</span> searcher <span class="token keyword">As</span> <span class="token keyword">New</span> ManagementObjectSearcher<span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM Win32_share&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">Dim</span> share <span class="token keyword">As</span> ManagementObject
 <span class="token keyword">For</span> <span class="token keyword">Each</span> share <span class="token keyword">In</span> searcher<span class="token punctuation">.</span><span class="token keyword">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       MessageBox<span class="token punctuation">.</span>Show<span class="token punctuation">(</span>share<span class="token punctuation">.</span>GetText<span class="token punctuation">(</span>TextFormat<span class="token punctuation">.</span>Mof<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">Next</span> share
</code></pre></div><p>运行的结果是列出了所有系统当前共享的目录、以及描述等等。</p><p>分析一下上面的代码，可以看到一下几点：</p><p>1、似乎是在进行数据库操作，有点像SQL语句。其实就是SQL操作，这种语句被成WQL(WMI Query Language)，实际上是标准SQL的一个子集加上了WMI的扩展.<br> 2、WQL是个只读的查询语言，我们只能查询响应的数据，不能用UPDATE,INSERT等更新操作<br> 3、代码很简单、通俗易懂<br> 4、我们采用了一种MOF（托管对象格式）的显示。</p><p>例子二：获取当前主板的信息</p><p>上面的例子是一个软件方面的信息，下面看一个获取硬件信息的例子，获取主板的序列号以及制造商：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Dim</span> searcher <span class="token keyword">As</span> <span class="token keyword">New</span> ManagementObjectSearcher<span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM Win32_BaseBoard&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">Dim</span> share <span class="token keyword">As</span> ManagementObject
   <span class="token keyword">For</span> <span class="token keyword">Each</span> share <span class="token keyword">In</span> searcher<span class="token punctuation">.</span><span class="token keyword">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      Debug<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span><span class="token string">&quot;主板制造商:&quot;</span> <span class="token operator">&amp;</span> share<span class="token punctuation">(</span><span class="token string">&quot;Manufacturer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      Debug<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span><span class="token string">&quot;型号:&quot;</span> <span class="token operator">&amp;</span> share<span class="token punctuation">(</span><span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      Debug<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span><span class="token string">&quot;序列号:&quot;</span> <span class="token operator">&amp;</span> share<span class="token punctuation">(</span><span class="token string">&quot;SerialNumber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">Next</span> share
</code></pre></div><p>总结以及补充：</p><p>WMI类也是分层次的，具体可以参考msdn中的WMI；转向.NET平台开发的时候，最好能多看一些关于.NET新特性的介绍，这样可以大幅度的提升代码的开发效率以及运行效率。</p><h2 id="_17、一些英文的资料" tabindex="-1"><a class="header-anchor" href="#_17、一些英文的资料" aria-hidden="true">#</a> 17、一些英文的资料</h2><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>Powered by DvNews.net
来源：UNCJ.NET
阅读：301 次
日期：2003-6-30
</code></pre></div>`,92),e=[o];function c(u,l){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","summary6.html.vue"]]);export{i as default};
