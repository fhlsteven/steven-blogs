import{_ as n,o as s,c as a,a as t}from"./app-f0851ed3.js";const p={},o=t(`<h1 id="遍历一个目录" tabindex="-1"><a class="header-anchor" href="#遍历一个目录" aria-hidden="true">#</a> 遍历一个目录</h1><blockquote><p>作者： 众网友 时间： 2004-2-19</p></blockquote><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//从csdn.net上看到的，没试过</span>
<span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FolderList1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">DropDownList</span> ddl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ddlHead<span class="token punctuation">;</span>
    <span class="token class-name">ListItem</span> lt<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> sValue <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">string</span></span> sHeadDir <span class="token operator">=</span> Server<span class="token punctuation">.</span><span class="token function">MapPath</span><span class="token punctuation">(</span><span class="token string">&quot;./..&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\\\XSLTTest&quot;</span><span class="token punctuation">;</span> <span class="token comment">//文件夹路经</span>
    Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;查看&quot;</span> <span class="token operator">+</span> sHeadDir <span class="token operator">+</span> <span class="token string">&quot;目录下*.aspx文件:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>sHeadDir<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sHead <span class="token operator">=</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>sHeadDir<span class="token punctuation">,</span> <span class="token string">&quot;*.aspx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//查询指定扩展名的文件</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sHead<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sValue <span class="token operator">=</span> sHead<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sValue <span class="token operator">=</span> sValue<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span>sValue<span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sValue<span class="token punctuation">.</span>Length <span class="token operator">-</span> sValue<span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\&quot;</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sValue <span class="token operator">=</span> sValue<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            lt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ListItem</span><span class="token punctuation">(</span>sValue<span class="token punctuation">,</span> sValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ddl<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>lt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="方法2" tabindex="-1"><a class="header-anchor" href="#方法2" aria-hidden="true">#</a> 方法2</h2><p>查找文件夹sDir下的满足<code>*s*.asp</code>x的文件</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FolderList2</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sDir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> d <span class="token keyword">in</span> Directory<span class="token punctuation">.</span><span class="token function">GetDirectories</span><span class="token punctuation">(</span>sDir<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> f <span class="token keyword">in</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token string">&quot;*s*.aspx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                lstFilesFound<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">FolderList2</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Exception</span> excpt<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>excpt<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><hr><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name">TreeNode</span> <span class="token function">FillTreeNode</span><span class="token punctuation">(</span><span class="token class-name">DirectoryInfo</span> dirInfo<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TreeNode</span><span class="token punctuation">(</span>dirInfo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DirectoryInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> dis <span class="token operator">=</span> dirInfo<span class="token punctuation">.</span><span class="token function">GetDirectories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">DirectoryInfo</span> di <span class="token keyword">in</span> dis<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>Nodes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">FillTreeNode</span><span class="token punctuation">(</span>di<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">FileInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> curDirFiles <span class="token operator">=</span> dirInfo<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">FileInfo</span> fInfo <span class="token keyword">in</span> curDirFiles<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fInfo<span class="token punctuation">.</span>Extension <span class="token operator">==</span> <span class="token string">&quot;.zip&quot;</span><span class="token punctuation">)</span>
            node<span class="token punctuation">.</span>Nodes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>fInfo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//这个看上去好一些</span>
</code></pre></div><hr><p>刚写了一个类似的东东，贴出来了</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetDirs</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> strDir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">GetDotNetFiles</span><span class="token punctuation">(</span>strDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> dirs <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetDirectories</span><span class="token punctuation">(</span>strDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> dir <span class="token keyword">in</span> dirs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">GetDirs</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetDotNetFiles</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> strDir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> dirs <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>strDir<span class="token punctuation">,</span> <span class="token string">&quot;*.cs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> dir <span class="token keyword">in</span> dirs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">StreamReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">string</span></span> strContent <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            sr<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">FileStream</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>

            fs<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> st <span class="token operator">=</span> <span class="token string">&quot;//************************************************************&quot;</span> <span class="token operator">+</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">+</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UTF8Encoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fs<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

            info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UTF8Encoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>strContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fs<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

            fs<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>Text <span class="token operator">+</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">+</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> dir <span class="token operator">+</span> <span class="token string">&quot; add Comments Success&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>Text <span class="token operator">+</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">+</span> Convert<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> dir <span class="token operator">+</span> <span class="token string">&quot; add Comments Failed: --&quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><hr><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Tester</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Tester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> theDirectory <span class="token operator">=</span> <span class="token string">&quot;@c:\\WinNT&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">DirectoryInfo</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>theDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>

t<span class="token punctuation">.</span><span class="token function">ExploreDirectory</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\n{0} files in {1}directories found.\\n&quot;</span><span class="token punctuation">,</span> fileCounter<span class="token punctuation">,</span> dirCounter<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ExploreDirectory</span><span class="token punctuation">(</span><span class="token class-name">DirectoryInfo</span> dir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    indentLevel<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> indentLevel<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;[0]{1}{2}\\n&quot;</span><span class="token punctuation">,</span> indentLevel<span class="token punctuation">,</span> dir<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> dir<span class="token punctuation">.</span>LastAccessTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">FileInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fileInDir <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">FileInfo</span> file <span class="token keyword">in</span> filesInDir<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> indentLevel <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0}[{1}]Size:{2} bytes&quot;</span><span class="token punctuation">,</span>
         file<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
         file<span class="token punctuation">.</span>LastWriteTime<span class="token punctuation">,</span>
         file<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileCounte<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">DirectoryInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> directories <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">GetDirectories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">DirectoryInfo</span> newDir <span class="token keyword">in</span> directories<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dirCounter<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">ExploreDirectory</span><span class="token punctuation">(</span>newDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    indentLevel<span class="token operator">--</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> dirCounter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> indentLevel <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> fileCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre></div>`,13),c=[o];function e(u,l){return s(),a("div",null,c)}const i=n(p,[["render",e],["__file","folder3.html.vue"]]);export{i as default};
