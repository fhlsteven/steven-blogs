import{_ as n,o as a,c as s,d as t}from"./app-35fb03de.js";const p={},o=t(`<h1 id="实现运行时从字符串动态创建对象" tabindex="-1"><a class="header-anchor" href="#实现运行时从字符串动态创建对象" aria-hidden="true">#</a> 实现运行时从字符串动态创建对象</h1><p>在运行时任意指定对象的创建类型，甚至是用表示类型的名字的字符串创建所需的对象，.net Framwork的反射机制给我们带来了解决问题的方法。这里，若只需要创建一般的对象，我们可以通过<code>System.Activator</code>来实现，而较复杂的我们可以通过获取构造方法来实现。</p><p>反射Reflection 是.net中重要机制，通过反射，可以在运行时获得.net中每一个类型（包括类、结构、委派、接口、枚举）的成员，包括方法、属性、事件以及构造函数等，还可以获得每个成员的名称、限定符和参数等，有了反射，就可以对每一个类型了如指掌。如果获得了构造函数的信息，就可以直接创建对象，即使这个对象的类型在编译的时候还不知道。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// CreateNewControls 根据空间的名称，类型字符串，大小、位置去动态的生成一个控件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>targetControl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 控件加载到的容器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ctlName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>生成的控件实例名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ctlType<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>生成的控件类型字符串如（TextBox、Button等）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ctlSize<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>控件的大小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ctlLocation<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>控件的位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>生成的控件实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token return-type class-name">Control</span> <span class="token function">CreateNewControls</span><span class="token punctuation">(</span><span class="token class-name">Control<span class="token punctuation">.</span>ControlCollection</span> targetControl<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> ctlName<span class="token punctuation">,</span><span class="token class-name">Type</span> ctlType<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span> ctlSize<span class="token punctuation">,</span><span class="token class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span> ctlLocation<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Control</span> toCreate<span class="token punctuation">;</span>
    toCreate <span class="token operator">=</span> <span class="token punctuation">(</span>Control<span class="token punctuation">)</span>System<span class="token punctuation">.</span>Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>ctlType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    toCreate<span class="token punctuation">.</span>Name <span class="token operator">=</span> ctlName<span class="token punctuation">;</span>
    toCreate<span class="token punctuation">.</span>Size <span class="token operator">=</span> ctlSize<span class="token punctuation">;</span>
    toCreate<span class="token punctuation">.</span>Location <span class="token operator">=</span> ctlLocation<span class="token punctuation">;</span>
    targetControl<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>toCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> toCreate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token class-name">Size</span> cbSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Size</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Point</span> cbPoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">206</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name">Control</span> c1 <span class="token operator">=</span> <span class="token function">CreateNewControls</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">,</span><span class="token string">&quot;control1&quot;</span><span class="token punctuation">,</span>Type<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;System.Windows.Forms.CheckBox, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cbSize<span class="token punctuation">,</span>cbPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
c1<span class="token punctuation">.</span>Text <span class="token operator">=</span><span class="token string">&quot; Check Box&quot;</span><span class="token punctuation">;</span>
</code></pre></div><p>.netFramework 1.1上，</p><p><code>Type.GetType(&quot;System.Windows.Forms.CheckBox, System.Windows.Forms,Version=1.0.5000.0,Culture=neutral,PublicKeyToken=b77a5c561934e089&quot;)</code>。</p><p>我们如何取得所用<code>Windows.Form</code>程序集的版本和强名称？</p><p>可以用<code>GetType(CheckBox).AssemblyQualifiedName</code>这样的语法，一旦得到了这些信息，我们就可以将这些信息用于其它任何控件，因为他们都来自于同一个版本<code>Windows.Forms</code>程序集。</p>`,8),c=[o];function e(l,u){return a(),s("div",null,c)}const i=n(p,[["render",e],["__file","cspbase23.html.vue"]]);export{i as default};
