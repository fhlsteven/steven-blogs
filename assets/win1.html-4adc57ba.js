import{_ as n,o as s,c as a,a as p}from"./app-f0851ed3.js";const t={},o=p(`<h1 id="c-创建不规则窗体和控件" tabindex="-1"><a class="header-anchor" href="#c-创建不规则窗体和控件" aria-hidden="true">#</a> C#：创建不规则窗体和控件</h1><ul><li><a href="#win_1">C#：创建不规则窗体和控件1</a></li><li><a href="#win_2">C#：创建不规则窗体和控件2</a></li></ul><h2 id="c-创建不规则窗体和控件1" tabindex="-1"><a class="header-anchor" href="#c-创建不规则窗体和控件1" aria-hidden="true">#</a> <a id="win_1">C#：创建不规则窗体和控件1</a></h2><blockquote><p>作者：王凯明 点击：71 时间：2002-11-7</p></blockquote><p>在以前版本的Visual Basic或Visual C++中，创建不规则窗体和控件是一件很复杂的事，不仅需要调用大量API函数而且工作量也不小。不过，现在在Visual C#下，情况就完全不同了。运用Windows Forms你就可以很轻易地创建出一个不规则的窗体以及窗体上的控件。一个具有不规则窗体和控件的应用程序肯定会更吸引广大的用户，微软的Windows Media Player 7就显示出这一点。作为程序员，您一定想在自己的程序中运用这点技术吧。</p><p>程序的窗体和控件都可以以非传统的方式被创建。本文就向大家展示如何在应用程序中创建不规则窗体，以及如何在窗体上创建各式各样的自定义形状的控件。</p><p>注：创建不规则窗体和控件这个过程包含了大量的图形编程工作，所以不同的计算机因内存和显卡的不同可能会导致最终的效果有所不同。因此，在发布你的应用程序前，务必在各种不同类型的计算机上做好测试工作。</p><h3 id="实现方法" tabindex="-1"><a class="header-anchor" href="#实现方法" aria-hidden="true">#</a> 实现方法</h3><p>首先，创建一个位图文件作为程序的窗体。位图可以是任意形状的，但是位图文件区域一定要足够大，这样才能包含窗体上的所有控件。然后，你可以通过设置一些属性使该图成为程序的窗体。</p><p>把程序中的标题栏去掉，否则整个界面将显得很不协调。当然你去掉了标题栏也就去掉了它的最大化、最小化、关闭、移动窗体等功能。为了使程序仍然具有这些功能，我们需在程序中添加一些代码，这样用户就仍然可以像以前一样和程序进行交互。</p><p>因此，你需要完成如下工作：</p><ol><li>创建一个作为窗体的位图文件。</li><li>创建一个Windows应用程序，用上述位图文件作为程序的窗体同时去掉其标题栏。</li><li>添加原标题栏具有的功能所需的代码。</li></ol><h3 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤" aria-hidden="true">#</a> 具体步骤</h3><p>下面我就具体向大家介绍如何创建不规则窗体。</p><h4 id="创建一个具有不规则形状的位图文件" tabindex="-1"><a class="header-anchor" href="#创建一个具有不规则形状的位图文件" aria-hidden="true">#</a> 创建一个具有不规则形状的位图文件</h4><ol><li>用任何画图程序就可以创建不规则形状的位图，你可以使用最容易也是最方便的画图程序。</li><li>用一种颜色画出一个不规则的区域作为程序的窗体，并用另一种颜色画出该位图的背景。（你要使该不规则区域足够大。）</li><li>保存位图文件。</li></ol><h4 id="下面就是一个例子" tabindex="-1"><a class="header-anchor" href="#下面就是一个例子" aria-hidden="true">#</a> 下面就是一个例子</h4><p>在VS.net中创建一个新的工程</p><p>首先，设置窗体的背景从而建立窗体形状。</p><ol><li><p>在窗体设计器中选中窗体使之获得焦点。</p></li><li><p>在属性对话框中进行如下设置：</p><ul><li>将FormBorderStyle属性设置为None。该属性去掉了程序的标题栏，同时也除去了标题栏的功能，不过我在后面还会向大家介绍如何添加代码以恢复这些功能的。</li><li>将BackgroundImage属性设置为你创建的位图文件。你不必在工程中添加该文件，因为你一旦指定了该文件，它就会自动被添加到工程中。</li><li>将TransparencyKey属性设置为位图文件的背景颜色值（在本例中是蓝色）。该属性使得位图的背景即上图中的蓝色部分不可见，从而窗体就呈现出一个不规则的椭圆形。</li></ul></li><li><p>保存工程。按Ctrl+F5可以运行此程序。（注：因为没有标题栏，所以你可以通过Alt+F4来关闭程序）</p></li></ol><p>将FormBorderStyle属性设置为None后，程序的标题栏就被去掉了。这样，为了获得原来标题栏的功能，我们必须手动添加代码。下面我就向大家介绍如何添加代码实现关闭功能以及移动窗体的功能。</p><h4 id="实现窗体的关闭及移动" tabindex="-1"><a class="header-anchor" href="#实现窗体的关闭及移动" aria-hidden="true">#</a> 实现窗体的关闭及移动</h4><ol><li><p>往窗体上拖放一个按钮控件。</p></li><li><p>在属性对话框中，将该控件的Text属性设置为“关闭”。</p></li><li><p>双击按钮添加一个Click事件处理函数。</p></li><li><p>在代码编辑器中添加如下代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>接下来就是实现窗体的移动功能。添加以下代码来创建一个Point对象，该对象（作为一个变量）决定在什么情况下移动窗体。</p><p><code>private Point mouse_offset;</code></p></li><li><p>创建窗体的MouseDown事件的事件处理函数。为该事件添加代码后，用户就可以在任何位置移动窗体了。代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_MouseDown</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MouseEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    mouse_offset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token operator">-</span>e<span class="token punctuation">.</span>X<span class="token punctuation">,</span> <span class="token operator">-</span>e<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>创建窗体的MouseMove事件的事件处理函数。当鼠标左键被按下，同时鼠标被移动时，窗体的Location属性就被设置为新的位置了，这样窗体就被用户拖动了。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_MouseMove</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MouseEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Button <span class="token operator">==</span> MouseButtons<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Point</span> mousePos <span class="token operator">=</span> Control<span class="token punctuation">.</span>MousePosition<span class="token punctuation">;</span>
        mousePos<span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span>mouse_offset<span class="token punctuation">.</span>X<span class="token punctuation">,</span> mouse_offset<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Location <span class="token operator">=</span> mousePos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>保存工程。按Ctrl+F5可以运行该程序。现在程序的界面还是和以前的一样，不过你可以用鼠标移动窗体并通过按按钮来关闭窗体了。</p></li></ol><h2 id="c-创建不规则窗体和控件2" tabindex="-1"><a class="header-anchor" href="#c-创建不规则窗体和控件2" aria-hidden="true">#</a> <a id="win_2">C#：创建不规则窗体和控件2</a></h2><h3 id="创建自定义形状的控件" tabindex="-1"><a class="header-anchor" href="#创建自定义形状的控件" aria-hidden="true">#</a> 创建自定义形状的控件</h3><p>现在，我们已经创建了一个不规则的窗体，并实现了一些基本的移动窗体、关闭窗体的功能。然而，窗体上的按钮控件还是老一套，那么方方正正，使得整个界面不美观。接下来我就向大家介绍如何创建自定义形状的控件。</p><p>前面我们创建不规则窗体的时候用到了TransparencyKey属性，但是控件是没有该属性的，所以我们得找其他的方法来实现控件的不规则形状了。在窗体上画一个自定义形状的控件时，你需要精确的告知窗体在什么位置以及如何画该控件。在.Net Framework中有相应的类和方法来帮你实现这些，所以你不必担心具体实现。</p><p>.Net Framework中的类提供给控件一个指示说明，该指示说明能确定控件被画的形状。通过不同的指示说明，你就可以按你想要的方法来画控件了。该指示说明利用了GraphicsPath这个类，这个类代表了一系列用来画图的直线和曲线。首先，你得指定一个GraphicsPath类的对象并告知它你要画什么图形。然后，你将控件的Region属性设置为上述GraphicsPath类的对象。这样，你就可以创建任何自定义形状的控件了。</p><h4 id="步骤如下" tabindex="-1"><a class="header-anchor" href="#步骤如下" aria-hidden="true">#</a> 步骤如下</h4><ul><li>创建一个GraphicsPath类的实例对象。</li><li>指定好该对象的各项细节（如大小、形状等等）。</li><li>将控件的Region属性设置为上面建立的GraphicsPath类的实例对象。</li></ul><h4 id="创建一个像文本的按钮控件" tabindex="-1"><a class="header-anchor" href="#创建一个像文本的按钮控件" aria-hidden="true">#</a> 创建一个像文本的按钮控件</h4><ol><li><p>拖放一个按钮控件到窗体上。</p></li><li><p>在属性对话框中进行如下设置：</p><ul><li>将Name属性设置为CustomButton。</li><li>将BackColor属性设置为一个和窗体背景颜色不同的颜色值。</li><li>将其Text属性设置为空字符串。</li></ul></li><li><p>添加窗体的Paint事件的事件处理函数。</p></li><li><p>添加以下代码，用GraphicsPath类的实例对象来画控件。下面的代码以一串字符串的形式画该按钮控件，同时，程序还设置了字符串的字体、大小、风格等属性。字符串被赋给GraphicsPath类的实例对象。然后，该实例对象就被设置为按钮控件的Region属性。这样一个自定义形状的控件就完成了。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CustomButton_Paint</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>PaintEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//初始化一个GraphicsPath类的对象</span>
    <span class="token class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>GraphicsPath</span> myGraphicsPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>GraphicsPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//确定一个字符串，该字符串就是控件的形状</span>
    <span class="token class-name"><span class="token keyword">string</span></span> stringText <span class="token operator">=</span> <span class="token string">&quot;Click Me!&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//确定字符串的字体</span>
    <span class="token class-name">FontFamily</span> family <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FontFamily</span><span class="token punctuation">(</span><span class="token string">&quot;Arial&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//确定字符串的风格</span>
    <span class="token class-name"><span class="token keyword">int</span></span> fontStyle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>FontStyle<span class="token punctuation">.</span>Bold<span class="token punctuation">;</span>
    <span class="token comment">//确定字符串的高度</span>
    <span class="token class-name"><span class="token keyword">int</span></span> emSize <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>
    <span class="token comment">//确定字符串的起始位置，它是从控件开始计算而非窗体</span>
    <span class="token class-name">PointF</span> origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PointF</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//一个StringFormat对象来确定字符串的字间距以及对齐方式</span>
    <span class="token class-name">StringFormat</span> format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringFormat</span><span class="token punctuation">(</span>StringFormat<span class="token punctuation">.</span>GenericDefault<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//用AddString方法创建字符串</span>
    myGraphicsPath<span class="token punctuation">.</span><span class="token function">AddString</span><span class="token punctuation">(</span>stringText<span class="token punctuation">,</span> family<span class="token punctuation">,</span> fontStyle<span class="token punctuation">,</span> emSize<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将控件的Region属性设置为上面创建的GraphicsPath对象</span>
    CustomButton<span class="token punctuation">.</span>Region <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Region</span><span class="token punctuation">(</span>myGraphicsPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>创建按钮的Click事件的事件处理函数。添加该处理函数来改变控件的背景颜色，从而证实控件原来的那些功能没有被削减。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CustomButton_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    CustomButton<span class="token punctuation">.</span>BackColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>BlanchedAlmond<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>保存工程并运行。</p></li></ol><h4 id="进一步优化效果" tabindex="-1"><a class="header-anchor" href="#进一步优化效果" aria-hidden="true">#</a> 进一步优化效果</h4><p>以上我们运用了GraphicsPath类的实例对象来创建了自定义形状的一个按钮控件。不过我们用的是文本字符串形式的一个形状，是否可以用三角形或是圆形等形状呢？答案是肯定的。.Net Framework能为我们提供一些预先定义好了的形状以供我们在程序中使用。通过运用这些，你可以创造出几乎任意形状的控件，你还可以把它们结合起来使用以发挥更大的功能。</p><p>下面的实例就运用了四个椭圆，当它们被运用到控件上后，看起来就像人的眼睛，很有意思吧。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Paint</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>PaintEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

   <span class="token class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>GraphicsPath</span> myGraphicsPath  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D<span class="token punctuation">.</span>GraphicsPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   myGraphicsPath<span class="token punctuation">.</span><span class="token function">AddEllipse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   myGraphicsPath<span class="token punctuation">.</span><span class="token function">AddEllipse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   myGraphicsPath<span class="token punctuation">.</span><span class="token function">AddEllipse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   myGraphicsPath<span class="token punctuation">.</span><span class="token function">AddEllipse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">//改变按钮的背景颜色使之能被容易辨认</span>
   button1<span class="token punctuation">.</span>BackColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Chartreuse<span class="token punctuation">;</span>
   button1<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   button1<span class="token punctuation">.</span>Region <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Region</span><span class="token punctuation">(</span>myGraphicsPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>最后，你还得搞清楚窗体类是从System.Windows.Forms.Control类继承而来的。也就是说，由窗体设计器提供给你的窗体最终还是一个控件。因此，你能用位图文件创建一个不规则的窗体，你还能用GraphicsPath类对象来像创建自定义形状的控件那样创建不规则的窗体。有兴趣的读者不妨用此方法一试效果。</p><h4 id="一个更好的例子" tabindex="-1"><a class="header-anchor" href="#一个更好的例子" aria-hidden="true">#</a> 一个更好的例子</h4><p>下面我给大家介绍一个更好的例子，该实例的界面就和微软的Windows Media Player 7的界面差不多。不过在这个例子中，我只是介绍了如何制作出界面，并没有实现媒体播放的功能，要实现那些功能，还需要您自行完善。该实例运行的界面如下：</p><ol><li><p>将某种颜色设置为窗体的背景颜色，然后将窗体的TransparenceKey属性设置为那种颜色，同时将窗体的FormBorderStyle属性设置为None。</p></li><li><p>重载Form_Paint()函数：</p><p><code>protected override void OnPaint(PaintEventArgs e)</code>或是<code>this.Paint += new System.Windows.Form.PaintEventHandler(Form_Paint)</code>。</p></li><li><p>程序的主体部分的函数如下：</p></li></ol><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form_Paint</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Graphics</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span>
    <span class="token class-name">Rectangle</span> mainRect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">695</span><span class="token punctuation">,</span> <span class="token number">278</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Region</span> mainRegion <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Region</span><span class="token punctuation">(</span>mainRect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">SetClip</span><span class="token punctuation">(</span>mainRegion<span class="token punctuation">,</span> CombineMode<span class="token punctuation">.</span>Replace<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Point</span> point1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span> point2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span> point3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span> point4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建一个以点为元素的数组</span>
    <span class="token class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span></span> curvePoints <span class="token operator">=</span> <span class="token punctuation">{</span> point1<span class="token punctuation">,</span> point2<span class="token punctuation">,</span> point3<span class="token punctuation">,</span> point4 <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个GraphicsPath对象并添加一条曲线</span>
    <span class="token class-name">GraphicsPath</span> myPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphicsPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath<span class="token punctuation">.</span><span class="token function">AddCurve</span><span class="token punctuation">(</span>curvePoints<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath<span class="token punctuation">.</span><span class="token function">AddLine</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">378</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    point1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">378</span><span class="token punctuation">;</span> point1<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    point2<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">387</span><span class="token punctuation">;</span> point2<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    point3<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">394</span><span class="token punctuation">;</span> point3<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span></span> curvePoints2 <span class="token operator">=</span> <span class="token punctuation">{</span> point1<span class="token punctuation">,</span> point2<span class="token punctuation">,</span> point3 <span class="token punctuation">}</span><span class="token punctuation">;</span>
    myPath<span class="token punctuation">.</span><span class="token function">AddCurve</span><span class="token punctuation">(</span>curvePoints2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath<span class="token punctuation">.</span><span class="token function">AddLine</span><span class="token punctuation">(</span><span class="token number">394</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Region</span> ExcludeRegion3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Region</span><span class="token punctuation">(</span>myPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">ExcludeClip</span><span class="token punctuation">(</span>ExcludeRegion3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GraphicsPath</span> myPath3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphicsPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    point1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> point1<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span>
    point2<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span> point2<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">198</span><span class="token punctuation">;</span>
    point3<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">62</span><span class="token punctuation">;</span> point3<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">204</span><span class="token punctuation">;</span>
    point4<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span> point4<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">221</span><span class="token punctuation">;</span>

    <span class="token class-name">Point</span> point5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">248</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span> point6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">267</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span> point7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">278</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span></span> curvePoints3 <span class="token operator">=</span> <span class="token punctuation">{</span> point1<span class="token punctuation">,</span> point2<span class="token punctuation">,</span> point3<span class="token punctuation">,</span> point4<span class="token punctuation">,</span> point5<span class="token punctuation">,</span> point6<span class="token punctuation">,</span> point7 <span class="token punctuation">}</span><span class="token punctuation">;</span>
    myPath3<span class="token punctuation">.</span><span class="token function">AddCurve</span><span class="token punctuation">(</span>curvePoints3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath3<span class="token punctuation">.</span><span class="token function">AddLine</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">278</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath3<span class="token punctuation">.</span><span class="token function">AddLine</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Region</span> ExcludeRegion2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Region</span><span class="token punctuation">(</span>myPath3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">ExcludeClip</span><span class="token punctuation">(</span>ExcludeRegion2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    point1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">454</span><span class="token punctuation">;</span> point1<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    point2<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">470</span><span class="token punctuation">;</span> point2<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
    point3<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">481</span><span class="token punctuation">;</span> point3<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span>

    <span class="token class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span></span> curvePoints4 <span class="token operator">=</span> <span class="token punctuation">{</span> point1<span class="token punctuation">,</span> point2<span class="token punctuation">,</span> point3 <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">GraphicsPath</span> myPath2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphicsPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath2<span class="token punctuation">.</span><span class="token function">AddCurve</span><span class="token punctuation">(</span>curvePoints4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath2<span class="token punctuation">.</span><span class="token function">AddLine</span><span class="token punctuation">(</span><span class="token number">481</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">481</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath2<span class="token punctuation">.</span><span class="token function">AddLine</span><span class="token punctuation">(</span><span class="token number">481</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">495</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath2<span class="token punctuation">.</span><span class="token function">AddLine</span><span class="token punctuation">(</span><span class="token number">495</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">495</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Region</span> ExcludeRegion4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Region</span><span class="token punctuation">(</span>myPath2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">ExcludeClip</span><span class="token punctuation">(</span>ExcludeRegion4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GraphicsPath</span> myPath5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphicsPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    point1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">481</span><span class="token punctuation">;</span> point1<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span>
    point2<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">494</span><span class="token punctuation">;</span> point2<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">115</span><span class="token punctuation">;</span>
    point3<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">481</span><span class="token punctuation">;</span> point3<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">158</span><span class="token punctuation">;</span>

    <span class="token class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span></span> curvePoints5 <span class="token operator">=</span> <span class="token punctuation">{</span> point1<span class="token punctuation">,</span> point2<span class="token punctuation">,</span> point3 <span class="token punctuation">}</span><span class="token punctuation">;</span>
    myPath5<span class="token punctuation">.</span><span class="token function">AddCurve</span><span class="token punctuation">(</span>curvePoints5<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath5<span class="token punctuation">.</span><span class="token function">AddLine</span><span class="token punctuation">(</span><span class="token number">481</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">481</span><span class="token punctuation">,</span> <span class="token number">279</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath5<span class="token punctuation">.</span><span class="token function">AddLine</span><span class="token punctuation">(</span><span class="token number">481</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">495</span><span class="token punctuation">,</span> <span class="token number">279</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath5<span class="token punctuation">.</span><span class="token function">AddLine</span><span class="token punctuation">(</span><span class="token number">495</span><span class="token punctuation">,</span> <span class="token number">279</span><span class="token punctuation">,</span> <span class="token number">495</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Region</span> ExcludeRegion6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Region</span><span class="token punctuation">(</span>myPath5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">ExcludeClip</span><span class="token punctuation">(</span>ExcludeRegion6<span class="token punctuation">)</span><span class="token punctuation">;</span>
    point1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">;</span> point1<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span>
    point2<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">469</span><span class="token punctuation">;</span> point2<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">264</span><span class="token punctuation">;</span>
    point3<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">446</span><span class="token punctuation">;</span> point3<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">278</span><span class="token punctuation">;</span>

    <span class="token class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span></span> curvePoints6 <span class="token operator">=</span> <span class="token punctuation">{</span> point1<span class="token punctuation">,</span> point2<span class="token punctuation">,</span> point3 <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">GraphicsPath</span> myPath4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphicsPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath4<span class="token punctuation">.</span><span class="token function">AddCurve</span><span class="token punctuation">(</span>curvePoints6<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myPath4<span class="token punctuation">.</span><span class="token function">AddLine</span><span class="token punctuation">(</span><span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">277</span><span class="token punctuation">,</span> <span class="token number">495</span><span class="token punctuation">,</span> <span class="token number">279</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Region</span> ExcludeRegion5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Region</span><span class="token punctuation">(</span>myPath4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">ExcludeClip</span><span class="token punctuation">(</span>ExcludeRegion5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">695</span><span class="token punctuation">,</span> <span class="token number">278</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 重设剪切好的区域</span>
    e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">ResetClip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>该函数运用Region类和GraphicsPath类实现了程序的主界面，函数中具体的数据可能会因图片大小等原因而有所不同，至于其他的消息响应函数读者可以参看附带的源码文件（Source.rar）。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>通过本文，我们不难发现在Visual C#下创建不规则窗体以及自定义形状的控件是件相当容易的事。我们仅仅需要一幅不规则的图像就可以完成不规则窗体的创建；我们也只要用到GraphicsPath类对象就可轻易地创建出自定义形状的控件。相信读者在读完本文后，对在.Net下创建丰富的用户界面有了基本的了解。希望各位读者因此能创建出更丰富的、更赋时代特色的用户界面。</p>`,44),c=[o];function e(u,l){return s(),a("div",null,c)}const k=n(t,[["render",e],["__file","win1.html.vue"]]);export{k as default};
