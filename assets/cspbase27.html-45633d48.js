import{_ as n,o as s,c as a,a as t}from"./app-477de5b2.js";const p={},o=t(`<h1 id="c-编程实践" tabindex="-1"><a class="header-anchor" href="#c-编程实践" aria-hidden="true">#</a> C#编程实践</h1><p>最近一段时间学习使用C#编程，因为用惯了Delphi，发现C#类库还是不太完善(我用的是.Net Framework 1.0，不知道.Net Framework 1.1有哪些改进)，此外Visual Studio 2002也有不完善的地方，不知道Visual Studio 2003有哪些改进呢。比如没有提供Ini文件的访问类，比如输入框不能像Delphi那样指定默认的输入法(更正:为了控制输入法，.NET类库在<code>System.Windows.Forms.InputLanguage</code>类中提供了支持),为此我不得不写了一个<code>Ini</code>访问类和根据输入法名称切换输入法的类。</p><p>问题列表：</p><ul><li>C# Ini访问类</li><li>C# 输入法切换类</li><li>使用C#读写文件</li><li>格式化字符串</li><li>从Assemble中加载自定义资源</li><li>对StringCollection进行排序</li><li>C#Builder的Open Tools Api的Bug</li><li>使用反射动态设定组件属性</li><li>将字符串复制到剪贴板</li><li>获取程序文件的版本信息</li><li>利用反射动态加载Assembly动态执行类型方法</li><li>其他问题</li></ul><h2 id="c-ini访问类" tabindex="-1"><a class="header-anchor" href="#c-ini访问类" aria-hidden="true">#</a> C# Ini访问类</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Specialized</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">SharpPlus<span class="token punctuation">.</span>Ini</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 一个模仿Delphi的TIniFile的类</span>
    <span class="token doc-comment comment">/// 修订：1.1 修正了对中文系统的支持。</span>
    <span class="token doc-comment comment">/// 1.2 增加了UpdateFile方法,实现了对Win9x的支持</span>
    <span class="token doc-comment comment">/// 1.3 增加了读写布尔，整数的操作</span>
    <span class="token doc-comment comment">/// 1.4 修正了写Ini虽然成功，但是会抛出异常的错误</span>
    <span class="token doc-comment comment">/// 1.5 ReadString返回的是Trim后的字符串</span>
    <span class="token doc-comment comment">/// 1.6 统一并扩大了读写缓冲区的大小</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IniFile</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> FileName<span class="token punctuation">;</span> <span class="token comment">//INI文件名</span>
                                <span class="token comment">//声明读写INI文件的API函数</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">WritePrivateProfileString</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> section<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> val<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetPrivateProfileString</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> section<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> def<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> retVal<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> size<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//类的构造函数，传递INI文件名</span>
        <span class="token keyword">public</span> <span class="token function">IniFile</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> AFileName<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 判断文件是否存在</span>
            <span class="token class-name">FileInfo</span> fileInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>AFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//Todo:搞清枚举的用法</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>fileInfo<span class="token punctuation">.</span>Exists<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//|| (FileAttributes.Directory in fileInfo.Attributes))</span>
                <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApplicationException</span><span class="token punctuation">(</span><span class="token string">&quot;Ini文件不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//必须是完全路径，不能是相对路径</span>
            FileName <span class="token operator">=</span> fileInfo<span class="token punctuation">.</span>FullName<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//写INI文件</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Section<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> Ident<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> Value<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WritePrivateProfileString</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> Ident<span class="token punctuation">,</span> Value<span class="token punctuation">,</span> FileName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// Todo:抛出自定义的异常</span>
                <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApplicationException</span><span class="token punctuation">(</span><span class="token string">&quot;写Ini文件出错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//读取INI文件指定</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Section<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> Ident<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> Default<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//StringBuilder Buffer = new StringBuilder(255);</span>
            <span class="token class-name">Byte<span class="token punctuation">[</span><span class="token punctuation">]</span></span> Buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Byte</span><span class="token punctuation">[</span><span class="token number">65535</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">int</span></span> bufLen <span class="token operator">=</span> <span class="token function">GetPrivateProfileString</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> Ident<span class="token punctuation">,</span> Default<span class="token punctuation">,</span> Buffer<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">GetUpperBound</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//必须设定0（系统默认的代码页）的编码方式，否则无法支持中文</span>
            <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> Encoding<span class="token punctuation">.</span><span class="token function">GetEncoding</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> bufLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//读整数</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">ReadInteger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Section<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> Ident<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> Default<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> intStr <span class="token operator">=</span> <span class="token function">ReadString</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> Ident<span class="token punctuation">,</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>Default<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>intStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> Default<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//写整数</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteInteger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Section<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> Ident<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> Value<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">WriteString</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> Ident<span class="token punctuation">,</span> Value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//读布尔</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ReadBool</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Section<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> Ident<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> Default<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToBoolean</span><span class="token punctuation">(</span><span class="token function">ReadString</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> Ident<span class="token punctuation">,</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>Default<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> Default<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//写Bool</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteBool</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Section<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> Ident<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> Value<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">WriteString</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> Ident<span class="token punctuation">,</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//从Ini文件中，将指定的Section名称中的所有Ident添加到列表中</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReadSection</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Section<span class="token punctuation">,</span> <span class="token class-name">StringCollection</span> Idents<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Byte<span class="token punctuation">[</span><span class="token punctuation">]</span></span> Buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Byte</span><span class="token punctuation">[</span><span class="token number">16384</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//Idents.Clear();</span>

            <span class="token class-name"><span class="token keyword">int</span></span> bufLen <span class="token operator">=</span> <span class="token function">GetPrivateProfileString</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">GetUpperBound</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//对Section进行解析</span>
            <span class="token function">GetStringsFromBuffer</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">,</span> bufLen<span class="token punctuation">,</span> Idents<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetStringsFromBuffer</span><span class="token punctuation">(</span><span class="token class-name">Byte<span class="token punctuation">[</span><span class="token punctuation">]</span></span> Buffer<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> bufLen<span class="token punctuation">,</span> <span class="token class-name">StringCollection</span> Strings<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Strings<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bufLen <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">int</span></span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bufLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token class-name">String</span> s <span class="token operator">=</span> Encoding<span class="token punctuation">.</span><span class="token function">GetEncoding</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        Strings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//从Ini文件中，读取所有的Sections的名称</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReadSections</span><span class="token punctuation">(</span><span class="token class-name">StringCollection</span> SectionList<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//Note:必须得用Bytes来实现，StringBuilder只能取到第一个Section</span>
            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">65535</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">int</span></span> bufLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            bufLen <span class="token operator">=</span> <span class="token function">GetPrivateProfileString</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">,</span>
            Buffer<span class="token punctuation">.</span><span class="token function">GetUpperBound</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">GetStringsFromBuffer</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">,</span> bufLen<span class="token punctuation">,</span> SectionList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//读取指定的Section的所有Value到列表中</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReadSectionValues</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Section<span class="token punctuation">,</span> <span class="token class-name">NameValueCollection</span> Values<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">StringCollection</span> KeyList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ReadSection</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> KeyList<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Values<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key <span class="token keyword">in</span> KeyList<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Values<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">ReadString</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//清除某个Section</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EraseSection</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Section<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WritePrivateProfileString</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> FileName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApplicationException</span><span class="token punctuation">(</span><span class="token string">&quot;无法清除Ini文件中的Section&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//删除某个Section下的键</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DeleteKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Section<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> Ident<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">WritePrivateProfileString</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> Ident<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//Note:对于Win9X，来说需要实现UpdateFile方法将缓冲中的数据写入文件</span>
        <span class="token comment">//在Win NT, 2000和XP上，都是直接写文件，没有缓冲，所以，无须实现UpdateFile</span>
        <span class="token comment">//执行完对Ini文件的修改之后，应该调用本方法更新缓冲区。</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">WritePrivateProfileString</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//检查某个Section下的某个键值是否存在</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ValueExists</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Section<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> Ident<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//</span>
            <span class="token class-name">StringCollection</span> Idents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ReadSection</span><span class="token punctuation">(</span>Section<span class="token punctuation">,</span> Idents<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> Idents<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span>Ident<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//确保资源的释放</span>
        <span class="token operator">~</span><span class="token function">IniFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">UpdateFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="c-输入法切换类" tabindex="-1"><a class="header-anchor" href="#c-输入法切换类" aria-hidden="true">#</a> C# 输入法切换类</h2><p>C#的编辑组件只有ImeMode属性，没有Delphi中组件的ImeName属性，下面的类可以用来根据ImeName设定当前系统的Ime。(更正：为了控制输入法，.NET类库在System.Windows.Forms.InputLanguage类中提供了支持。)</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Win32</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">Screen</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
    <span class="token doc-comment comment">/// Ime 的摘要说明。</span>
    <span class="token doc-comment comment">/// 实现本地化输入法</span>
    <span class="token doc-comment comment">/// 参考Delphi中的实现</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ime</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">uint</span></span> <span class="token function">ActivateKeyboardLayout</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">uint</span></span> hkl<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> Flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">uint</span></span> <span class="token function">LoadKeyboardLayout</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> pwszKLID<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> Flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">uint</span></span> <span class="token function">GetKeyboardLayoutList</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> nBuff<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> List<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Hashtable</span> FImes<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">uint</span></span> KLF_ACTIVATE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">Ime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//</span>
            <span class="token comment">// TODO: 在此处添加构造函数逻辑</span>
            <span class="token comment">//</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//设定当前Ime,使用方法Ime.SetImeName(&quot;中文 (简体) - 拼音加加&quot;);</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetImeName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> ImeName<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//字符串形式</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>FImes <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token function">GetImes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">uint</span></span> id <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToUInt32</span><span class="token punctuation">(</span>FImes<span class="token punctuation">[</span>ImeName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">SetIme</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetIme</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">uint</span></span> ImeId<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//Id样式 </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ImeId <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">ActivateKeyboardLayout</span><span class="token punctuation">(</span>ImeId<span class="token punctuation">,</span> KLF_ACTIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//获得所有的Ime列表 </span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Hashtable</span> <span class="token function">GetImes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>FImes <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                FImes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token keyword">return</span> FImes<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> KbList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">uint</span></span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">uint</span></span> TotalKbLayout <span class="token operator">=</span> <span class="token function">GetKeyboardLayoutList</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> KbList<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TotalKbLayout<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> RegKey <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;System\\\\CurrentControlSet\\\\Control\\\\Keyboard Layouts\\\\{0:X8}&quot;</span><span class="token punctuation">,</span> KbList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">RegistryKey</span> rk <span class="token operator">=</span> Registry<span class="token punctuation">.</span>LocalMachine<span class="token punctuation">.</span><span class="token function">OpenSubKey</span><span class="token punctuation">(</span>RegKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>rk <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> ImeName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span>rk<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">&quot;layout text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ImeName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                FImes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ImeName<span class="token punctuation">,</span> KbList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> FImes<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="其他ide及类库问题" tabindex="-1"><a class="header-anchor" href="#其他ide及类库问题" aria-hidden="true">#</a> 其他IDE及类库问题</h2><table><thead><tr><th>Visual Studio 2002 IDE的问题</th></tr></thead><tbody><tr><td>监视窗口的变量在没有走到调试点时不允许删除。</td></tr><tr><td>不支持事件重新命名。</td></tr><tr><td>新建的窗口有时莫名其妙地就没有了标题。</td></tr><tr><td>经常启动程序后，看不到界面，必须停止调试重新运行才行。</td></tr></tbody></table><table><thead><tr><th>.Net Framework 1.0的问题</th></tr></thead><tbody><tr><td>窗体没有ActiveControl属性，这点比较不爽。</td></tr><tr><td>TabControl中的选项卡的标题页无法隐藏，因此无法用来实现专家向导的界面。</td></tr><tr><td>TreeView的Sorted属性为True时，insert一个节点会被自动排序。没有提供定制排序的功能。</td></tr><tr><td>事件传过来的坐标是系统坐标，而不是组件坐标，需要调用PointToClient转换一下才行。</td></tr><tr><td>OleDbDataReader是独占连接的方式，一个DataReader不关闭的话，其他数据集都无法使用。而Delphi的DBExpress虽然也是单向游标，但是一个组件使用时不影响其他数据组件的使用。</td></tr><tr><td>对于Access的支持非常不好，使用like进行模糊查询有时会导致缓冲区溢出。</td></tr></tbody></table><h2 id="使用c-读写文件" tabindex="-1"><a class="header-anchor" href="#使用c-读写文件" aria-hidden="true">#</a> 使用C#读写文件</h2><p>下面的代码示意了如何将一个数据集中的数据写入文件。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">try</span>
<span class="token punctuation">{</span>
    DbConn<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">OleDbDataReader</span> Reader <span class="token operator">=</span> CommandLog<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>saveFile<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>Reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">String</span> s <span class="token operator">=</span> Reader<span class="token punctuation">[</span><span class="token string">&quot;IP&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; - - &quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">DateTime</span> dt <span class="token operator">=</span> <span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span>Reader<span class="token punctuation">[</span><span class="token string">&quot;VisitDate&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//使用英美的日期格式格式化日期字符串 </span>
            <span class="token class-name">CultureInfo</span> ci <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CultureInfo</span><span class="token punctuation">(</span><span class="token string">&quot;en-US&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> VisitDate <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;dd/MMM/yyyy:hh:mm:ss&quot;</span><span class="token punctuation">,</span> ci<span class="token punctuation">)</span><span class="token punctuation">;</span>
            s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> VisitDate <span class="token operator">+</span> <span class="token string">&quot; -0700] &quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> Ref <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>Reader<span class="token punctuation">[</span><span class="token string">&quot;Referer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//如果没有Refer，则</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Ref<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">&quot;\\&quot;GET / HTTP/1.1\\&quot; 200 23989 \\&quot;&quot;</span> <span class="token operator">+</span> Ref <span class="token operator">+</span> <span class="token string">&quot;\\&quot; \\&quot;&quot;</span> <span class="token operator">+</span> Reader<span class="token punctuation">[</span><span class="token string">&quot;UserAgent&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">;</span>
                sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        sw<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">finally</span>
    <span class="token punctuation">{</span>
        Reader<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;发生异常\\n{0}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="格式化字符串" tabindex="-1"><a class="header-anchor" href="#格式化字符串" aria-hidden="true">#</a> 格式化字符串</h2><p><code>string result = String.Format(&quot;Select * from TblCategory where (ParentId={0}) order by CategoryIndex&quot;, Pid);</code></p><h2 id="c-builder-open-tools-api的bug" tabindex="-1"><a class="header-anchor" href="#c-builder-open-tools-api的bug" aria-hidden="true">#</a> C#Builder Open Tools Api的Bug</h2><ol><li>CodeDom无法获得构造函数的行号。</li><li>无法获得Internal Protected 成员。</li><li>无法将文件从项目中删除</li><li>C#Builder IOTAModuleInfo.ModuleType返回的全是空串</li><li>不支持IOTASearchOptions接口。</li></ol><h2 id="使用反射动态设定组件属性" tabindex="-1"><a class="header-anchor" href="#使用反射动态设定组件属性" aria-hidden="true">#</a> 使用反射动态设定组件属性</h2><p>通过<code>typeof(Component)</code>获得<code>Type</code>对象，然后调用<code>GetProperties</code>获得属性列表，对于特定属性可以通过<code>GetProperty</code>方法获得<code>PropertyInfo</code>对象，然后调用<code>PropertyInfo</code>对象的<code>SetValue</code>来设定值。示例如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">System<span class="token punctuation">.</span>Type</span> btnType<span class="token operator">=</span>button1<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PropertyInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> props<span class="token operator">=</span>btnType<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">PropertyInfo</span> prop <span class="token keyword">in</span> props<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>Name<span class="token operator">==</span><span class="token string">&quot;Text&quot;</span><span class="token punctuation">)</span>
        prop<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>button1<span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>要想通知IDE组件属性的变更，加下面代码示例：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">PropertyDescriptor</span> backColorProp <span class="token operator">=</span> 
TypeDescriptor<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span>Control<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;BackColor&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>backColorProp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    backColorProp<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>Control<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre></div><p>也可以通过<code>IComponentChangeService</code>来实现通知。</p><h2 id="对stringcollection进行排序" tabindex="-1"><a class="header-anchor" href="#对stringcollection进行排序" aria-hidden="true">#</a> 对<code>StringCollection</code>进行排序</h2><p><code>StringCollection</code>类对应于Delphi中的<code>TStringList</code>类，但是同<code>TStringList</code>类相比，缺少了排序的功能，为此我写了一个方法，可以对<code>StringCollection</code>进行排序。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//对StringCollection进行排序</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token class-name">StringCollection</span> Strs<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> CaseSensitive<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">IComparer</span> comparer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>CaseSensitive<span class="token punctuation">)</span>
        comparer <span class="token operator">=</span> Comparer<span class="token punctuation">.</span>DefaultInvariant<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        comparer <span class="token operator">=</span> CaseInsensitiveComparer<span class="token punctuation">.</span>DefaultInvariant<span class="token punctuation">;</span>
    <span class="token function">QuickSort</span><span class="token punctuation">(</span>Strs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Strs<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> comparer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token class-name">StringCollection</span> Strs<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> L<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> R<span class="token punctuation">,</span> <span class="token class-name">IComparer</span> comparer<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> I <span class="token operator">=</span> L<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> J <span class="token operator">=</span> R<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> P <span class="token operator">=</span> <span class="token punctuation">(</span>L <span class="token operator">+</span> R<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>comparer<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>Strs<span class="token punctuation">[</span>I<span class="token punctuation">]</span><span class="token punctuation">,</span> Strs<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                I<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>comparer<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>Strs<span class="token punctuation">[</span>J<span class="token punctuation">]</span><span class="token punctuation">,</span> Strs<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                J<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">&lt;=</span> J<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">ExchangeStrings</span><span class="token punctuation">(</span>Strs<span class="token punctuation">,</span> I<span class="token punctuation">,</span> J<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>P <span class="token operator">==</span> I<span class="token punctuation">)</span>
                    P <span class="token operator">=</span> J<span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>P <span class="token operator">==</span> J<span class="token punctuation">)</span>
                    P <span class="token operator">=</span> I<span class="token punctuation">;</span>
                I<span class="token operator">++</span><span class="token punctuation">;</span>
                J<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">&gt;</span> J<span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> J<span class="token punctuation">)</span>
            <span class="token function">QuickSort</span><span class="token punctuation">(</span>Strs<span class="token punctuation">,</span> L<span class="token punctuation">,</span> J<span class="token punctuation">,</span> comparer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        L <span class="token operator">=</span> I<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">&gt;=</span> R<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//交换字符串的位置</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ExchangeStrings</span><span class="token punctuation">(</span><span class="token class-name">StringCollection</span> Strs<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> I<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> J <span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> si <span class="token operator">=</span> Strs<span class="token punctuation">[</span>I<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> sj <span class="token operator">=</span> Strs<span class="token punctuation">[</span>J<span class="token punctuation">]</span><span class="token punctuation">;</span>
    Strs<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Strs<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>I<span class="token punctuation">,</span>sj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Strs<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>J<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Strs<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>J<span class="token punctuation">,</span>si<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="从assemble中加载自定义资源" tabindex="-1"><a class="header-anchor" href="#从assemble中加载自定义资源" aria-hidden="true">#</a> 从Assemble中加载自定义资源</h2><p>用Resourcer向Resx文件中添加图标、位图或者字符串等资源后，调用下面示例代码就可以加载资源了：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//加载资源</span>
<span class="token class-name">ResourceManager</span> rm <span class="token operator">=</span>
<span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResourceManager</span><span class="token punctuation">(</span><span class="token string">&quot;SharpPlus.Resources&quot;</span><span class="token punctuation">,</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Icon</span> LogoIcon <span class="token operator">=</span> <span class="token punctuation">(</span>Icon<span class="token punctuation">)</span>rm<span class="token punctuation">.</span><span class="token function">GetObject</span><span class="token punctuation">(</span><span class="token string">&quot;Logo.ico&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="将字符串复制到剪贴板" tabindex="-1"><a class="header-anchor" href="#将字符串复制到剪贴板" aria-hidden="true">#</a> 将字符串复制到剪贴板</h2><p><code>Clipboard.SetDataObject(&quot;Test&quot;);</code></p><h2 id="获取程序文件的版本信息" tabindex="-1"><a class="header-anchor" href="#获取程序文件的版本信息" aria-hidden="true">#</a> 获取程序文件的版本信息</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//获得运行时的Assembly的版本信息</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetAssemblyVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Assembly</span> myAssembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileVersionInfo</span> myFileVersion <span class="token operator">=</span> FileVersionInfo<span class="token punctuation">.</span><span class="token function">GetVersionInfo</span><span class="token punctuation">(</span>myAssembly<span class="token punctuation">.</span>Location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;{0}.{1}.{2}&quot;</span><span class="token punctuation">,</span> myFileVersion<span class="token punctuation">.</span>FileMajorPart<span class="token punctuation">,</span> myFileVersion<span class="token punctuation">.</span>FileMinorPart<span class="token punctuation">,</span> myFileVersion<span class="token punctuation">.</span>FileBuildPart<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="利用反射动态加载assembly动态执行类型方法" tabindex="-1"><a class="header-anchor" href="#利用反射动态加载assembly动态执行类型方法" aria-hidden="true">#</a> 利用反射动态加载Assembly动态执行类型方法</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> dllName <span class="token operator">=</span> <span class="token string">&quot;OverSeer.dll&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Type</span> t <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>dllName<span class="token punctuation">,</span> <span class="token string">&quot;uDbg.Unit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dt <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>dllName<span class="token punctuation">,</span> <span class="token string">&quot;uDbg.TNxDebugger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//MethodInfo mi=t.GetMethod(&quot;Debugger&quot;, BindingFlags.Static | BindingFlags.Public);</span>
<span class="token comment">//Object debugger=mi.Invoke(null,null);</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token comment">//动态执行静态Debugger方法</span>
debugger <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">InvokeMember</span><span class="token punctuation">(</span><span class="token string">&quot;Debugger&quot;</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>Public<span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Static <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>InvokeMethod<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//根据Assembly名称和类型名称动态获取类型元数据</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Type</span> <span class="token function">GetType</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> AssemblyName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> TypeName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">FileInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">.</span>Exists<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Assembly</span> a <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Todo:处理异常</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>TypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,37),e=[o];function c(l,u){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","cspbase27.html.vue"]]);export{i as default};
