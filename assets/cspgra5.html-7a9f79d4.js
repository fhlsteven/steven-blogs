import{_ as o,r as t,o as p,c as e,b as n,d as a,e as c,a as l}from"./app-477de5b2.js";const u={},r={id:"obja-objb和-obja-equals-objb-是否等价",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#obja-objb和-obja-equals-objb-是否等价","aria-hidden":"true"},"#",-1),i={href:"https://www.cnblogs.com/sumtec/archive/2004/07/05/21241.html",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"objA == objB",-1),d=n("code",null,"objA.Equals(objB)",-1),m=l(`<p>先问大家一个问题：<code>objA == objB</code> 和 <code>objA.Equals(objB)</code> 是否等价？答案显然是要看具体情况，或者说很可能是不等价的。</p><p>可是如果我这么问呢？<br> 对于定义<code>float A, B;</code><br> A == B 是否应该和 A.Equals(B)完全等价呢？应该是的吧？也许大家的答案有下列几个之一：</p><ol><li>Equals通常用于在==运算符重载的时候，比较引用是否相等。</li><li>Equals通常用于比较引用类型的引用是否相等。</li></ol><p>float没有运算符重载，也不是一个引用类型，甚至我也看不出有什么必要让Equals和==表现得不一样。然而我却发现这两个方法是不完全等价的！注意，我这里讨论的是A、B都是float的情况下。那么什么情况下不一样呢？当A和B都是float.NaN的情况下，==会得出false的结论，Equals会得出是true的结论。</p><p>这下子我就懵了，为什么要这样呢？按照数学定义来说，NaN之间的比较应该是false才对，因为“非数字”之间的比较是无意义的，更不可能相等啊。也许Equals想要表达的是，他们从二进制的角度上来说是相等的——两者都是非数字。</p><hr><hr><p>回复: 这个算不算是Bug？7/5/2004 1:02 PM by Ninputer</p><blockquote><p>Equals方法应该始终与op_Equality一致，但是对于内建类型，==的行为是语言规定的，可能与Equals不一致。<br> 比如在VB里面的字符串比较=运算符，就可以进行不区分大小写的比较</p></blockquote><p>回复: 这个算不算是Bug？ 7/6/2004 9:06 AM by Junfeng Zhang</p><blockquote><p>interesting. Let me ask in internal support.</p></blockquote><p>回复: 这个算不算是Bug？7/6/2004 2:32 PM by Junfeng Zhang</p><blockquote><p>我没有收到任何回答。不过我的理解是这样的。<br><br> Object.Equals()是判断两个object是否是同一个object。NaN是个常数，只有一个instance存在。所以NaN.Equals(NaN)应该返回true。<br> 而NaN == NaN是数学意义上的比较，应该是false。</p></blockquote><p>回复: 这个算不算是Bug？ 7/7/2004 12:43 AM by qqchen</p><blockquote><p>== 使用的是MSIL指令ceq，在CIL标准里面有：For floating-point number, ceq will return 0 if the numbers are unordered (either or both are NaN).</p></blockquote><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>obj <span class="token keyword">is</span> <span class="token class-name">Single</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name"><span class="token keyword">float</span></span> temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Single<span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>m_value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> m_value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">IsNaN</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">IsNaN</span><span class="token punctuation">(</span>m_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p>奇怪的是Equals, 居然显示的作了这个判断：<br><code>return IsNaN(temp) &amp;&amp; IsNaN(m_value);</code><br> 其实应该简单的返回 <code>temp == m_value</code>就行了。感觉上应该是个bug。</p></blockquote><hr><hr><p>1楼 2004-07-05 16:19 Yu</p><blockquote><p>hi，<br><br> float 是 System.Single。<br> 看看System.Single的帮助就应该知道，想判断是不是NaN，应该使用IsNaN。<br><br> 因为在帮助文件中有非常明确的说明，所以不是Bug。<br> 用==进行判断的方法本身是程序的Bug。😃<br><br> 另： 查了一下Mono的System.Single.Equals，是这样实现的。结果为真也就不奇怪了。<br></p></blockquote><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Equals <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> o<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">is</span> <span class="token class-name">System<span class="token punctuation">.</span>Single</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>IsNaN <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> IsNaN <span class="token punctuation">(</span>m_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span> <span class="token operator">==</span> m_value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>2楼 2004-07-16 21:50 温少</p><blockquote><p>==只是一个语义模型，如果没有被重载，这仅仅是：<br> 对引用类型来说，是两个内存地址的比较<br> 对两个值类型来说，是普通的值比较。<br><br> Java中，不允许运算符重载，虽然容易出错，不过概念倒是很清晰的。</p></blockquote>`,24);function q(N,_){const s=t("ExternalLinkIcon");return p(),e("div",null,[n("h1",r,[k,a(),n("a",i,[b,a("和 "),d,a("是否等价"),c(s)])]),m])}const h=o(u,[["render",q],["__file","cspgra5.html.vue"]]);export{h as default};
