import{_ as s,o as n,c as a,a as e}from"./app-f0851ed3.js";const p={},o=e(`<h1 id="用程序实现自动拨号" tabindex="-1"><a class="header-anchor" href="#用程序实现自动拨号" aria-hidden="true">#</a> 用程序实现自动拨号</h1><p>在编写网络程序时很可能用到自动拨号。比如，邮件群发软件用自动断线和拨号实现本机IP地址的更换。</p><p>要实现自动拨号，分两步：</p><ol><li>从注册表读取本机拨号链接名称；</li><li>自动拨号。</li></ol><h2 id="调用api函数从注册表读取本机拨号链接名" tabindex="-1"><a class="header-anchor" href="#调用api函数从注册表读取本机拨号链接名" aria-hidden="true">#</a> 调用API函数从注册表读取本机拨号链接名</h2><p>以前，我调用API函数从注册表中读取本机拨号链接名称。</p><p>在Module中用如下代码：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Private</span> <span class="token keyword">Declare</span> <span class="token keyword">Function</span> RegOpenKey <span class="token keyword">Lib</span> <span class="token string">&quot;advapi32.dll&quot;</span> <span class="token keyword">Alias</span> <span class="token string">&quot;RegOpenKeyA&quot;</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> hKey <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token punctuation">,</span> <span class="token keyword">ByVal</span> 　　lpSubKey <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token keyword">ByRef</span> phkResult <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token keyword">Integer</span>
<span class="token keyword">Private</span> <span class="token keyword">Declare</span> <span class="token keyword">Function</span> RegCloseKey <span class="token keyword">Lib</span> <span class="token string">&quot;advapi32.dll&quot;</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> hKey <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token keyword">Integer</span>
<span class="token keyword">Private</span> <span class="token keyword">Declare</span> <span class="token keyword">Function</span> RegEnumKey <span class="token keyword">Lib</span> <span class="token string">&quot;advapi32.dll&quot;</span> <span class="token keyword">Alias</span> <span class="token string">&quot;RegEnumKeyA&quot;</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> hKey <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token punctuation">,</span> <span class="token keyword">ByVal</span> 　　dwIndex <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token punctuation">,</span> <span class="token keyword">ByVal</span> lpName <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token keyword">ByVal</span> cbName <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token keyword">Integer</span>
　　<span class="token keyword">Const</span> HKEY_CURRENT_USER <span class="token keyword">As</span> <span class="token keyword">Integer</span> <span class="token operator">=</span> <span class="token number">&amp;H80000001</span>
　　<span class="token keyword">Const</span> ERROR_NO_MORE_ITEMS <span class="token keyword">As</span> <span class="token keyword">Short</span> <span class="token operator">=</span> <span class="token number">259</span>
　　<span class="token keyword">Const</span> ERROR_SUCCESS <span class="token keyword">As</span> <span class="token keyword">Short</span> <span class="token operator">=</span> <span class="token number">0</span>

　　<span class="token keyword">Dim</span> hKey <span class="token keyword">As</span> <span class="token keyword">Integer</span>
　　<span class="token keyword">Dim</span> i <span class="token keyword">As</span> <span class="token keyword">Integer</span>
　　<span class="token keyword">Dim</span> astr <span class="token keyword">As</span> <span class="token keyword">String</span> <span class="token operator">=</span> <span class="token keyword">New</span> <span class="token keyword">String</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>
　　<span class="token keyword">If</span> RegOpenKey<span class="token punctuation">(</span>HKEY_CURRENT_USER<span class="token punctuation">,</span> <span class="token string">&quot;RemoteAccess\\Profile&quot;</span><span class="token punctuation">,</span> hKey<span class="token punctuation">)</span> <span class="token operator">=</span> ERROR_SUCCESS <span class="token keyword">Then</span>
　　　　<span class="token keyword">While</span> RegEnumKey<span class="token punctuation">(</span>hKey<span class="token punctuation">,</span> i<span class="token punctuation">,</span> astr<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">=</span> ERROR_SUCCESS
　　　　　　MsgBox<span class="token punctuation">(</span>astr<span class="token punctuation">)</span>　　<span class="token comment">&#39;链接名称</span>
　　　　　　i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>
　　　　<span class="token keyword">End</span> <span class="token keyword">While</span>
　　　　RegCloseKey<span class="token punctuation">(</span>hKey<span class="token punctuation">)</span>
　　<span class="token keyword">End</span> <span class="token keyword">If</span>
</code></pre></div><h2 id="用registrykey-类读取链接名" tabindex="-1"><a class="header-anchor" href="#用registrykey-类读取链接名" aria-hidden="true">#</a> 用RegistryKey 类读取链接名</h2><p>RegistryKey 类表示 Windows 注册表中的项级节点。此类是注册表封装。</p><p>本文主要用到： 　　 <strong>RegistryKey.OpenSubKey 方法：用指定的写访问权限检索指定的子项。</strong></p><p>以只读方式检索子项。<br><code>[Visual Basic] Overloads Public Function OpenSubKey(String) As RegistryKey</code><br><strong>RegistryKey.GetSubKeyNames 方法： 检索包含所有子项名称的字符串数组。</strong><br><code>Public Function GetSubKeyNames() As String ()</code><br> 用RegistryKey读取链接名可以说是非常简单：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Dim</span> rk <span class="token keyword">As</span> RegistryKey <span class="token operator">=</span> <span class="token operator">_</span>
Registry<span class="token punctuation">.</span>CurrentUser<span class="token punctuation">.</span>OpenSubKey<span class="token punctuation">(</span><span class="token string">&quot;RemoteAccess\\Profile&quot;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token comment">&#39; Get the data from a specified item in the key.</span>
<span class="token keyword">Dim</span> s <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> rk<span class="token punctuation">.</span>GetSubKeyNames<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">For</span> num <span class="token keyword">As</span> <span class="token keyword">Integer</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">To</span> s<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span>
　　MsgBox<span class="token punctuation">(</span>s<span class="token punctuation">.</span>GetValue<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>　　　　　　　　　　　<span class="token comment">&#39;这就是链接名</span>
<span class="token keyword">Next</span>
</code></pre></div><h2 id="用shell实现自动拨号" tabindex="-1"><a class="header-anchor" href="#用shell实现自动拨号" aria-hidden="true">#</a> 用Shell实现自动拨号</h2><p>读取链接名后，自动拨号就非常简单了。</p><p>打开“控制面板”，“网络连接”，连接“属性”，“选项”，去掉“提示名称、密码和证书等（Ｐ）”前面的对勾。</p><p><code>shell(&quot;rasphone.exe -d&quot; &amp; linksName, AppWinStyle.Hide, True, -1)</code></p><p>启动“命令提示符”，键入 rasphone,回车，就弹出“拨号网络对话框”。</p><p>如果键入　rasphone -h,回车，弹出“拨号网络命令行”，列出rasphone的用法，比如，</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>rasphone -d　表示弹出弹号项目对话框。
rasphone -lx 在拨号快捷方式上执行命令&#39;x&#39;
</code></pre></div><p>Shell函数说明：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>AppWinStyle.Hide是sheell的参数，表示隐藏窗口并将焦点传到该窗口。
 True表示等待拨号完成。
   -1表示Shell直到程序完成才返回。
</code></pre></div><p>也可以这样：</p><p><code>shell(&quot;rasdial.exe &quot; &amp; linksName, AppWinStyle.Hide, True, -1)</code></p><p><strong>关于各种命令参数，在OS的“帮助和支持”搜索“命令行”即可查到有关说明。命令行结合Shell函数可实现极多功能，你可试一试。</strong></p><p>Shell 函数使用说明：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Public</span> <span class="token keyword">Function</span> Shell <span class="token punctuation">(</span> _ <span class="token keyword">ByVal</span> Pathname <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token operator">_</span>
　　 <span class="token keyword">Optional</span> <span class="token keyword">ByVal</span> Style <span class="token keyword">As</span> AppWinStyle <span class="token operator">=</span> AppWinStyle<span class="token punctuation">.</span>MinimizedFocus<span class="token punctuation">,</span> <span class="token operator">_</span>
　　 <span class="token keyword">Optional</span> <span class="token keyword">ByVal</span> Wait <span class="token keyword">As</span> <span class="token keyword">Boolean</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">_</span>
　　 <span class="token keyword">Optional</span> <span class="token keyword">ByVal</span> Timeout <span class="token keyword">As</span> <span class="token keyword">Integer</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">_</span>
　　 <span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token keyword">Integer</span>
</code></pre></div><p>Shell 函数的返回值取决于 Pathname 中指定的程序在 Shell 返回时是否仍在执行。如果将 Wait 设置为 True 并且程序在超时过期前结束， Shell 返回零。如果超时过期或者省略 Wait 或将它设置为 False ，则 Shell 返回程序的进程 ID。进程 ID 是标识正在运行的程序的唯一数字。</p><p>如果 Shell 函数无法启动指定的程序，则出现 System.IO.FileNotFoundException 错误。例如，当试图从使用 System.Windows.Forms 的应用程序运行 16 位程序（如 command.com ）时，可能会发生这种情况。解决办法是运行将调用所需的 16 位程序的 32 位程序。如果是 command.com ，则可以将运行 cmd.exe 作为另一种选择。</p><p>默认情况下， Shell 函数异步运行程序。这意味着用 Shell 函数启动的程序在 Shell 函数后面的语句执行前可能没有结束执行。如果想等待程序结束后再继续，请将 Wait 设置为 True 。</p><p>整个路径和文件规范应该始终用引号引起来，如以下示例所示：</p><p><code>ID = Shell (&quot;&quot;&quot;C:\\Program Files\\MyFile.exe&quot;&quot; -a -q&quot;, , True, 100000)</code></p><p>字符串内每对相邻的双引号 ( &quot;&quot; ) 被解释为字符串中的一个双引号字符。因此，前面的示例表示 Shell 函数的下列字符串：</p><p><code>&quot;C:\\Program Files\\MyFile.exe&quot; -a -q</code></p><p>如果路径没有用引号引起来，Windows 就会在 C:\\ 目录中查找名为 Program.exe 的文件，而不是在 C:\\Program Files 目录中查找 MyFile.exe 文件。</p><p>安全说明 如果路径和文件规范没有用引号引起来，那么当文件名或路径节点包含空格时，就会出现安全风险。在上面的示例中，路径节点 \\Program Files 包含一个空格。如果规范不在引号中，并且名为 Program.exe 的程序（例如通过非法的破坏）安装在 C:\\ 中，Windows 就会执行 Program.exe 程序而不是 MyFile.exe 。</p>`,36),t=[o];function l(c,k){return n(),a("div",null,t)}const d=s(p,[["render",l],["__file","netinter4.html.vue"]]);export{d as default};
