import{_ as e,o as p,c as o,a as r}from"./app-f0851ed3.js";const t={},a=r('<h1 id="net敏捷开发及常用工具" tabindex="-1"><a class="header-anchor" href="#net敏捷开发及常用工具" aria-hidden="true">#</a> .net敏捷开发及常用工具</h1><p>工欲擅其事，必先利其器，能利用工具是人与动物的最大区别。然而，大多数商业化工具价格不菲，已经加入WTO好几年了，再用盗版会给企业带来很大的不确定性，并且盗版用多了，往往会失去一种程序员的自豪感，丢掉一种文化。经过几个月的摸索，本着以下原则，偶选择了一些适合中小企业开发的工具，当作自己的工具箱：</p><p>（1）适用于中小型企业，中小型项目（&lt;500万），功能适度<br> （2）易用性好，具备必要的文档<br> （3）免费或低价</p><p>基于这些工具，慢慢形成了一套敏捷开发过程。</p><h2 id="一、工具简介" tabindex="-1"><a class="header-anchor" href="#一、工具简介" aria-hidden="true">#</a> 一、工具简介</h2><p>下面简单介绍这些工具，这些工具有些偶已经有相当的使用经验，有些正在使用，有些只是刚选定。除直接用于.net开发的工具中外，还包括一些开发相关的软件设计、项目管理工具。偶的主要开发经验是Web开发，桌面开发和原型开发，对Mobile开发不熟悉，也就没这方面的推荐了。</p><p>1，运行平台</p><p>常用的也就.net framework 1.1, 2.0, 和mono了，都是免费的。从功能、性能及安装基础来讲，自然.net framework要优于mono了。mono是开源的，.net framework类库可以反编译，从透明的角度讲两者都差不多。如果你想在非windows平台上开发，或者想研究运行时的实现，可以研究mono，否则还是用.net framework吧。</p><p>2，服务器</p><p>我用过的也就IIS5.0，IIS6.0，Apache加一个mod，还有mono的xsp，这也没啥好比较的，自然首选IIS6.0了。不过IIS虽然免费，但是至少得windows server版本才运行得爽，至少得花几千元。XP上的IIS很不爽，据说也能装全版IIS6.0，不过还是得折腾。开发用的话，用Apache加一个.net的mod，或者mono的xsp，还是挺好用的。Apache的缺点是对新版.net framework的支持较IIS6.0滞后。</p><p>3，IDE</p><p>tnnd，这个选择空间也很小。首选自然是VS 2003或2005，如果VS 2005速成版将来免费的话，偶就选定这个了，或者选价格并不算高的VS 2005 专业版。可恶速成版、专业版中没单元测试，在这里BS微软10000遍。坚决抵制VSTS版！</p><p>其它可选的有SharpDevelop和mono develop。对于不开发Web程序的初学者来说，用SharpDevelop其实也挺不错的，集成的Nant，NDoc，NUnit都是很有用的工具。SharpDevelop没断点调试功能，但熟用NUnit的话可以弥补这一不足。如果对类库理解得比较深入的话，采用SharpDevelop，生产力其实也挺高的――即使是进行Web开发。SharpDevelop的缺点之一是暂时没重构功能，在下一个版本里会有。缺点之二是内存占用比较大，还有性能比VS低得多，大项目，大程序可能不爽。我测试过，用SharpDevelop打开一个大于3M的C#源文件（嘿嘿！是csgl还是tao的，忘了），挂了；用VS 2003打开大概要花几十秒。</p><p>btw，我个人认为其实就用记事本写中小型（&lt;3000行）的C#程序，效率其实也挺高的，这时候会更加注意类的设计，思路会更清晰一些，当然，速度会慢一些。</p><p>4，类库和文档</p><p>类库是.net平台的资产。目前.net下成熟的类库比较少，和java比，最大的不足就是这里了。最常用的类库当然是.net framework了，其它各方面的类库在网上都能搜索到一些。类库的关键资产要素是dll和文档。看文档要看一手资料，第一手资料就是源代码或反编译过来的代码，然后就是各类的原始文档，一般是chm格式的。如果看源代码习惯的话，效率会很高，并且，建议用反编译工具看代码，不建议直接看源文件，原因其一是反编译工具提供了很多有用的附加功能，其二是反编译的代码比源文件更真实。常用的反编译工具是Reflector。</p><p>.net下的文档是爽死了，比javadoc的pp多了。因此在写代码的时候应该注意，多写///注释，然后用Ndoc自动生成chm文档，多爽呀。</p><p>很多开源项目提供源代码和少量的文档，但它的源代码中有大量的///注释，可用NDoc自动生成chm文档。即使没有///注释，采用NDoc生成文档也是很值的。</p><p>5，数据库</p><p>MS SQL Server Express版应该是免费的，但标准版和企业版价格还是不低的，还是用开源的好。对功能有要求就用PostgreSql，没要求就用MySql。偶现在是GIS项目用PostgreSql，一般项目用MySql。数据库管理用EMS MySQL Manager Lite和EMS PostgreSql Manager Lite，免费，好用，界面很豪华，性能还行。</p><p>6，设计与建模</p><p>偶选定的UML建模工具是JUDE，2M大，免费但不开源，比ArgoUML功能多、好用。比Visio 的UML功能不知道强大多少倍，比Together也好用。缺点就是只是建模工具，和代码不同步。另一个缺点就是不能自动生成文档。不过偶喜欢这样的工具，强大，体积小，灵活，方便。并且偶觉得它在设计时用就行了，具体的类的文档用NDoc生成。JUDE是基于java的，得安装java虚拟机。好像它跨平台也不怎么样，我在linux下没运行成功过。</p><p>开源或免费的数据库建模工具试过很多，感觉都不成熟不好用，最后选择了一个商业软件――CASE Studio 2，价格100-300美元，功能很实用，支持很多数据库，生成的文档也很pp。</p><p>7，敏捷开发工具</p><p>NUnit――单元测试。<br> NAnt――build工具。前面已经提及。<br> NDoc――文档生成。前面已经提及。<br> CruiseControl.Net ――持续集成，暂时还没用过。<br> NUnit，NAnt，NDoc用的好的话，感觉非常爽，写程序会有艺术家的感觉。</p><p>8，团队协作工具</p><p>版本管理：CVS和SVN，推荐SVN。客户端推荐用TortoiseSVN――非常可爱的小乌龟。<br> Bug管理：偶选用的是BugTracker.NET，简单，用 ASP.Net写的，小项目够用了。<br> 需求管理、项目管理、日程、经费计算与管理：还是在用Word、Outlook、Excel。要免费的话可用永中Office试用版，一样好用。</p><h2 id="二、优势" tabindex="-1"><a class="header-anchor" href="#二、优势" aria-hidden="true">#</a> 二、优势</h2><p>1，性价比高。对于10人规模的团队，看看软件成本：</p><p>运行平台：.net framework 1.1或2.0，免费<br> 服务器：1套windows 2003 server版，数千元<br> IDE：1套VS 标准版或专业版，数千元，其它用express版就行了<br> 类库和文档：免费<br> 数据库：免费。用商业数据库，让客户掏钱。<br> 设计与建模：1套CASE Studio 2就行了，数千元<br> 敏捷开发工具：免费<br> 团队协作工具：1套MS Office（带Visio的）就行了，数千元，其它人用永中。</p><p>整个下来，不足20000元。</p><p>2，易用性好</p><p>反正我的感觉是和商业软件差不多或者稍差</p><p>3，易扩展</p><p>上面工具大部分是开源的，并且很多工具之间协作性比较好，这样可以用来定制适合自己的生产线。老外的那一套生产线，比如RUP，MSF及其相关工具，除价格贵外，其灵活性也不高，别人的生产线不一定适合自己用。这时上面工具的优势就出来了。</p><h2 id="三、搭建软件生产线" tabindex="-1"><a class="header-anchor" href="#三、搭建软件生产线" aria-hidden="true">#</a> 三、搭建软件生产线</h2><p>流程1：项目管理流程</p><p>用Office管理需求。用SVN进行源代码管理和文档管理，BugTracker.NET进行 Bug管理和事务管理。尽量将程序、文件、文档的维护自动化。</p><p>流程2：开发管理流程</p><p>开发过程中所维护的文件越少越好。偶觉得应该尽量少用UML图写文档，只写最关键的部分。类的文档最好由NDoc直接生成。偶用UML工具的时间很少。写代码的过程就是类设计过程。不妨比较这两个流程：</p><p>（1）用例分析－&gt;采用UML工具设计类－&gt;由UML工具生成代码或撰写代码－&gt;重构代码，自动更新UML文档。<br> （2）用例分析－&gt;撰写代码－&gt;重构代码。第一个流程只有一个优势，就是人对图形的理解比对代码的理解更加直观，但是多了很对累赘工作。第二个流程少了很多步骤，并且可以随时根据代码逆向工程出类图出来，</p><p>我还是喜欢以代码为基础的流程。撰写代码也可分为2个过程，第一个过程是写出一个代码框架，所有的方法都是UNDO，写出属性，接口，写出///文档。这应该是设计过程。这个过程基本上只产生、维护源文件。类图可以通过visio逆向工程，类设计文档可以通过NDoc自动生成，并且提供了一个测试基础，可以根据这个测试基础写测试代码了。测试代码最好也只写个框架，但是要写好///注释，然后生成测试文档。这应该是设计过程。第二个过程是实现过程，把类文档和代码框架提交给相关人，实现、测试、重构......一切都自动进行......整个过程中只有一份东西，就是源代码，开发过程中的交付件应该都从源代码中自动生成。</p><p>数据库脚本和文档用CASE Studio 2维护。最后提交、上线、验收都很好办，所要的东西biaji一下子都出来了。要申报著作权直接从源代码和chm文档中弄一部分出来就够了。</p><p>开发的核心是源代码，所有文档应该体现在源代码的结构、关系和注释中。控制整个开发流程的核心工具是Nant。要是能把用例分析过程体现在源代码中就好了！</p><p>最后，推荐书籍：Open source .Net Development, Programming with NAnt, NUnit, NDoc and More</p><p>posted on 2005-09-21 13:54 xiaotie 阅读(1947) 评论(9) 编辑 收藏 收藏至365Key 所属分类: [专题]软件工厂</p><hr><hr><p>2005-09-21 14:21 Cavingdeep</p><blockquote><p>非常不错！：）<br><br> 要是我的话数据库建模不会花钱，唯一花钱的就是VS 2005。😦 什么时候Eclipse能支持C#呢？（估计没指望）<br><br> 其实软件都还好，很多可靠的开源或免费产品可以使用，主要花钱的在于硬件与人力！</p></blockquote><p>2005-09-21 14:29 xiaotie</p><blockquote><p>数据库我感觉还是得一个建模工具，有一个工具，避免很多东西，可以自动生成SQL脚本，生成文档，省了很多事呀。不知有没有什么免费的好用。我试用的免费的，要么不好用，要么很多数据库不支持。<br><br> 硬件成本实际上也不算什么，人力是最大的一头。不过我觉得开源用的好的话能够节省人力。</p></blockquote><p>2005-09-21 14:46 Cavingdeep</p><blockquote><p>错，所谓人力就是人的能力，人虽多，但是有能力的人却不多，如果你有10个有能力的人那么要比你拥有50个一般能力的人要强的多！所以人力其实应该是最大的成本，也是最不容易得到的！<br><br> 比如说，能把你上面提出的所有那些软件都运用的很熟悉的人就不多，没有人，工具再好也用不起来。真正能精确地运用上面那些软件的人可以说软件研发已经相当的了解了。：）</p></blockquote><p>2005-09-21 14:55 CsOver</p><blockquote><p>我只对这些软件有所了解,并继续深入其中.俺是个一般人?</p></blockquote><p>2005-09-21 15:00 xiaotie</p><blockquote><p>◎Cavingdeep<br><br> 一个月的培训吧</p></blockquote><p>2005-09-21 17:35 蛙蛙池塘</p><blockquote><p>不错，顶一个</p></blockquote><p>2005-09-22 07:07 阿良.NET</p><blockquote><p>90%我没用过。因为我是业余的，用不上。</p></blockquote><p>2005-09-22 14:03 kindsandy</p><blockquote><p>不觉得数据库建模工具有什么用，工具够用的情况下越简单越好<br> 我们就是直接在Sql Server里面建表，导成脚本后，可以用Nant自动建立数据库表结构。而且还能进行良好的版本控制，不知道那些依赖于复杂工具的人如何将数据库这部分做版本控制，各个版本之间的差异如何对比。</p></blockquote><p>2005-09-22 15:46 xiaotie</p><blockquote><p>◎kindsandy<br> 我一般是这样，先在CASE Studio 2中ER建模，索引，主键什么的都设计好，然后可以导出为<br> （1）数据库逻辑设计文档<br> （2）数据库物理设计文档<br> （3）建库，建表的sql语句<br> 这时候我再写一个sql文件，负责数据库初始化数据，添加测试数据<br><br> 这样的好处：<br> （1）始终只维护一份东西，正如非数据库开发只维护源代码，这里只维护这个建模文件就行了。数据库文档，数据库代码都是从这里导出的。数据库技术已经很成熟了，直接维护模型就可以了。<br> （2）我现在用的非SQL Server。比如，PostgreSql，这种方法最方便了。<br> （3）数据库设计不需要很复杂的版本控制，ER图很直观，就那么几页。<br></p></blockquote>',66),n=[a];function c(i,b){return p(),o("div",null,n)}const S=e(t,[["render",c],["__file","mngtools13.html.vue"]]);export{S as default};
