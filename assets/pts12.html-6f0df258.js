import{_ as e,r as o,o as t,c as p,b as n,d as a,e as c,a as l}from"./app-57d1f7b1.js";const r={},u=n("h1",{id:"threadpool-线程池-in-net",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#threadpool-线程池-in-net","aria-hidden":"true"},"#"),a(" ThreadPool（线程池） in .Net")],-1),k={href:"https://www.cnblogs.com/rickie/archive/2004/11/20/66152.html",target:"_blank",rel:"noopener noreferrer"},i=l(`<h2 id="_1-threadpool介绍-from-msdn" tabindex="-1"><a class="header-anchor" href="#_1-threadpool介绍-from-msdn" aria-hidden="true">#</a> 1. ThreadPool介绍（From MSDN）</h2><p>ThreadPool class提供了一个线程池，该线程池可用于发送工作项、处理异步 I/O、代表其他线程等待以及处理计时器。线程池允许在后台运行多个工作，而不需要为每个任务频繁地创建和销毁单独的线程，从而减少了开销。</p><p>线程池通过为应用程序提供一个由系统管理的辅助线程池使您可以更为有效地使用线程。一个线程监视排到线程池的若干个等待操作的状态。当一个等待操作完成时，线程池中的一个辅助线程就会执行对应的回调函数。</p><p>也可以将与等待操作不相关的工作项排列到线程池。若要请求由线程池中的一个线程来处理工作项，请调用 QueueUserWorkItem 方法。此方法将对将被从线程池中选定的线程调用的方法或委托的引用用作参数。一个工作项排入队列后就无法再取消它。</p><p>计时器（System.Threading.Timer）队列中的计时器以及已注册的等待操作也使用线程池。它们的回调函数也会排列到线程池。关于这部分的内容，可以参考《System.Threading.Timer类的TimerCallback 委托》。</p><p>线程池在首次创建 ThreadPool 类的实例时被创建。线程池具有每个可用处理器 25 个线程的默认限制，这可以使用 mscoree.h 文件中定义的 CorSetMaxThreads 来更改。每个线程使用默认的堆栈大小并按照默认的优先级运行。每个进程只能具有一个操作系统线程池。</p><h2 id="_2-threadpool-queueuserworkitem方法" tabindex="-1"><a class="header-anchor" href="#_2-threadpool-queueuserworkitem方法" aria-hidden="true">#</a> 2. ThreadPool.QueueUserWorkItem方法</h2><p>QueueUserWorkItem方法将指定的方法排入队列以便执行，并指定包含该方法所用数据的对象，此方法在有线程池线程变得可用时执行。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>
    <span class="token class-name">WaitCallback</span> callBack<span class="token punctuation">,</span>
    <span class="token class-name"><span class="token keyword">object</span></span> state
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>如果将方法成功排入队列，则为 true；否则为 false。如果排入队列的方法仅需要单个数据项，可以将数据项强制转换为类型 Object。如果该方法需要多个复杂数据，则必须定义包含这些数据的类。如果没有参数传入，则可以调用<code>QueueUserWorkItem(WaitCallback callBack)</code>重载。</p><p>ThreadPool提供的公共方法都是static方法，因此也不需要生成ThreadPool对象。通过QueueUserWorkItem方法在线程池中添加一个工作项目后，目前没有提供简单的方法取消。你不必建立咨监线程，只需要把相应的函数或方法依托WaitCallback委托传递给ThreadPool.QueueUserWorkItem()方法即可。而线程的创建、管理和运行等等都由系统自动完成，这就是ThreadPool的优点。</p><h2 id="_3-waitcallback委托" tabindex="-1"><a class="header-anchor" href="#_3-waitcallback委托" aria-hidden="true">#</a> 3. WaitCallback委托</h2><p><code>WaitCallback</code>委托声明线程池要执行的回调方法，回调方法的声明必须与WaitCallback委托声明具有相同的参数。</p><p>WaitCallback 表示要在 ThreadPool 线程上执行的回调方法。创建委托，方法是将回调方法传递给 WaitCallback 构造函数。您的方法必须具有此处所显示的签名。通过将 WaitCallback 委托传递给 ThreadPool.QueueUserWorkItem 来将任务排入队列以便执行。您的回调方法将在某个线程池线程可用时执行。</p><p>如果要将信息传递给回调方法，请创建包含所需信息的对象，并在将任务排入队列以便执行时将它传递给 QueueUserWorkItem。每次执行您的回调方法时，state 参数都包含此对象。</p><p>通过将一个方法打包到 WaitCallback 委托中，然后将该委托传递给 ThreadPool.QueueUserWorkItem 静态方法，在线程池中对任务进行排队。</p><h2 id="_4-demo-application-using-threadpool-class" tabindex="-1"><a class="header-anchor" href="#_4-demo-application-using-threadpool-class" aria-hidden="true">#</a> 4. Demo application using ThreadPool class</h2><p>codeproject.com上有一个不错的Demo: Proper Threading in Winforms .Net, written by Shawn Cicoria，并附有Source code。</p><p>在上述Demo程序中，不仅提供了使用ThreadPool线程池的方法，而且还演示了Thread和ThreadStart 委托的方法。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">ShowProgressDelegate</span> showProgress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ShowProgressDelegate</span><span class="token punctuation">(</span>ShowProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> imsgs <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token comment">//One Way... Using ThreadPool</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cbThreadPool<span class="token punctuation">.</span>Checked<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">,</span> showProgress<span class="token punctuation">,</span> imsgs <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">WorkerClass</span> wc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WorkerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">bool</span></span> rc <span class="token operator">=</span> ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitCallback</span><span class="token punctuation">(</span>wc<span class="token punctuation">.</span>RunProcess<span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">EnableButton</span><span class="token punctuation">(</span><span class="token operator">!</span>rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//another way.. using straight threads</span>
        <span class="token class-name">WorkerClass</span> wc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WorkerClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> showProgress<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> imsgs <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>wc<span class="token punctuation">.</span>RunProcess<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span>IsBackground <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//make them a daemon - prevent thread callback issues</span>
        t<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">EnableButton</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>另外，上述Demo程序中还调用Windows form控件的BeginInvoke方法：在创建控件的基础句柄所在线程上，用指定的参数异步执行指定委托。BeginInvoke方法在不同的线程池线程上回调指定的委托，实际上就是发起后台的调用来放置一条消息到windows form的消息循环（message loop）中。</p><p><code>public IAsyncResult BeginInvoke(Delegate, object[]);</code></p><p><code>***</code></p><p>Any questions about the demo application, please leave message below. I will try to explain it. Thanks.</p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2><p>1, MSDN, ThreadPool, QueueUserWorkItem and WaitCallback</p><p>2, Shawn Cicoria, Proper Threading in Winforms .Net, http://www.codeproject.com/csharp/winformthreading.asp</p><blockquote><p>posted on 2004-11-23 01:41 Rickie 阅读(485) 评论(3)</p></blockquote><hr><p>2004-11-23 23:44 msolap</p><blockquote><p>进一步解释最后一段，通常Delegate的BeginInvoke异步执行都是由线程池来执行的。由于窗口代码不能由线程池执行，所以 System.Windows.Forms下的Control类特别提供了一个BeginInvoke，以达到异步执行的效果，且由创建窗口的线程执行(这就是为什么要放一条消息，而不是直接用ThreadPool的Queue...方法。)</p></blockquote><p>2004-11-24 02:25 Rickie</p><blockquote><p>Good. Thanks, msolap.</p></blockquote><p>2004-11-30 21:10 Flier Lu</p><blockquote><p>CLR自带的这个线程池支持巨弱，而且还是静态实现，真不知BCL team怎么想的。网上有介绍通过IOCP实现线程池的，如果不考虑win9x兼容性则是一种非常好的解决方法。配合异步socket之类技术，可以弄出效率高而且结构优雅的网络服务器解决方案。我正在整一个这类参考实现，看看周末有时间弄篇文章出来讨论。</p></blockquote>`,35);function d(h,m){const s=o("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[a("在多线程的程序中，经常会出现两种情况。一种情况下，应用程序中的线程把大部分的时间花费在等待状态，等待某个事件发生，然后才能给予响应；而另外一种情况则是线程平常都处于休眠状态，只是周期性地被唤醒。这里分析及介绍.Net Framework中ThreadPool class来对付第一种情况，相应地也会谈到QueueUserWorkItem方法和WaitCallback委托。而使用Timer（System.Threading.Timer or System.Windows.Forms.Timer）来对付第二种情况，可以参考"),n("a",k,[a("《System.Threading.Timer类的TimerCallback 委托》"),c(s)]),a("。")]),i])}const b=e(r,[["render",d],["__file","pts12.html.vue"]]);export{b as default};
