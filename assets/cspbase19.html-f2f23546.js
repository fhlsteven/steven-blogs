import{_ as n,o as s,c as a,a as p}from"./app-57d1f7b1.js";const t={},o=p(`<h1 id="c-数学运算类" tabindex="-1"><a class="header-anchor" href="#c-数学运算类" aria-hidden="true">#</a> C#数学运算类</h1><p>对数学关心的朋友，可以看看这篇文章。</p><p>我们知道对诸如方程求根或数值积分的问题，即使算法编出来，每次也需要编一个待求根或数值积分的函数，这样做真是繁琐，效率非常低。我这里用C#.net(beta2)编了一个一元实函数类，使问题简化了不少。比如<code>f(x)=cos(x)^3</code>这样一个函数，用我的方法可表示为<code>Function f=Function.Cos^3</code>就可以了。为求<code>f(1)</code>，可按下面方式<code>f.Fun(1)</code>即可。是不是还可以呀。</p><p>我们知道初等函数可由六类基本初等函数经过有限次的加减乘除和复合步骤得到的能用一个式子表达的函数。在这个类中就提供了这六类基本初等函数，加用<code>+</code>表示，减用<code>-</code>表示，乘用<code>*</code>表示，除用<code>/</code>表示，乘方用<code>^</code>表示，复合用<code>&amp;</code>表示，都是运算符重载。</p><table><thead><tr><th style="text-align:center;"></th><th>习惯表达</th><th>Function类表达</th></tr></thead><tbody><tr><td style="text-align:center;">加</td><td>f(x)=sin(x)+cos(x)</td><td>Function f=Function.Sin+Function.Cos</td></tr><tr><td style="text-align:center;">减</td><td>f(x)=exp(x)-Ln(x)</td><td>Function f=Function.Exp-Function.Log</td></tr><tr><td style="text-align:center;">乘</td><td>f(x)=sin(x)*Ln(x)</td><td>Funciton f=Function.Sin*Function.Ln</td></tr><tr><td style="text-align:center;">除</td><td>f(x)=sin(x)/cos(x)</td><td>Function f=Function.Sin/Function.Cos</td></tr><tr><td style="text-align:center;">乘方</td><td>f(x)=exp(x)^3</td><td>Function f=Function.Exp^3</td></tr><tr><td style="text-align:center;">复合</td><td>f(x)=exp(sin(x))</td><td>Function f=Function.Exp&amp;Function.Sin</td></tr></tbody></table><p>注：</p><ol><li>由于C#对大小写敏感，请大家注意字母的大小写</li><li>源代码中有关于类的注释，相信大家可以读懂</li></ol><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//===========================================</span>
<span class="token comment">//源代码</span>
<span class="token comment">//===========================================</span>
<span class="token keyword">namespace</span> <span class="token namespace">Maths</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//一元实函数类</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Function</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">FuncNode<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fnode<span class="token punctuation">;</span>  <span class="token comment">//节点数组</span>
                                   <span class="token comment">//构造函数1，生成c常函数</span>
        <span class="token keyword">public</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> c<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncNode</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fnode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fnode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Yfactor <span class="token operator">=</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//构造函数2</span>
        <span class="token keyword">public</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token class-name">FuncNode</span> node<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncNode</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            fnode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//构造函数3</span>
        <span class="token keyword">public</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token class-name">FuncNode<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fnode<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncNode</span><span class="token punctuation">[</span>fnode<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//两个函数的和</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> Function <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Function</span> f1<span class="token punctuation">,</span> <span class="token class-name">Function</span> f2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">FuncNode<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncNode</span><span class="token punctuation">[</span>f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            fnode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Operator<span class="token punctuation">.</span>cadd<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>fnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//两个函数的差</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> Function <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token class-name">Function</span> f1<span class="token punctuation">,</span> <span class="token class-name">Function</span> f2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">FuncNode<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncNode</span><span class="token punctuation">[</span>f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            fnode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Operator<span class="token punctuation">.</span>csub<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>fnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//两个函数的积</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> Function <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">Function</span> f1<span class="token punctuation">,</span> <span class="token class-name">Function</span> f2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">FuncNode<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncNode</span><span class="token punctuation">[</span>f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            fnode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Operator<span class="token punctuation">.</span>cmul<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>fnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//两个函数的商</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> Function <span class="token keyword">operator</span> <span class="token operator">/</span><span class="token punctuation">(</span><span class="token class-name">Function</span> f1<span class="token punctuation">,</span> <span class="token class-name">Function</span> f2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">FuncNode<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncNode</span><span class="token punctuation">[</span>f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            fnode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Operator<span class="token punctuation">.</span>cdiv<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>fnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//两个函数的乘方</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> Function <span class="token keyword">operator</span> <span class="token operator">^</span><span class="token punctuation">(</span><span class="token class-name">Function</span> f1<span class="token punctuation">,</span> <span class="token class-name">Function</span> f2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">FuncNode<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncNode</span><span class="token punctuation">[</span>f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            fnode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Operator<span class="token punctuation">.</span>cpow<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>fnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//两个函数的符合f&amp;g(x)=f(g(x))</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> Function <span class="token keyword">operator</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token class-name">Function</span> f1<span class="token punctuation">,</span> <span class="token class-name">Function</span> f2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">FuncNode<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncNode</span><span class="token punctuation">[</span>f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            fnode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Operator<span class="token punctuation">.</span>ccom<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fnode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f2<span class="token punctuation">.</span>fnode<span class="token punctuation">[</span>i <span class="token operator">-</span> f1<span class="token punctuation">.</span>fnode<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>fnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//计算复杂函数的值</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fnode<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">FunV</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> low<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> high<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">==</span> high<span class="token punctuation">)</span>
                <span class="token keyword">return</span> fnode<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">int</span></span> signnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">int</span></span> funcnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">int</span></span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>IsFunction<span class="token punctuation">)</span> funcnum<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span>
                        signnum<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>funcnum <span class="token operator">==</span> signnum<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        mid <span class="token operator">=</span> i<span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token class-name"><span class="token keyword">double</span></span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">switch</span> <span class="token punctuation">(</span>fnode<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>Oper<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cadd<span class="token punctuation">:</span> v <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>csub<span class="token punctuation">:</span> v <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cmul<span class="token punctuation">:</span> v <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cdiv<span class="token punctuation">:</span> v <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cpow<span class="token punctuation">:</span> v <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>ccom<span class="token punctuation">:</span> v <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FunV</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> v<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　--</span>
        <span class="token comment">//下面是六类基本初等函数的Function类化</span>
        <span class="token comment">//　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　--</span>
        <span class="token comment">//单位函数</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> Unit
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//常函数c</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> <span class="token function">ConstFunc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> c<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>Yfactor <span class="token operator">=</span> c<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//幂函数x^a</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> <span class="token function">Pow</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>FuncX<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Function</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> f1 <span class="token operator">^</span> Function<span class="token punctuation">.</span><span class="token function">ConstFunc</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//指数函数</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> Exp
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>Exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//对数函数</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> Log
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>Log<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//正弦函数</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> Sin
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>Sin<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//余弦函数</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> Cos
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>Cos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//正切函数</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> Tan
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>Tan<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//余切函数</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> Cot
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>CTan<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//余切函数的补充</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">CTan</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">Tan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//反正弦函数</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> Asin
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>Asin<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//反余弦函数</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> Acos
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>Acos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//反正切函数</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> Atan
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>Atan<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//反余切函数</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Function</span> Acot
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">FuncNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>ACtan<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//反余切函数的补充函数</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">ACtan</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">Atan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//</span>
        <span class="token comment">//单位函数1</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">unit</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">FuncX</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//重载</span>
        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fnode<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//double到本类的隐式转换</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Function<span class="token punctuation">.</span><span class="token function">ConstFunc</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//函数表达式获取函数</span>
        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> low<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> high<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">==</span> high<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> fnode<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">int</span></span> signnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">int</span></span> funcnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">int</span></span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fnode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>IsFunction<span class="token punctuation">)</span> funcnum<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span>
                        signnum<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>funcnum <span class="token operator">==</span> signnum<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        mid <span class="token operator">=</span> i<span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">switch</span> <span class="token punctuation">(</span>fnode<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>Oper<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cadd<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;+&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>csub<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cmul<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cdiv<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cpow<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;^&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>ccom<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&amp;&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> str<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　---</span>
    <span class="token comment">//函数节点类</span>
    <span class="token comment">//　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　---</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FuncNode</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Operator</span> oper<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Func</span> f<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> yfactor<span class="token punctuation">;</span> <span class="token comment">//y的伸缩因子</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> xfactor<span class="token punctuation">;</span> <span class="token comment">//x的伸缩因子</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> addconst<span class="token punctuation">;</span> <span class="token comment">//Yfactor*y后的平移量</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> xshift<span class="token punctuation">;</span>  <span class="token comment">//Xfactor*x后的平移量</span>
                                <span class="token comment">//构造函数1</span>
        <span class="token keyword">public</span> <span class="token function">FuncNode</span><span class="token punctuation">(</span><span class="token class-name">Operator</span> oper<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;结构体的构造函数FuncNode(Operator )的输入参数不能为Operator.empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">=</span> oper<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>yfactor <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>xfactor <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>addconst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>xshift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//构造函数2</span>
        <span class="token keyword">public</span> <span class="token function">FuncNode</span><span class="token punctuation">(</span><span class="token class-name">Func</span> f<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;结构体的构造函数FuncNode(Func )的输入参数不能为null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>f <span class="token operator">=</span> f<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>yfactor <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>xfactor <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>addconst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>xshift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//委派Func到本类的隐式转换</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token function">FuncNode</span><span class="token punctuation">(</span><span class="token class-name">Func</span> f<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">FuncNode</span> fnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncNode</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> fnode<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token function">FuncNode</span><span class="token punctuation">(</span><span class="token class-name">Operator</span> oper<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncNode</span><span class="token punctuation">(</span>oper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//属性</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsFunction
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//若节点表示的是函数，则可以求值</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>IsFunction<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点不是函数，不可以求函数值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> yfactor <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>xfactor <span class="token operator">*</span> x <span class="token operator">+</span> xshift<span class="token punctuation">)</span> <span class="token operator">+</span> addconst<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//属性</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">Operator</span> Oper
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">==</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oper<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">set</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>f <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//属性</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">Func</span> F
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是运算符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">set</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是运算符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//属性</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Yfactor
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是运算符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>yfactor<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">set</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是运算符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>yfactor <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//属性</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Xfactor
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是运算符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xfactor<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">set</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是运算符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;x的伸缩量不能为0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>xfactor <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//属性</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Addconst
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是运算符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addconst<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">set</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是运算符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>addconst <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//属性</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Xshift
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是运算符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xshift<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">set</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token string">&quot;本节点是运算符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>xshift <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//重载</span>
        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper <span class="token operator">!=</span> Operator<span class="token punctuation">.</span>empty<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oper<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cadd<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>csub<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cmul<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cdiv<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>cpow<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;^&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> Operator<span class="token punctuation">.</span>ccom<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> str<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">;</span>
                str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>f<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>yfactor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addconst <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addconst <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addconst<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>yfactor <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>yfactor <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>xfactor <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xfactor <span class="token operator">+</span> <span class="token string">&quot;*x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span>
                        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>xshift <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;+&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xshift<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>xshift <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xshift<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addconst <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">&quot;+&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addconst<span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addconst <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addconst<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> str<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionFuncNode</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Exception</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> errorMessage<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ErrorMessage
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>errorMessage<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//构造函数</span>
        <span class="token keyword">public</span> <span class="token function">ExceptionFuncNode</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> errormessage<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>errorMessage <span class="token operator">=</span> errormessage<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ErrorMessage<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Operator</span>
    <span class="token punctuation">{</span>
        cadd<span class="token punctuation">,</span>
        csub<span class="token punctuation">,</span>
        cmul<span class="token punctuation">,</span>
        cdiv<span class="token punctuation">,</span>
        cpow<span class="token punctuation">,</span>
        ccom<span class="token punctuation">,</span>
        empty
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,8),c=[o];function e(u,k){return s(),a("div",null,c)}const i=n(t,[["render",e],["__file","cspbase19.html.vue"]]);export{i as default};
