import{_ as n,o as s,c as a,d as p}from"./app-3696c600.js";const t={},e=p(`<h1 id="全面剖析c-接口编程之接口概述" tabindex="-1"><a class="header-anchor" href="#全面剖析c-接口编程之接口概述" aria-hidden="true">#</a> 全面剖析C#接口编程之接口概述</h1><p>作者：黎宇 本文选自：赛迪网 2003年03月10日</p><p>接口（interface）用来定义一种程序的协定。实现接口的类或者结构要与接口的定义严格一致。有了这个协定，就可以抛开编程语言的限制（理论上）。接口可以从多个基接口继承，而类或结构可以实现多个接口。接口可以包含方法、属性、事件和索引器。接口本身不提供它所定义的成员的实现。接口只指定实现该接口的类或接口必须提供的成员。</p><p>接口好比一种模版，这种模版定义了对象必须实现的方法，其目的就是让这些方法可以作为接口实例被引用。接口不能被实例化。类可以实现多个接口并且通过这些实现的接口被索引。接口变量只能索引实现该接口的类的实例。例子：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">interface</span> <span class="token class-name">IMyExample</span> <span class="token punctuation">{</span> 
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">;</span> <span class="token keyword">set</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span> 
    <span class="token keyword">event</span> <span class="token class-name">EventHandler</span> Even<span class="token punctuation">;</span> 
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token return-type class-name"><span class="token keyword">string</span></span> Point <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">;</span> <span class="token keyword">set</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EventHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">Event</span> e<span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre></div><p>上面例子中的接口包含一个索引<code>this</code>、一个事件<code>Even</code>、一个方法<code>Find</code>和一个属性<code>Point</code>。</p><p>接口可以支持多重继承。就像在下例中，接口&quot;IComboBox&quot;同时从&quot;ITextBox&quot;和&quot;IListBox&quot;继承。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">interface</span> <span class="token class-name">IControl</span> <span class="token punctuation">{</span> 
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Paint</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">interface</span> <span class="token class-name">ITextBox</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IControl</span></span> <span class="token punctuation">{</span> 
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetText</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span> <span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">interface</span> <span class="token class-name">IListBox</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IControl</span></span> <span class="token punctuation">{</span> 
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetItems</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> items<span class="token punctuation">)</span> <span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">interface</span> <span class="token class-name">IComboBox</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITextBox</span><span class="token punctuation">,</span> <span class="token class-name">IListBox</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><p>类和结构可以多重实例化接口。就像在下例中，类&quot;EditBox&quot;继承了类&quot;Control&quot;，同时从&quot;IDataBound&quot;和&quot;IControl&quot;继承。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">interface</span> <span class="token class-name">IDataBound</span> <span class="token punctuation">{</span> 
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Bind</span><span class="token punctuation">(</span><span class="token class-name">Binder</span> b<span class="token punctuation">)</span> <span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EditBox</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Control</span><span class="token punctuation">,</span> <span class="token class-name">IControl</span><span class="token punctuation">,</span> <span class="token class-name">IDataBound</span></span> <span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Paint</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Bind</span><span class="token punctuation">(</span><span class="token class-name">Binder</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre></div><p>在上面的代码中，&quot;Paint&quot;方法从&quot;IControl&quot;接口而来；&quot;Bind&quot;方法从&quot;IDataBound&quot;接口而来，都以&quot;public&quot;的身份在&quot;EditBox&quot;类中实现。</p><p>说明：</p><ul><li>C#中的接口是独立于类来定义的。这与 C++模型是对立的，在 C++中接口实际上就是抽象基类。</li><li>接口和类都可以继承多个接口。</li><li>而类可以继承一个基类，接口根本不能继承类。这种模型避免了 C++的多继承问题，C++中不同基类中的实现可能出现冲突。因此也不再需要诸如虚拟继承和显式作用域这类复杂机制。C#的简化接口模型有助于加快应用程序的开发。</li><li>一个接口定义一个只有抽象成员的引用类型。C#中一个接口实际所做的，仅仅只存在着方法标志，但根本就没有执行代码。这就暗示了不能实例化一个接口，只能实例化一个派生自该接口的对象。</li><li>接口可以定义方法、属性和索引。所以，对比一个类，接口的特殊性是：当定义一个类时，可以派生自多重接口，而你只能可以从仅有的一个类派生。</li></ul><h2 id="接口与组件" tabindex="-1"><a class="header-anchor" href="#接口与组件" aria-hidden="true">#</a> 接口与组件</h2><p>接口描述了组件对外提供的服务。在组件和组件之间、组件和客户之间都通过接口进行交互。因此组件一旦发布，它只能通过预先定义的接口来提供合理的、一致的服务。这种接口定义之间的稳定性使客户应用开发者能够构造出坚固的应用。一个组件可以实现多个组件接口，而一个特定的组件接口也可以被多个组件来实现。</p><p>组件接口必须是能够自我描述的。这意味着组件接口应该不依赖于具体的实现，将实现和接口分离彻底消除了接口的使用者和接口的实现者之间的耦合关系，增强了信息的封装程度。同时这也要求组件接口必须使用一种与组件实现无关的语言。目前组件接口的描述标准是IDL语言。</p><p>由于接口是组件之间的协议，因此组件的接口一旦被发布，组件生产者就应该尽可能地保持接口不变，任何对接口语法或语义上的改变，都有可能造成现有组件与客户之间的联系遭到破坏。</p><p>每个组件都是自主的，有其独特的功能，只能通过接口与外界通信。当一个组件需要提供新的服务时，可以通过增加新的接口来实现。不会影响原接口已存在的客户。而新的客户可以重新选择新的接口来获得服务。</p><h2 id="组件化程序设计" tabindex="-1"><a class="header-anchor" href="#组件化程序设计" aria-hidden="true">#</a> 组件化程序设计</h2><p>组件化程序设计方法继承并发展了面向对象的程序设计方法。它把对象技术应用于系统设计，对面向对象的程序设计的实现过程作了进一步的抽象。我们可以把组件化程序设计方法用作构造系统的体系结构层次的方法，并且可以使用面向对象的方法很方便地实现组件。</p><p>组件化程序设计强调真正的软件可重用性和高度的互操作性。它侧重于组件的产生和装配，这两方面一起构成了组件化程序设计的核心。组件的产生过程不仅仅是应用系统的需求，组件市场本身也推动了组件的发展，促进了软件厂商的交流与合作。组件的装配使得软件产品可以采用类似于搭积木的方法快速地建立起来，不仅可以缩短软件产品的开发周期，同时也提高了系统的稳定性和可靠性。</p><p>组件程序设计的方法有以下几个方面的特点：</p><ul><li>编程语言和开发环境的独立性.</li><li>组件位置的透明性.</li><li>组件的进程透明性.</li><li>可扩充性.</li><li>可重用性.</li><li>具有强有力的基础设施.</li><li>系统一级的公共服务.</li></ul><p>C#语言由于其许多优点，十分适用于组件编程。但这并不是说C#是一门组件编程语言，也不是说C#提供了组件编程的工具。我们已经多次指出，组件应该具有与编程语言无关的特性。请读者记住这一点：组件模型是一种规范，不管采用何种程序语言设计组件，都必须遵守这一规范。比如组装计算机的例子，只要各个厂商为我们提供的配件规格、接口符合统一的标准，这些配件组合起来就能协同工作，组件编程也是一样。我们只是说，利用C#语言进行组件编程将会给我们带来更大的方便。</p><p>知道了什么是接口，接下来就是怎样定义接口，这部分内容我们将在下一节——定义接口中详细讲述。</p>`,25),o=[e];function c(l,u){return s(),a("div",null,o)}const i=n(t,[["render",c],["__file","cspbase8.html.vue"]]);export{i as default};
