import{_ as n,o as s,c as a,d as p}from"./app-3696c600.js";const t={},o=p(`<h1 id="c-初探-2" tabindex="-1"><a class="header-anchor" href="#c-初探-2" aria-hidden="true">#</a> C#初探-2</h1><p>估计俺的文章再也发不了几篇了。这两天，体力值狂降！俺完全按照假体力手册，仍然无效！哎———— 冒死发完这几篇算了。</p><h2 id="_1。2-自动化的内存管理-automatic-memory-management" tabindex="-1"><a class="header-anchor" href="#_1。2-自动化的内存管理-automatic-memory-management" aria-hidden="true">#</a> 1。2 自动化的内存管理（Automatic memory management）</h2><p>手动管理内存需要程序员自行分配和释放内存块。这要求程序员有清晰的头脑和对整个运行过程有十分的把握（好难！）。而c#把程序员从这难以承担的任务中解放出来。在多数的情况下，这种自动内存管理提高代码的质量和程序员的生产力。并且，不会对程序的意图和执行产生幅面的影响（？俺可不相信m$的鬼话）。不过，估计比java的回收站好一点吧。因为c#出道迟嘛（尽胡扯）。好了，来看看例子。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span> 
<span class="token punctuation">{</span> 
  <span class="token keyword">private</span> <span class="token class-name">Node</span> first <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Empty <span class="token punctuation">{</span> 
    <span class="token keyword">get</span> <span class="token punctuation">{</span> 
          <span class="token keyword">return</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t Pop from an empty Stack.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">else</span> <span class="token punctuation">{</span> 
            <span class="token class-name"><span class="token keyword">object</span></span> temp <span class="token operator">=</span> first<span class="token punctuation">.</span>Value<span class="token punctuation">;</span> 
            first <span class="token operator">=</span> first<span class="token punctuation">.</span>Next<span class="token punctuation">;</span> 
            <span class="token keyword">return</span> temp<span class="token punctuation">;</span> 
         <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Push</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Node</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
  <span class="token keyword">class</span> <span class="token class-name">Node</span> 
  <span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token class-name">Node</span> Next<span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">object</span></span> Value<span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">Node</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      Next <span class="token operator">=</span> next<span class="token punctuation">;</span> 
      Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">class</span> <span class="token class-name">Test</span> 
<span class="token punctuation">{</span> 
  <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token class-name">Stack</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
      s<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span> 
      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre></div><p>stack类实现了一系列Node的实例。大家可以看看stack类的Push方法。Node的实例就是在Push方法中创建的。 就是<code>first = new Node(o, first);</code>。请记住这个<code>new</code>噢。它就是用来创建类实例的。相关的语法太多，遛到后面用一节详细讲。这里只是要了解自动内存管理（Automatic memory management）好处？！“new” 是负责初始化类实例。而在c/c++中释放这些实例要用另一个关键字“delete”。但是在什么时候用delete呢，这通常是很费神的活，老手也会阴沟里翻船。何况是俺呢！但在c#中有不用了。例子里就没有用<code>delete</code>。 当Node的实例不需要时，垃圾收集器（garbage collector）自动销毁它，不用俺操心喽。这点到和java挺像的（可能是抄的）。</p><p>在一个test类里，俺用了一个循环，对stack类的实例的Push方法赋值十次。于是，Push创建了Node的十个实例（instance）。然后用Pop把它们显示出来。其顺序正好与创建的顺序相反。这个例子相当的好，是stack的一个典型，也很好的表述了自动内存管理的机制。但也不好懂，好在这一节不是写给毫无基础的网友看的。俺自个都花了几分钟看明白，各位大虾更是没问题。</p><p>其实，当显示完了“10”以后，就会有一个Node的实例符合被释放的条件，但垃圾收集器并不一定会这样做。也就是说，它的行为并不确定（这和java一样，俺猜）。有时候，这种行为会带来一些负面影响。起码是性能降低。自动内存管理本身也是有问题的。因为它很难管理一些特殊情况。有一些关于java的垃圾收集器的文章也有提到。<code>m$</code>也不会好得了多少。所以，<code>m$</code>有个不安全代码的术语（unsafe code），用来为高级用户服务。即，用户可以不采用垃圾收集器。但必须用“unsafe”关键字显式声明之。这样就避免了用户不经意以外使用不安全代码。下面是一个例子：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsafe</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteLocations</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">fixed</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token operator">*</span> p_arr <span class="token operator">=</span> arr<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token operator">*</span> p_elem <span class="token operator">=</span> p_arr<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">byte</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token operator">*</span>p_elem<span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> addr <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p_elem<span class="token punctuation">,</span> <span class="token string">&quot;X&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;arr[{0}] at 0x{1} is {2}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                p_elem<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">WriteLocations</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>俺对这个例子不是很满意，也让俺有点迷惑，有机会再自己写一个。很简单，只是可以用指针了！万岁！ 其实，俺对这一节最没有把握了！有不少地方都不能自圆其说！所以，请各位大虾大力批评。</p><hr><p>作者： 王志清[21847847] 2000-10-19 12:02:42 [回复]</p><blockquote><p>哈哈！又抢到个前排…… Dinosaur_不用怕啦！体力会有的，呵呵！</p></blockquote>`,13),e=[o];function c(l,u){return s(),a("div",null,e)}const i=n(t,[["render",c],["__file","cspct2.html.vue"]]);export{i as default};
