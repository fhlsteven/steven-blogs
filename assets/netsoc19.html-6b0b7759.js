import{_ as n,o as s,c as a,a as t}from"./app-d9da1b6d.js";const p="/steven-blogs/assets/netsoc19_1-2ccc2a8c.png",o="/steven-blogs/assets/netsoc19_2-f0b242cd.png",e={},c=t('<h1 id="visual-c-net-网络程序开发-socket篇" tabindex="-1"><a class="header-anchor" href="#visual-c-net-网络程序开发-socket篇" aria-hidden="true">#</a> Visual C#.Net 网络程序开发-Socket篇</h1><p>Microsoft.Net Framework为应用程序访问Internet提供了分层的、可扩展的以及受管辖的网络服务，其名字空间System.Net和System.Net.Sockets包含丰富的类可以开发多种网络应用程序。.Net类采用的分层结构允许应用程序在不同的控制级别上访问网络，开发人员可以根据需要选择针对不同的级别编制程序，这些级别几乎囊括了Internet的所有需要--从socket套接字到普通的请求/响应，更重要的是，这种分层是可以扩展的，能够适应Internet不断扩展的需要。</p><p>抛开ISO/OSI模型的7层构架，单从TCP/IP模型上的逻辑层面上看，.Net类可以视为包含3个层次：请求/响应层、应用协议层、传输层。WebReqeust和WebResponse 代表了请求/响应层，支持Http、Tcp和Udp的类组成了应用协议层，而Socket类处于传输层。可以如下示意：</p><p><img src="'+p+`" alt="19_1"></p><p>可见，传输层位于这个结构的最底层，当其上面的应用协议层和请求/响应层不能满足应用程序的特殊需要时，就需要使用这一层进行Socket套接字编程。</p><p>而在.Net中，System.Net.Sockets 命名空间为需要严密控制网络访问的开发人员提供了 Windows Sockets (Winsock) 接口的托管实现。System.Net 命名空间中的所有其他网络访问类都建立在该套接字Socket实现之上，如TCPClient、TCPListener 和 UDPClient 类封装有关创建到 Internet 的 TCP 和 UDP 连接的详细信息；NetworkStream类则提供用于网络访问的基础数据流等，常见的许多Internet服务都可以见到Socket的踪影，如Telnet、Http、Email、Echo等，这些服务尽管通讯协议Protocol的定义不同，但是其基础的传输都是采用的Socket。</p><p>其实，Socket可以象流Stream一样被视为一个数据通道，这个通道架设在应用程序端（客户端）和远程服务器端之间，而后，数据的读取（接收）和写入（发送）均针对这个通道来进行。</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>                       发     送
+-----------+         Send/SendTo             +----------+
|  应用程序  |  &lt;---------------------------&gt;  |   远程   |
|   客户端   |            Sock                 | 服务器端 |
+-----------+  &lt;---------------------------&gt;  +----------+
                    Receive/ReveiveFrom
                      接     收
</code></pre></div><p>可见，在应用程序端或者服务器端创建了Socket对象之后，就可以使用Send/SentTo方法将数据发送到连接的Socket,或者使用Receive/ReceiveFrom方法接收来自连接Socket的数据；</p><p>针对Socket编程，.NET 框架的 Socket 类是 Winsock32 API 提供的套接字服务的托管代码版本。其中为实现网络编程提供了大量的方法，大多数情况下，Socket 类方法只是将数据封送到它们的本机 Win32 副本中并处理任何必要的安全检查。如果你熟悉Winsock API函数，那么用Socket类编写网络程序会非常容易，当然，如果你不曾接触过，也不会太困难，跟随下面的解说，你会发觉使用Socket类开发windows 网络应用程序原来有规可寻，它们在大多数情况下遵循大致相同的步骤。</p><p>在使用之前，你需要首先创建Socket对象的实例，这可以通过Socket类的构造方法来实现：</p><p><code>public Socket(AddressFamily addressFamily,SocketType socketType,ProtocolType protocolType);</code></p><p>其中，addressFamily 参数指定 Socket 使用的寻址方案，socketType 参数指定 Socket 的类型，protocolType 参数指定 Socket 使用的协议。<br> 下面的示例语句创建一个 Socket，它可用于在基于 TCP/IP 的网络（如 Internet）上通讯。</p><p><code>Socket s = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</code></p><p>若要使用 UDP 而不是 TCP，需要更改协议类型，如下面的示例所示：</p><p><code>Socket s = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);</code></p><p>一旦创建 Socket，在客户端，你将可以通过Connect方法连接到指定的服务器，并通过Send/SendTo方法向远程服务器发送数据，而后可以通过Receive/ReceiveFrom从服务端接收数据；而在服务器端，你需要使用Bind方法绑定所指定的接口使Socket与一个本地终结点相联，并通过Listen方法侦听该接口上的请求，当侦听到用户端的连接时，调用Accept完成连接的操作，创建新的Socket以处理传入的连接请求。使用完 Socket 后，记住使用 Shutdown 方法禁用 Socket，并使用 Close 方法关闭 Socket。其间用到的方法/函数有：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>Socket<span class="token punctuation">.</span>Connect方法<span class="token punctuation">:</span>建立到远程设备的连接
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token class-name">EndPoint</span> remoteEP<span class="token punctuation">)</span>（有重载方法）
Socket<span class="token punctuation">.</span>Send 方法<span class="token punctuation">:</span>从数据中的指示位置开始将数据发送到连接的 Socket。
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> SocketFlags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>有重载方法<span class="token punctuation">)</span>
Socket<span class="token punctuation">.</span>SendTo 方法 将数据发送到特定终结点。
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">SendTo</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> EndPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>（有重载方法）
Socket<span class="token punctuation">.</span>Receive方法<span class="token punctuation">:</span>将数据从连接的 Socket 接收到接收缓冲区的特定位置。
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Receive</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span>SocketFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>
Socket<span class="token punctuation">.</span>ReceiveFrom方法：接收数据缓冲区中特定位置的数据并存储终结点。
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">ReceiveFrom</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> SocketFlags<span class="token punctuation">,</span> <span class="token keyword">ref</span> EndPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
Socket<span class="token punctuation">.</span>Bind 方法：使 Socket 与一个本地终结点相关联：
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Bind</span><span class="token punctuation">(</span> <span class="token class-name">EndPoint</span> localEP <span class="token punctuation">)</span><span class="token punctuation">;</span>
Socket<span class="token punctuation">.</span>Listen方法：将 Socket 置于侦听状态。
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Listen</span><span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">int</span></span> backlog <span class="token punctuation">)</span><span class="token punctuation">;</span>
Socket<span class="token punctuation">.</span>Accept方法<span class="token punctuation">:</span>创建新的 Socket 以处理传入的连接请求。
<span class="token keyword">public</span> <span class="token return-type class-name">Socket</span> <span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Socket<span class="token punctuation">.</span>Shutdown方法<span class="token punctuation">:</span>禁用某 Socket 上的发送和接收
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Shutdown</span><span class="token punctuation">(</span> <span class="token class-name">SocketShutdown</span> how <span class="token punctuation">)</span><span class="token punctuation">;</span>
Socket<span class="token punctuation">.</span>Close方法<span class="token punctuation">:</span>强制 Socket 连接关闭
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre></div><p>可以看出，以上许多方法包含EndPoint类型的参数，在Internet中，TCP/IP 使用一个网络地址和一个服务端口号来唯一标识设备。网络地址标识网络上的特定设备；端口号标识要连接到的该设备上的特定服务。网络地址和服务端口的组合称为终结点，在 .NET 框架中正是由 EndPoint 类表示这个终结点，它提供表示网络资源或服务的抽象，用以标志网络地址等信息。.Net同时也为每个受支持的地址族定义了 EndPoint 的子代；对于 IP 地址族，该类为 IPEndPoint。IPEndPoint 类包含应用程序连接到主机上的服务所需的主机和端口信息，通过组合服务的主机IP地址和端口号，IPEndPoint 类形成到服务的连接点。</p><p>用到IPEndPoint类的时候就不可避免地涉及到计算机IP地址，</p><p><strong>.Net中有两种类可以得到IP地址实例</strong>：</p><p><strong>IPAddress类：</strong> IPAddress 类包含计算机在 IP 网络上的地址。其Parse方法可将 IP 地址字符串转换为 IPAddress 实例。下面的语句创建一个 IPAddress 实例：</p><p><code>IPAddress myIP = IPAddress.Parse(&quot;192.168.1.2&quot;);</code></p><p><strong>Dns 类：</strong> 向使用 TCP/IP Internet 服务的应用程序提供域名服务。其Resolve 方法查询 DNS 服务器以将用户友好的域名（如&quot;host.contoso.com&quot;）映射到数字形式的 Internet 地址（如 192.168.1.1）。Resolve方法 返回一个 IPHostEnty 实例，该实例包含所请求名称的地址和别名的列表。大多数情况下，可以使用 AddressList 数组中返回的第一个地址。下面的代码获取一个 IPAddress 实例，该实例包含服务器 host.contoso.com 的 IP 地址。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IPHostEntry</span> ipHostInfo <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span><span class="token string">&quot;host.contoso.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IPAddress</span> ipAddress <span class="token operator">=</span> ipHostInfo<span class="token punctuation">.</span>AddressList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><p>你也可以使用GetHostName方法得到IPHostEntry实例：</p><p><code>IPHosntEntry hostInfo=Dns.GetHostByName(&quot;host.contoso.com&quot;)</code></p><p>在使用以上方法时，你将可能需要处理以下几种异常：</p><ul><li>SocketException异常：访问Socket时操作系统发生错误引发</li><li>ArgumentNullException异常：参数为空引用引发</li><li>ObjectDisposedException异常：Socket已经关闭引发</li></ul><p>在掌握上面得知识后，下面的代码将该服务器主机（ host.contoso.com的 IP 地址与端口号组合，以便为连接创建远程终结点：</p><p><code>IPEndPoint ipe = new IPEndPoint(ipAddress,11000);</code></p><p>确定了远程设备的地址并选择了用于连接的端口后，应用程序可以尝试建立与远程设备的连接。下面的示例使用现有的 IPEndPoint 实例与远程设备连接，并捕获可能引发的异常：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">try</span>
<span class="token punctuation">{</span>
  s<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>ipe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尝试连接</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArgumentNullException</span> ae<span class="token punctuation">)</span> <span class="token comment">//处理参数为空引用异常</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;ArgumentNullException : {0}&quot;</span><span class="token punctuation">,</span> ae<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">SocketException</span> se<span class="token punctuation">)</span><span class="token comment">//处理操作系统异常</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;SocketException : {0}&quot;</span><span class="token punctuation">,</span> se<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected exception : {0}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>需要知道的是：<strong>Socket 类支持两种基本模式：同步和异步</strong>。</p><p>其区别在于：在同步模式中，对执行网络操作的函数（如 Send 和 Receive）的调用一直等到操作完成后才将控制返回给调用程序。在异步模式中，这些调用立即返回。</p><p>另外，很多时候，Socket编程视情况不同需要在客户端和服务器端分别予以实现，在客户端编制应用程序向服务端指定端口发送请求，同时编制服务端应用程序处理该请求，这个过程在上面的阐述中已经提及；当然，并非所有的Socket编程都需要你严格编写这两端程序；视应用情况不同，你可以在客户端构造出请求字符串，服务器相应端口捕获这个请求，交由其公用服务程序进行处理。以下事例语句中的字符串就向远程主机提出页面请求：</p><p><code>string Get = &quot;GET / HTTP/1.1\\r\\nHost: &quot; + server + &quot;\\r\\nConnection: Close\\r\\n\\r\\n&quot;;</code></p><p>远程主机指定端口接受到这一请求后，就可利用其公用服务程序进行处理而不需要另行编制服务器端应用程序。</p><p>综合运用以上阐述的使用Visual C#进行Socket网络程序开发的知识，下面的程序段完整地实现了Web页面下载功能。用户只需在窗体上输入远程主机名（Dns 主机名或以点分隔的四部分表示法格式的 IP 地址）和预保存的本地文件名，并利用专门提供Http服务的80端口，就可以获取远程主机页面并保存在本地机指定文件中。如果保存格式是.htm格式，你就可以在Internet浏览器中打开该页面。适当添加代码，你甚至可以实现一个简单的浏览器程序。</p><p><img src="`+o+`" alt="19_2"></p><p>实现此功能的主要源代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//&quot;开始&quot;按钮事件</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> fileName <span class="token operator">=</span> textBox3<span class="token punctuation">.</span>Text<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取得预保存的文件名</span>
    <span class="token class-name"><span class="token keyword">string</span></span> hostName <span class="token operator">=</span> textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//远程主机</span>
    <span class="token class-name"><span class="token keyword">int</span></span> port <span class="token operator">=</span> Int32<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>textBox2<span class="token punctuation">.</span>Text<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//端口  </span>
    <span class="token class-name">IPHostEntry</span> ipInfo <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">GetHostByName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到主机信息</span>
    <span class="token class-name">IPAddress<span class="token punctuation">[</span><span class="token punctuation">]</span></span> ipAddr <span class="token operator">=</span> ipInfo<span class="token punctuation">.</span>AddressList<span class="token punctuation">;</span><span class="token comment">//取得IPAddress[]</span>
    <span class="token class-name">IPAddress</span> ip <span class="token operator">=</span> ipAddr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//得到ip  </span>
    <span class="token class-name">IPEndPoint</span> hostEP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//组合出远程终结点</span>
    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建Socket  实例</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        socket<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>hostEP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尝试连接</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> se<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;连接错误&quot;</span> <span class="token operator">+</span> se<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;提示信息&quot;</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>RetryCancel<span class="token punctuation">,</span> essageBoxIcon<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//发送给远程主机的请求内容串</span>
    <span class="token class-name"><span class="token keyword">string</span></span> sendStr <span class="token operator">=</span> <span class="token string">&quot;GET  /  HTTP/1.1\\r\\nHost:  &quot;</span> <span class="token operator">+</span> hostName <span class="token operator">+</span>
    <span class="token string">&quot;\\r\\nConnection:  Close\\r\\n\\r\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytesSendStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建bytes字节数组以转换发送串</span>

    bytesSendStr <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>sendStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将发送内容字符串转换成字节byte数组</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        socket<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>bytesSendStr<span class="token punctuation">,</span> bytesSendStr<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向主机发送请求</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ce<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;发送错误:&quot;</span> <span class="token operator">+</span> ce<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;提示信息&quot;</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>RetryCancel<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//声明接收返回内容的字符串</span>
    <span class="token class-name"><span class="token keyword">string</span></span> recvStr <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//声明字节数组，一次接收数据的长度为1024字节</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> recvBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//返回实际接收内容的字节数</span>
    <span class="token class-name"><span class="token keyword">int</span></span> bytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//循环读取，直到接收完所有数据</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        bytes <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">Receive</span><span class="token punctuation">(</span>recvBytes<span class="token punctuation">,</span> recvBytes<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//读取完成后退出循环</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">//将读取的字节数转换为字符串</span>
        recvStr <span class="token operator">+=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>recvBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//将所读取的字符串转换为字节数组</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> content <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>recvStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//创建文件流对象实例</span>
        <span class="token class-name">FileStream</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//写入文件</span>
        fs<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> content<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> fe<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;文件创建/写入错误:&quot;</span> <span class="token operator">+</span> fe<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;提示信息&quot;</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>RetryCancel<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//禁用Socket</span>
    socket<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span>SocketShutdown<span class="token punctuation">.</span>Both<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//关闭Socket</span>
    socket<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>程序在WindowsXP中文版、.Net Frameworkd 中文正式版、Visual Studio.Net中文正式版下调试通过</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p>宋华，96年毕业于承德石油学院电子与电气系计算机应用专业，同年进入中国石油天然气集团公司吐哈油田工作，一直从事网络规划与建设、网站架构与设计，现专门从事Internet应用程序开发及Windows应用程序开发。</p>`,45),u=[c];function k(l,i){return s(),a("div",null,u)}const d=n(e,[["render",k],["__file","netsoc19.html.vue"]]);export{d as default};
