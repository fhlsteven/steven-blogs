import{_ as n,o as s,c as a,a as t}from"./app-8e5157a8.js";const p={},o=t(`<h1 id="c-net-中的类型转换" tabindex="-1"><a class="header-anchor" href="#c-net-中的类型转换" aria-hidden="true">#</a> C#.NET 中的类型转换</h1><p>C# 出来也有些日子了，最近由于编程的需要，对 C# 的类型转换做了一些研究，其内容涉及 C# 的装箱/拆箱/别名、数值类型间相互转换、字符的 ASCII 码和 Unicode 码、数值字符串和数值之间的转换、字符串和字符数组/字节数组之间的转换、各种数值类型和字节数组之间的转换、十六进制数输出以及日期型数据的一些转换处理，在这里与大家分享——</p><h2 id="_1-装箱、拆箱还是别名" tabindex="-1"><a class="header-anchor" href="#_1-装箱、拆箱还是别名" aria-hidden="true">#</a> 1. 装箱、拆箱还是别名</h2><p>许多 C#.NET 的书上都有介绍 <code>int -&gt; Int32</code> 是一个装箱的过程，反之则是拆箱的过程。许多其它变量类型也是如此，如：<code>short &lt;-&gt; Int16</code>，<code>long &lt;-&gt; Int64</code> 等。对于一般的程序员来说，大可不必去了解这一过程，因为这些装箱和拆箱的动作都是可以自动完成的，不需要写代码进行干预。但是我们需要记住这些类型之间的关系，所以，我们使用“别名”来记忆它们之间的关系。</p><p>C# 是全面向对象的语言，比 Java 的面向对象都还彻底——它把简单数据类型通过默认的装箱动作封装成了类。<code>Int32</code>、<code>Int16</code>、<code>Int64</code> 等就是相应的类名，而那些我们熟悉的、简单易记的名称，如 int、short、long 等，我们就可以把它称作是 Int32、Int16、Int64 等类型的别名。</p><p>那么除了这三种类型之外，还有哪些类有“别名”呢？常用的有如下一些：</p><ul><li><code>bool</code> -&gt; <code>System.Boolean</code> (布尔型，其值为 true 或者 false)</li><li><code>char</code> -&gt; <code>System.Char</code> (字符型，占有两个字节，表示 1 个 Unicode 字符)</li><li><code>byte</code> -&gt; <code>System.Byte</code> (字节型，占 1 字节，表示 8 位正整数，范围 0 ~ 255)</li><li><code>sbyte</code> -&gt; <code>System.SByte</code> (带符号字节型，占 1 字节，表示 8 位整数，范围 -128 ~ 127)</li><li><code>ushort</code> -&gt; <code>System.UInt16</code> (无符号短整型，占 2 字节，表示 16 位正整数，范围 0 ~ 65,535)</li><li><code>uint</code> -&gt; <code>System.UInt32</code> (无符号整型，占 4 字节，表示 32 位正整数，范围 0 ~ 4,294,967,295)</li><li><code>ulong</code> -&gt; <code>System.UInt64</code> (无符号长整型，占 8 字节，表示 64 位正整数，范围 0 ~ 大约 10 的 20 次方)</li><li><code>short</code> -&gt; <code>System.Int16</code> (短整型，占 2 字节，表示 16 位整数，范围 -32,768 ~ 32,767)</li><li><code>int</code> -&gt; <code>System.Int32</code> (整型，占 4 字节，表示 32 位整数，范围 -2,147,483,648 到 2,147,483,647)</li><li><code>long</code> -&gt; <code>System.Int64</code> (长整型，占 8 字节，表示 64 位整数，范围大约 -(10 的 19) 次方 到 10 的 19 次方)</li><li><code>float</code> -&gt; <code>System.Single</code> (单精度浮点型，占 4 个字节)</li><li><code>double</code> -&gt; <code>System.Double</code> (双精度浮点型，占 8 个字节)</li></ul><p>我们可以用下列代码做一个实验：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this.textBox1 是一个文本框，类型为 System.Windows.Forms.TextBox</span>
    <span class="token comment">// 设计中已经将其 Multiline 属性设置为 true</span>
    <span class="token class-name"><span class="token keyword">byte</span></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token class-name"><span class="token keyword">char</span></span> b <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token class-name"><span class="token keyword">short</span></span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token class-name"><span class="token keyword">long</span></span> e <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token class-name"><span class="token keyword">uint</span></span> f <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token class-name"><span class="token keyword">bool</span></span> g <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;byte -&gt; &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;char -&gt; &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;short -&gt; &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;int -&gt; &quot;</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;long -&gt; &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;uint -&gt; &quot;</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;bool -&gt; &quot;</span> <span class="token operator">+</span> g<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在窗体中新建一个按钮，并在它的单击事件中调用该 <code>TestAlias()</code> 函数，我们将看到运行结果如下：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>byte -&gt; System.Byte
char -&gt; System.Char
short -&gt; System.Int16
int -&gt; System.Int32
long -&gt; System.Int64
uint -&gt; System.UInt32
bool -&gt; System.Boolean
</code></pre></div><p>这足以说明各别名对应的类！</p><h2 id="_2-数值类型之间的相互转换" tabindex="-1"><a class="header-anchor" href="#_2-数值类型之间的相互转换" aria-hidden="true">#</a> 2. 数值类型之间的相互转换</h2><p>这里所说的数值类型包括 <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>fload</code>, <code>double</code> 等，根据这个排列顺序，各种类型的值依次可以向后自动进行转换。举个例来说，把一个 <code>short</code> 型的数据赋值给一个 <code>int</code> 型的变量，<code>short</code> 值会自动行转换成 <code>int</code> 型值，再赋给 <code>int</code> 型变量。如下例：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">byte</span></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token class-name"><span class="token keyword">short</span></span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token class-name"><span class="token keyword">int</span></span> c <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">long</span></span> d <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token class-name"><span class="token keyword">float</span></span> e <span class="token operator">=</span> d<span class="token punctuation">;</span> <span class="token class-name"><span class="token keyword">double</span></span> f <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;byte a = &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;short b = &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;int c = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;long d = &quot;</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;float e = &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;double f = &quot;</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>编译顺利通过，运行结果是各变量的值均为 1；当然，它们的类型分别还是 <code>System.Byte</code> 型……<code>System.Double</code> 型。现在我们来试试，如果把赋值的顺序反过来会怎么样呢？在 <code>TestBasic()</code> 函数中追加如下语句：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> g <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">short</span></span> h <span class="token operator">=</span> g<span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;h = &quot;</span> <span class="token operator">+</span> h<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>结果编译报错：</p><blockquote><p>G:\\Projects\\Visual C#\\Convert\\Form1.cs(118): 无法将类型“int”隐式转换为“short”</p></blockquote><p>其中，Form1.cs 的 118 行即 <code>short h = g</code> 所在行。</p><p>这个时候，如果我们坚持要进行转换，就应该使用强制类型转换，这在 C 语言中常有提及，就是使用“(类型名) 变量名”形式的语句来对数据进行强制转换。如上例修改如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">short</span></span> g <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">byte</span></span> h <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> g<span class="token punctuation">;</span> <span class="token comment">// 将 short 型的 g 的值强制转换成 short 型后再赋给变量 h</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;h = &quot;</span> <span class="token operator">+</span> h<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>编译通过，运行结果输出了 <code>h = 1</code>，转换成功。</p><p>但是，如果我们使用强制转换，就不得不再考虑一个问题：<code>short</code> 型的范围是 <code>-32768 ~ 23767</code>，而 <code>byte</code> 型的范围是 <code>0 ~ 255</code>，那么，如果变量 g 的大小超过了 <code>byte</code> 型的范围又会出现什么样的情况呢？我们不妨再一次改写代码，将值改为 265，比 255 大 10</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">short</span></span> g <span class="token operator">=</span> <span class="token number">265</span><span class="token punctuation">;</span> <span class="token comment">//265 = 255 + 10</span>
<span class="token class-name"><span class="token keyword">byte</span></span> h <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> g<span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;h = &quot;</span> <span class="token operator">+</span> h<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>编译没有出错，运行结果却不是 h = 265，而是 h = 9。</p><p>因此，我们在进行转换的时候，应当注意被转换的数据不能超出目标类型的范围。这不仅体现在多字节数据类型(相对，如上例的 short) 转换为少字节类型(相对，如上例的 byte) 时，也体现在字节数相同的有符号类型和无符号类型之间，如将 <code>byte</code> 的 129 转换为 <code>sbyte</code> 就会溢出。这方面的例子大同小异，就不详细说明了。</p><h2 id="_3-字符的-ascii-码和-unicode-码" tabindex="-1"><a class="header-anchor" href="#_3-字符的-ascii-码和-unicode-码" aria-hidden="true">#</a> 3. 字符的 ASCII 码和 Unicode 码</h2><p>很多时候我们需要得到一个英文字符的 ASCII 码，或者一个汉字字符的 Unicode 码，或者从相关的编码查询它是哪一个字符的编码。很多人，尤其是从 VB 程序序转过来学 C# 的人，会报怨 C# 里为什么没有提供现成的函数来做这个事情——因为在 VB 中有 <code>Asc()</code> 函数和 <code>Chr()</code> 函数用于这类转换。</p><p>但是如果你学过 C，你就会清楚，我们只需要将英文字符型数据强制转换成合适的数值型数据，就可以得到相应的 ASCII 码；反之，如果将一个合适的数值型数据强制转换成字符型数据，就可以得到相应的字符。</p><p>C# 中字符的范围扩大了，不仅包含了单字节字符，也可以包含双字节字符，如中文字符等。而在字符和编码之间的转换，则仍延用了 C 语言的做法——强制转换。不妨看看下面的例子</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">char</span></span> ch <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token class-name"><span class="token keyword">short</span></span> ii <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;The ASCII code of \\&#39;&quot;</span> <span class="token operator">+</span> ch <span class="token operator">+</span> <span class="token string">&quot;\\&#39; is: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> ch <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;ASCII is &quot;</span> <span class="token operator">+</span> ii<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, the char is: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> ii <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">char</span></span> cn <span class="token operator">=</span> <span class="token char">&#39;中&#39;</span><span class="token punctuation">;</span> <span class="token class-name"><span class="token keyword">short</span></span> uc <span class="token operator">=</span> <span class="token number">22478</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;The Unicode of \\&#39;&quot;</span> <span class="token operator">+</span> cn <span class="token operator">+</span> <span class="token string">&quot;\\&#39; is: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> cn <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;Unicode is &quot;</span> <span class="token operator">+</span> uc<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, the char is: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> uc <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>它的运行结果是</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>The ASCII code of &#39;a&#39; is: 97
ASCII is 65, the char is: A
The Unicode of &#39;中&#39; is: 20013
Unicode is 22478, the char is: 城
</code></pre></div><p>从这个例子中，我们便能非常清楚的了解——通过强制转换，可以得以字符的编码，或者得到编码表示的字符。如果你需要的不是 <code>short</code> 型的编码，请参考第 1 条进行转换，即可得到 <code>int</code> 等类型的编码值。</p><h2 id="_4-数值字符串和数值之间的转换" tabindex="-1"><a class="header-anchor" href="#_4-数值字符串和数值之间的转换" aria-hidden="true">#</a> 4. 数值字符串和数值之间的转换</h2><p>首先，我们得搞明白，什么是数值字符串。我们知道，在 C# 中，字符串是用一对双引号包含的若干字符来表示的，如 &quot;123&quot;。而 &quot;123&quot; 又相对特殊，因为组成该字符串的字符都是数字，这样的字符串，就是数值字符串。在我们的眼中，这即是一串字符，也是一个数，但计算机却只认为它是一个字符串，不是数。因此，我们在某些时候，比如输入数值的时候，把字符串转换成数值；而在另一些时候，我们需要相反的转换。</p><p>将数值转换成字符串非常简单，因为每一个类都有一个 <code>void ToString()</code> 方法。所有数值型的 <code>void ToString()</code> 方法都能将数据转换为数值字符串。如 123.ToSting() 就将得到字符串 &quot;123&quot;。</p><p>那么反过来，将数值型字符串转换成数值又该怎么办呢？我们仔细查找一下，会发现 <code>short</code>, <code>int</code>, <code>float</code> 等数值类型均有一个 <code>static Parse()</code> 函数。这个函数就是用来将字符串转换为相应数值的。我们以一个 <code>float</code> 类型的转换为例： <code>float f = float.Parse(&quot;543.21&quot;);</code> 其结果 <code>f</code> 的值为 <code>543.21F</code>。当然，其它的数值类型也可以使用同样的方法进行转换，下面的例子可以更明确的说明转换的方法：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestStringValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">float</span></span> f <span class="token operator">=</span> <span class="token number">54.321F</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;f = &quot;</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">123</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;str convert to int successfully.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;str convert to int failed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>运行结果：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>f = 54.321
str convert to int successfully.
</code></pre></div><h2 id="_5-字符串和字符数组之间的转换" tabindex="-1"><a class="header-anchor" href="#_5-字符串和字符数组之间的转换" aria-hidden="true">#</a> 5. 字符串和字符数组之间的转换</h2><p>字符串类 System.String 提供了一个 void ToCharArray() 方法，该方法可以实现字符串到字符数组的转换。如下例：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestStringChars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">&quot;mytest&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">ToCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;Length of \\&quot;mytest\\&quot; is &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;Length of char array is &quot;</span> <span class="token operator">+</span> chars<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;char[2] = &quot;</span> <span class="token operator">+</span> chars<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>例中以对转换转换到的字符数组长度和它的一个元素进行了测试，结果如下：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>Length of &quot;mytest&quot; is 6
Length of char array is 6
char[2] = t
</code></pre></div><p>可以看出，结果完全正确，这说明转换成功。那么反过来，要把字符数组转换成字符串又该如何呢？</p><p>我们可以使用 <code>System.String</code> 类的构造函数来解决这个问题。<code>System.String</code> 类有两个构造函数是通过字符数组来构造的，即 <code>String(char[])</code> 和 <code>String[char[], int, int)</code>。后者之所以多两个参数，是因为可以指定用字符数组中的哪一部分来构造字符串。而前者则是用字符数组的全部元素来构造字符串。我们以前者为例，在 <code>TestStringChars()</code> 函数中输入如下语句：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> tcs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;m&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> tstr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">String</span><span class="token punctuation">(</span>tcs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;tstr = \\&quot;&quot;</span> <span class="token operator">+</span> tstr <span class="token operator">+</span> <span class="token string">&quot;\\&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>运行结果输入 <code>tstr = &quot;test me&quot;</code>，测试说明转换成功。</p><p>实际上，我们在很多时候需要把字符串转换成字符数组只是为了得到该字符串中的某个字符。如果只是为了这个目的，那大可不必兴师动众的去进行转换，我们只需要使用 <code>System.String</code> 的 <code>[]</code> 运算符就可以达到目的。请看下例，再在 <code>TestStringChars()</code> 函数中加入如如下语名：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">char</span></span> ch <span class="token operator">=</span> tstr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span> <span class="token operator">+</span> tstr <span class="token operator">+</span> <span class="token string">&quot;\\&quot;[3] = &quot;</span> <span class="token operator">+</span> ch<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>正确的输出是 <code>&quot;test me&quot;[3] = t</code>，经测试，输出正确。</p><h2 id="_6-字符串和字节数组之间的转换" tabindex="-1"><a class="header-anchor" href="#_6-字符串和字节数组之间的转换" aria-hidden="true">#</a> 6. 字符串和字节数组之间的转换</h2><p>如果还想从 <code>System.String</code> 类中找到方法进行字符串和字节数组之间的转换，恐怕你会失望了。为了进行这样的转换，我们不得不借助另一个类：<code>System.Text.Encoding</code>。该类提供了 <code>bye[] GetBytes(string)</code> 方法将字符串转换成字节数组，还提供了 <code>string GetString(byte[])</code> 方法将字节数组转换成字符串。</p><p><code>System.Text.Encoding</code> 类似乎没有可用的构造函数，但我们可以找到几个默认的 <code>Encoding</code>，即 <code>Encoding.Default</code>(获取系统的当前 ANSI 代码页的编码)、<code>Encoding.ASCII</code>(获取 7 位 ASCII 字符集的编码)、<code>Encoding.Unicode</code>(获取采用 Little-Endian 字节顺序的 Unicode 格式的编码)、<code>Encoding.UTF7</code>(获取 UTF-7 格式的编码)、<code>Encoding.UTF8</code>(获取 UTF-8 格式的编码) 等。这里主要说说 <code>Encoding.Default</code> 和 <code>Encoding.Unicode</code> 用于转换的区别。</p><p>在字符串转换到字节数组的过程中，<code>Encoding.Default</code> 会将每个单字节字符，如半角英文，转换成 1 个字节，而把每个双字节字符，如汉字，转换成 2 个字节。而 <code>Encoding.Unicode</code> 则会将它们都转换成两个字节。我们可以通过下列简单的了解一下转换的方法，以及使用 <code>Encoding.Default</code> 和 <code>Encodeing.Unicode</code> 的区别：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestStringBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token string">&quot;C#语言&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> b1 <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> b2 <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Unicode<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> t1 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> t2 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span></span> b <span class="token keyword">in</span> b1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        t1 <span class="token operator">+=</span> b<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span></span> b <span class="token keyword">in</span> b2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        t2 <span class="token operator">+=</span> b<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;b1.Length = &quot;</span> <span class="token operator">+</span> b1<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>t1 <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;b2.Length = &quot;</span> <span class="token operator">+</span> b2<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>t2 <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>运行结果如下，不说详述，相信大家已经明白了。</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>b1.Length = 6
67 35 211 239 209 212
b2.Length = 8
67 0 35 0 237 139 0 138
</code></pre></div><p>将字节数组转换成字符串，使用 <code>Encoding</code> 类的 <code>string GetString(byte[])</code> 或 <code>string GetString(byte[], int, int)</code> 方法，具体使用何种 <code>Encoding</code> 还是由编码决定。在 <code>TestStringBytes()</code> 函数中添加如下语句作为实例：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> ss <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;The string is: &quot;</span> <span class="token operator">+</span> ss <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>运行结果为：<code>The string is: abcdef</code></p><h2 id="_7-各种数值类型和字节数组之间的转换" tabindex="-1"><a class="header-anchor" href="#_7-各种数值类型和字节数组之间的转换" aria-hidden="true">#</a> 7. 各种数值类型和字节数组之间的转换</h2><p>在第 1 条中我们可以查到各种数值型需要使用多少字节的空间来保存数据。将某种数值类型的数据转换成字节数组的时候，得到的一定是相应大小的字节数组；同样，需要把字节数组转换成数值类型，也需要这个字节数组大于相应数值类型的字节数。</p><p>现在介绍此类转换的主角：<code>System.BitConverter</code>。该类提供了 <code>byte[] GetBytes(...)</code> 方法将各种数值类型转换成字节数组，也提供了 <code>ToInt32</code>、<code>ToInt16</code>、<code>ToInt64</code>、<code>ToUInt32</code>、<code>ToSignle</code>、<code>ToBoolean</code> 等方法将字节数组转换成相应的数值类型。</p><p>由于这类转换通常只是在需要进行较细微的编码/解码操作时才会用到，所以这里就不详细叙述了，仅把 <code>System.BitConverter</code> 类介绍给大家。</p><h2 id="_8-转换成十六进制" tabindex="-1"><a class="header-anchor" href="#_8-转换成十六进制" aria-hidden="true">#</a> 8. 转换成十六进制</h2><p>任何数据在计算机内部都是以二进制保存的，所以进制与数据的存储无关，只与输入输出有关。所以，对于进制转换，我们只关心字符串中的结果。</p><p>在上面的第 4 条中提到了 <code>ToString()</code> 方法可以将数值转换成字符串，不过在字符串中，结果是以十进制显示的。现在我们带给它加一些参数，就可以将其转换成十六进制——使用 <code>ToString(string)</code> 方法。</p><p>这里需要一个 <code>string</code> 类型的参数，这就是格式说明符。十六进制的格式说明符是 &quot;x&quot; 或者 &quot;X&quot;，使用这两种格式说明符的区别主要在于 A-F 六个数字：&quot;x&quot; 代表 a-f 使用小写字母表示，而 &quot;X&quot; 而表示 A-F 使用大字字母表示。如下例：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">188</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;a(10) = &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;a(16) = &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;a(16) = &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;X&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>运行结果如下：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>a(10) = 188
a(16) = bc
a(16) = BC
</code></pre></div><p>这时候，我们可能有另一种需求，即为了显示结果的整齐，我们需要控制十六进制表示的长度，如果长度不够，用前导的 0 填补。解决这个问题，我们只需要在格式说明符“x”或者“X”后写上表示长度的数字就行了。比如，要限制在 4 个字符的长度，可以写成“X4”。在上例中追加一句：</p><p><code>this.textBox1.AppendText(&quot;a(16) = &quot; + a.ToString(&quot;X4&quot;) + &quot;\\n&quot;);</code></p><p>其结果将输出 <code>a(16) = 00BC</code>。</p><p>现在，我们还要说一说如何将一个表示十六进制数的字符串转换成整型。这一转换，同样需要借助于 <code>Parse()</code> 方法。这里，我需要 <code>Parse(string, System.Globalization.NumberStyles)</code> 方法。第一个参数是表示十六进制数的字符串，如“AB”、“20”(表示十进制的 32) 等。第二个参数 <code>System.Globalization.NumberStyles</code> 是一个枚举类型，用来表示十六进制的枚举值是 <code>HexNumber</code>。因此，如果我们要将“AB”转换成整型，就应该这样写：<code>int b = int.Parse(&quot;AB&quot;, System.Globalization.NumberStyles.HexNumber)</code>，最后得到的 b 的值是 171。</p><h2 id="_9-日期型数据和长整型数据之间的转换" tabindex="-1"><a class="header-anchor" href="#_9-日期型数据和长整型数据之间的转换" aria-hidden="true">#</a> 9. 日期型数据和长整型数据之间的转换</h2><p>为什么要将日期型数据转换为长整型数据呢？原因很多，但就我个人来说，经常将它用于数据库的日期存储。由于各种数据库对日期型的定义和处理是不一样的，各种语言对日期型数据的定义的处理也各不相同，因为，我宁愿将日期型数据转换成长整型再保存到数据库中。虽然也可以使用字符串来保存，但使用字符串也会涉及到许多问题，如区域等问题，而且，它需要比保存长整型数据更多的空间。</p><p>日期型数据，在 C# 中的参与运算的时候，应该也是转换为长整型数据来运算的。它的长整型值是自 0001 年 1 月 1 日午夜 12:00 以来所经过时间以 100 毫微秒为间隔表示时的数字。这个数在 C# 的 <code>DateTime</code> 中被称为 <code>Ticks</code>(刻度)<code>。DateTime</code> 类型有一个名为 <code>Ticks</code> 的长整型只读属性，就保存着这个值。如此，要从一个 <code>DataTime</code> 型数据得到 <code>long</code> 型值就非常简单了，只需要读出 <code>DataTime</code> 对象的 <code>Ticks</code> 值即可，如：</p><p><code>long longDate = DateTime.Now.Ticks;</code></p><p><code>DateTime</code> 的构造函数中也提供了相应的，从长整型数据构造 <code>DateTime</code> 型数据的函数：<code>DateTime(long)</code>。如：</p><p><code>DateTime theDate = new DateTime(longDate);</code></p><p>但这样对于很多 VB6 程序员来说，是给他们出了一道难题，因为 VB6 中的日期型数据内部是以 Double 型表示的，将其转换为长整型后得到的仅仅是日期，而没有时间。如何协调这两种日期类型呢？</p><p><code>System.DateTime</code> 提供了 <code>double ToOADate()</code> 和 <code>static DateTime FromOADate(double)</code> 两个函数来解决这个问题。前者将当前对象按原来的 <code>double</code> 值输出，后者则从一个 <code>double</code> 值获得一个 <code>System.DateTime</code> 对象。举例如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestDateTimeLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">double</span></span> doubleDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToOADate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DateTime</span> theDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">FromOADate</span><span class="token punctuation">(</span>doubleDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;Double value of now: &quot;</span> <span class="token operator">+</span> doubleDate<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token string">&quot;DateTime from double value: &quot;</span> <span class="token operator">+</span> theDate<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>运行结果：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>Double value of now: 37494.661541713
DateTime from double value: 2002-8-26 15:52:37
</code></pre></div><h2 id="_10-格式化日期型数据" tabindex="-1"><a class="header-anchor" href="#_10-格式化日期型数据" aria-hidden="true">#</a> 10. 格式化日期型数据</h2><p>编程的过程中，通常需要将日期型数据按照一定的格式输出，当然，输出结果肯定是字符串。为此，我们需要使用 <code>System.DateTime</code> 类的 <code>ToString()</code> 方法，并为其指定格式字符串。</p><p>MSDN 中，<code>System.Globalization.DateTimeFormatInfo</code> 类的概述里对模式字符串有非常详细的说明，因此，这里我只对常用的一些格式进行说明，首先请看下表：</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>d</td><td>月中的某一天</td><td>一位数的日期没有前导零</td></tr><tr><td>dd</td><td>月中的某一天</td><td>一位数的日期有一个前导零</td></tr><tr><td>ddd</td><td>周中某天的缩写名称</td><td>在 AbbreviatedDayNames 中定义</td></tr><tr><td>dddd</td><td>周中某天的完整名称</td><td>在 DayNames 中定义</td></tr><tr><td>M</td><td>月份数字</td><td>一位数的月份没有前导零</td></tr><tr><td>MM</td><td>月份数字</td><td>一位数的月份有一个前导零</td></tr><tr><td>MMM</td><td>月份的缩写名称</td><td>在 AbbreviatedMonthNames 中定义</td></tr><tr><td>MMMM</td><td>月份的完整名称</td><td>在 MonthNames 中定义</td></tr><tr><td>y</td><td>不包含纪元的年份</td><td>如果不包含纪元的年份小于 10，则显示不具有前导零的年份</td></tr><tr><td>yy</td><td>不包含纪元的年份</td><td>如果不包含纪元的年份小于 10，则显示具有前导零的年份</td></tr><tr><td>yyyy</td><td>包括纪元的四位数的年份</td><td></td></tr><tr><td>h</td><td>12 小时制的小时</td><td>一位数的小时数没有前导零</td></tr><tr><td>hh</td><td>12 小时制的小时</td><td>一位数的小时数有前导零</td></tr><tr><td>H</td><td>24 小时制的小时</td><td>一位数的小时数没有前导零</td></tr><tr><td>HH</td><td>24 小时制的小时</td><td>一位数的小时数有前导零</td></tr><tr><td>m</td><td>分钟</td><td>一位数的分钟数没有前导零</td></tr><tr><td>mm</td><td>分钟</td><td>一位数的分钟数有一个前导零</td></tr><tr><td>s</td><td>秒</td><td>一位数的秒数没有前导零</td></tr><tr><td>ss</td><td>秒</td><td>一位数的秒数有一个前导零</td></tr></tbody></table><p>为了便于大家的理解，不妨试试下面的程序：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestDateTimeToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DateTime</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> format<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    format <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>format <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    format <span class="token operator">=</span> <span class="token string">&quot;yy年M日d日&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>format <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这段程序将输出结果：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>yyyy-MM-dd HH:mm:ss: 2002-08-26 17:03:04
yy年M日d日: 02年8日26日
</code></pre></div><p>这时候，又出现一个问题，如果要输出的文本信息中包含格式字符怎么办？如</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>format <span class="token operator">=</span> <span class="token string">&quot;year: yyyy, month: MM, day: dd&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>将输出：</p><p><code>2ear: 2002, 4on下5: 08, 26a2: 26</code></p><p>这并不是我想要的结果，怎么办呢？有办法——</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>format <span class="token operator">=</span> <span class="token string">&quot;\\&quot;year\\&quot;: yyyy, \\&#39;month\\&#39;: MM, \\&#39;day\\&#39;: dd&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>看，这次运行结果对了：</p><p><code>year: 2002, month: 08, day: 26</code></p><p>可以看出，只需要使用单引号或者双引号将文本信息括起来就好。 如果文本信息中包含双引号或者单引号又怎么办呢？这个问题，请读者们动动脑筋吧！</p>`,107),e=[o];function c(u,l){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","cspdsop2.html.vue"]]);export{i as default};
