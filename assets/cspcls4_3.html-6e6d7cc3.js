import{_ as n,o as s,c as a,a as t}from"./app-477de5b2.js";const o={},p=t(`<h1 id="c-教程第三课-选择控制语句" tabindex="-1"><a class="header-anchor" href="#c-教程第三课-选择控制语句" aria-hidden="true">#</a> C＃教程第三课:选择控制语句</h1><p>（Joe Mayo　2001年06月08日 17:21）</p><p>本节课将介绍如何使用C#选择控制语句，第三课将达到如下几个目的：</p><ol><li>学会&quot;if&quot;语句的用法</li><li>学会&quot;switch&quot;语句的用法</li><li>学会在&quot;switch&quot;语句中如何使用&quot;break&quot;语句</li><li>理解&quot;goto&quot;语句的正确用法</li></ol><p>在前面几节课中，你所看到的程序都是顺序执行的。你无法控制输入语句，你所能做的就是跟着程序执行直到终止。本节课中，将介绍基于条件进行判断，从而选择进入相应的逻辑分支中去执行。</p><p>我们所介绍的第一个选择语句是&quot;if&quot;语句，它有三种基本形式：单条选择， 如果/否则，以及多情形选择。</p><p>1.清单3-1. IF语句的格式：IfSelection.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">IfSelect</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> myInput<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> myInt<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter a number: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myInput <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myInt <span class="token operator">=</span> Int32<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>myInput<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Single Decision and Action with brackets</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>myInt <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number {0} is greater than zero.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Single Decision and Action without brackets</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>myInt <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number {0} is less than zero.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Either/Or Decision</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>myInt <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number {0} is not equal to zero.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number {0} is equal to zero.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Multiple Case Decision</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>myInt <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> myInt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number {0} is less than or equal to zero.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>myInt <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> myInt <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number {0} is between 1 and 10.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>myInt <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> myInt <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number {0} is between 11 and 20.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>myInt <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> myInt <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number {0} is between 21 and 30.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number {0} is greater than 30.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><ol><li><p>清单3-1中的IF语句的各种格式都使用了同一个输入变量&quot;myInt&quot;。</p><p>这是从用户获得交互内容的另一种方式。我们首先输出一行信息：&quot;Please enter a number:&quot;到控制台。&quot;Console.ReadLine()&quot;语句使得程序等待来自用户的输入，一旦用户输入一个数字，按回车键之后，该数字以字符串的形式返回到&quot;myInput&quot;变量中，由于我们需要的是一个整数，所以需要转换变量&quot;myInput&quot;成整型数据。用命令&quot;Int32.Parse(myInput)&quot;即可完成。 (Int32 等数据类型将在后面的课程中加以介绍。) 转换结果放到&quot;myInt&quot;变量中，这是个整数类型。</p></li><li><p>有了我们所需要的类型的数据，就可以用&quot;if&quot;语句来进行条件判断了。</p><p>对于第一种形式的IF语句，格式为： if (boolean expression) { statements }。该语句必须以关键字&quot;if&quot;开始。之后，括号中为布尔表达式。该布尔表达式必须计算出一个true或者false值。在本例中，我们检查用户的输入，看看输入值是否大于0，如果表达式运算结果为true，就执行大括号中的语句。(我们把大括号之间的语句部分称为&quot;block&quot;。) 块中有一个或者多个语句。如果布尔表达式的值为false，我们就忽略块中的语句，直接执行块后面的语句。</p></li><li><p>除了没有块之外，第二种&quot;if&quot;语句的格式非常类似于第一种。</p><p>因此，如果布尔表达式为true，将会执行布尔表达式之后的第一条语句。当布尔表达式的值为false，布尔表达式之后的第一条语句将被忽略掉，而直接执行其后的程序语句。如果你只有一条语句需要执行，就用该格式的&quot;if&quot;语句。如果你打算在布尔表达式的值为true时，执行两条或者两条以上的语句，就必须把它们放到块中。我个人的建议是：无论需要执行几条语句，要养成把if语句放到块中的习惯， 这就使得你避免犯如下错误：当添加了一条语句之后，忘记了添加一对括号。</p></li><li><p>大多数时候，你需要作出如下选择：当条件满足时做一件事，否则做另外一件事。</p><p>清单3-1中，程序演示了这种if语句格式的用法。 当布尔表达式为true时， 就立刻执行&quot;if&quot;后面的那条语句， 而当布尔表达式为false时，就执行&quot;else&quot;关键字后面的语句。</p></li><li><p>当要计算多个布尔表达式时，你可以使用if/else if/else 这种格式，上面的例子程序演示了这种形式，从关键字&quot;if&quot;开始， 一旦布尔表达式为真，就执行if后面的块。但是，这一次，在组合关键字&quot;else if&quot;后面还可以进行多个条件的判断。&quot;else if&quot;语句后面也有个布尔表达式，一旦该布尔表达式的值为true，就会执行紧接其后的块。这种情形可以一直持续下去，直到所有的情况都已经计算出来，但是整个&quot;if/else if&quot;序列必须以&quot;else&quot;结束。当所有的&quot;if&quot;或者&quot;else if&quot; 后面的布尔表达式的值都为false时，就执行关键字&quot;else&quot;后面的块。 对于if/else if/else格式的语句，每次仅仅执行一个其中部分的语句 。</p></li><li><p>上面的例子中，布尔表达式 <code>(myInt &lt; 0 || myInt == 0)</code>包含了条件OR (<code>||</code>)运算符。</p><p>对于常规OR (<code>|</code>)运算符和条件OR (<code>||</code>)运算符来说，只要有运算符两边的子表达式之一为真，整个布尔表达式的值就为真。两个运算符的区别在于：正规OR 运算符(<code>|</code>)每次都对运算符(<code>|</code>)两边的表达式进行计算。而条件运算符OR (<code>||</code>)只有当第一个子表达式的值为false时，才计算第二个子表达式的值。</p></li><li><p>布尔表达式 <code>(myInt &gt; 0 &amp;&amp; myInt &lt;= 10)</code>包含了条件运算符AND。</p></li></ol><p>对于常规AND (<code>&amp;</code>) 运算符和条件AND (<code>&amp;&amp;</code>)运算符来说，只有当运算符两边的子表达式的值都为真时，整个布尔表达式的值为真。两种运算符的区别在于：正规AND (<code>&amp;</code>)运算符每次都计算运算符两边的子表达式的值，但是对于条件AND运算符来说，只有当第一个子表达式的值为真时，才计算第二个表达式的值。条件运算符(<code>&amp;&amp;</code> 和 <code>||</code>) 通常称为运算优化的运算符，因为有时不需要计算整个表达式的值。这样就可以忽略掉不必要的逻辑表达式的计算，可以生成有效的代码。</p><p>同if/else if/else 格式的&quot;if&quot;语句类似，&quot;switch&quot;语句的用法如下：</p><p>2.清单3-2. 分支选择语句： SwitchSelection.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">SwitchSelect</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> myInput<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> myInt<span class="token punctuation">;</span>

        begin<span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter a number between 1 and 3: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myInput <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myInt <span class="token operator">=</span> Int32<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>myInput<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// switch with integer type</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>myInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number is {0}.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number is {0}.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number is {0}.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your number {0} is not between 1 and 3.&quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        decide<span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Type \\&quot;continue\\&quot; to go on or \\&quot;quit\\&quot; to stop: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myInput <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// switch with string type</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>myInput<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;continue&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">goto</span> begin<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;quit&quot;</span><span class="token punctuation">:</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Bye.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Your input {0} is incorrect.&quot;</span><span class="token punctuation">,</span> myInput<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">goto</span> decide<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><ol><li><p>清单3-2 演示了多分支选择语句switch的用法。</p><p>关键字&quot;switch&quot;后面是switch 表达式。Switch表达式必须是以下类型中的一种： sbyte，byte，short，ushort， int，uint，long，ulong，char，string，或者enum类型。(enum类型将在后面的课程中加以介绍)。在清单3-2的第一个&quot;switch&quot;语句中， switch 表达式计算的是整数类型的数据。</p></li><li><p>在switch表达式后面是个switch 块， 当Switch表达式的值同某一个case后面的常量表达式的值相匹配时，就执行此case后面的语句，直到遇到&quot;break&quot;语句或者&quot;goto&quot;语句为止。每个分支以关键字&quot;case&quot;作为标号，其后为常量表达式，然后是分号（：）。本例子程序中，我们有&quot;case 1：&quot;，&quot;case 2：&quot;和&quot;case 3：&quot;。</p></li><li><p>你可以在所有的分支选择的后面加上一个&quot;default&quot;分支。</p><p>如果没有匹配的常量表达式，就进入default分支，并执行该分支的语句。虽然default标号是可选的，我建议你加上该分支。这将有助于处理一些意外事件 ，使得你的程序能够捕捉和处理不可预见的事件，从而使得程序更加可靠。</p></li><li><p>每个&quot;case&quot;标号必须以&quot;break&quot;语句作为结束。</p><p>&quot;break&quot;语句将使得程序退出switch语句，并从switch块后面的一条语句开始执行。对于&quot;default&quot;标号来说，&quot;break&quot;语句是可选的，因为有&quot;break&quot;语句和没有&quot;break&quot;语句，其运行结果是一样的。如果你在switch块中放置了一个&quot;goto&quot;语句，情况就不一样了。</p></li><li><p>清单3-2中的第二个&quot;switch&quot;语句演示了&quot;goto&quot;语句的用法。</p></li></ol><p>&quot;goto&quot;语句可以让程序跳到关键字&quot;goto&quot;后面的标号中去执行。程序执行过程中，如果用户打入&quot;continue&quot;， switch语句就匹配case &quot;continue&quot; 中的常量表达式，并执行&quot;goto begin:&quot;语句。程序就会离开&quot;switch&quot;语句，开始执行标号&quot;begin:&quot;后的第一条语句。这是个有效的循环，可以让你多次重复执行同样一段代码。一旦用户打入字符串&quot;quit&quot;，循环将会结束。此时，将进入case &quot;quit&quot; 分支。该分支将输出信息&quot;Bye.&quot;到控制台上，之后跳出switch语句，再结束程序。</p><p>一旦输入的字符串既不是&quot;continue&quot;也不是&quot;quit&quot;，就会进入&quot;default:&quot;分支。于是，将会输出一个出错信息到控制台上，之后执行&quot;goto decide:&quot;命令。这就使得程序转跳到&quot;decide:&quot; 标号后面的第一条语句, 该语句执行后，将会询问用户是否愿意continue（继续）还是 quit（退出）。这是个有效的循环。</p><p>显然，&quot;goto&quot;语句功能强大，在受控的场合下，&quot;goto&quot;语句是很有用途的。但是，必须指出的是，&quot;goto&quot;如果出现被滥用的趋势，程序的调试和维护将会变得很困难。想象一下，如果程序到处可见goto语句，其流程将会变得难以阅读和理解。下节课中，将介绍在程序中创建循环语句的更好方法。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>现在，你已经了解了如何使用&quot;if&quot;语句的各种格式，也了解了如何使用&quot;switch&quot;语句。你也了解了使用&quot;break&quot;语句可以从&quot;switch&quot;语句中推出。最后，你也了解了如何使用&quot;goto&quot;语句跳到程序的另外一个部分。</p><p>(责任编辑:DawnSummit guixf@staff.ccidnet.com)</p>`,22),e=[p];function u(c,l){return s(),a("div",null,e)}const k=n(o,[["render",u],["__file","cspcls4_3.html.vue"]]);export{k as default};
