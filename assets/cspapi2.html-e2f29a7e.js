import{_ as n,o as s,c as a,a as t}from"./app-f0851ed3.js";const p={},e=t(`<h1 id="c-调用windows-api函数" tabindex="-1"><a class="header-anchor" href="#c-调用windows-api函数" aria-hidden="true">#</a> C#调用Windows API函数</h1><p>Api函数是构筑Windws应用程序的基石，每一种Windows应用程序开发工具，它提供的底层函数都间接或直接地调用了Windows API函数，同时为了实现功能扩展，一般也都提供了调用WindowsAPI函数的接口， 也就是说具备调用动态连接库的能力。Visual C#和其它开发工具一样也能够调用动态链接库的API函数。.NET框架本身提供了这样一种服务,允许受管辖的代码调用动态链接库中实现的非受管辖函数,包括操作系统提供的Windows API函数。它能够定位和调用输出函数,根据需要，组织其各个参数(整型、字符串类型、数组、和结构等等)跨越互操作边界。</p><p>下面以C#为例简单介绍调用API的基本过程：</p><h2 id="动态链接库函数的声明" tabindex="-1"><a class="header-anchor" href="#动态链接库函数的声明" aria-hidden="true">#</a> 动态链接库函数的声明</h2><p>动态链接库函数使用前必须声明，相对于VB,C#函数声明显得更加罗嗦，前者通过 Api Viewer粘贴以后，可以直接使用，而后者则需要对参数作些额外的变化工作。</p><p>动态链接库函数声明部分一般由下列两部分组成，一是函数名或索引号，二是动态链接库的文件名。</p><p>譬如，你想调用User32.DLL中的MessageBox函数，我们必须指明函数的名字MessageBoxA或MessageBoxW，以及库名字User32.dll,我们知道Win32 API对每一个涉及字符串和字符的函数一般都存在两个版本，单字节字符的ANSI版本和双字节字符的UNICODE版本。</p><p>下面是一个调用API函数的例子：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;KERNEL32.DLL&quot;</span><span class="token punctuation">,</span> EntryPoint<span class="token operator">=</span><span class="token string">&quot;MoveFileW&quot;</span><span class="token punctuation">,</span> SetLastError<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>  
CharSet<span class="token operator">=</span>CharSet<span class="token punctuation">.</span>Unicode<span class="token punctuation">,</span> ExactSpelling<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>  
CallingConvention<span class="token operator">=</span>CallingConvention<span class="token punctuation">.</span>StdCall<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>  
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">MoveFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span> <span class="token class-name">String</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre></div><p>其中入口点EntryPoint标识函数在动态链接库的入口位置，在一个受管辖的工程中，目标函数的原始名字和序号入口点不仅标识一个跨越互操作界限的函数。而且，你还可以把这个入口点映射为一个不同的名字，也就是对函数进行重命名。重命名可以给调用函数带来种种便利，通过重命名，一方面我们不用为函数的大小写伤透脑筋，同时它也可以保证与已有的命名规则保持一致，允许带有不同参数类型的函数共存，更重要的是它简化了对ANSI和Unicode版本的调用。CharSet用于标识函数调用所采用的是Unicode或是ANSI版本，ExactSpelling＝false将告诉编译器,让编译器决定使用Unicode或者是Ansi版本。其它的参数请参考MSDN在线帮助.</p><p>在C#中，你可以在EntryPoint域通过名字和序号声明一个动态链接库函数，如果在方法定义中使用的函数名与DLL入口点相同，你不需要在EntryPoint域显示声明函数。否则，你必须使用下列属性格式指示一个名字和序号。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;dllname&quot;</span><span class="token punctuation">,</span> EntryPoint<span class="token operator">=</span><span class="token string">&quot;Functionname&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>  
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;dllname&quot;</span><span class="token punctuation">,</span> EntryPoint<span class="token operator">=</span><span class="token string">&quot;#123&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
</code></pre></div><p>值得注意的是，你必须在数字序号前加“＃”<br> 下面是一个用MsgBox替换MessageBox名字的例子：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// [C#]  </span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>  

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Win32</span> <span class="token punctuation">{</span>  
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user32.dll&quot;</span><span class="token punctuation">,</span> EntryPoint<span class="token operator">=</span><span class="token string">&quot;MessageBox&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>  
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MsgBox</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> hWnd<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> caption<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre></div><p>许多受管辖的动态链接库函数期望你能够传递一个复杂的参数类型给函数，譬如一个用户定义的结构类型成员或者受管辖代码定义的一个类成员，这时你必须提供额外的信息格式化这个类型，以保持参数原有的布局和对齐。</p><p>C#提供了一个StructLayoutAttribute类，通过它你可以定义自己的格式化类型，在受管辖代码中，格式化类型是一个用StructLayoutAttribute说明的结构或类成员，通过它能够保证其内部成员预期的布局信息。布局的选项共有三种：</p><table><thead><tr><th>布局选项</th><th>描述</th></tr></thead><tbody><tr><td>LayoutKind.Automatic</td><td>为了提高效率允许运行态对类型成员重新排序。<br>注意：永远不要使用这个选项来调用不受管辖的动态链接库函数。</td></tr><tr><td>LayoutKind.Explicit</td><td>对每个域按照FieldOffset属性对类型成员排序</td></tr><tr><td>LayoutKind.Sequential</td><td>对出现在受管辖类型定义地方的不受管辖内存中的类型成员进行排序。</td></tr></tbody></table><h3 id="传递结构成员" tabindex="-1"><a class="header-anchor" href="#传递结构成员" aria-hidden="true">#</a> 传递结构成员</h3><p>下面的例子说明如何在受管辖代码中定义一个点和矩形类型，并作为一个参数传递给User32.dll库中的PtInRect函数，函数的不受管辖原型声明如下：</p><p><code>BOOL PtInRect(const RECT *lprc, POINT pt);</code></p><p>注意你必须通过引用传递Rect结构参数，因为函数需要一个Rect的结构指针。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// [C#]  </span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StructLayout</span><span class="token attribute-arguments"><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">Point</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StructLayout</span><span class="token attribute-arguments"><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Explicit<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">Rect</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FieldOffset</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> left<span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FieldOffset</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> top<span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FieldOffset</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> right<span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FieldOffset</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> bottom<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Win32API</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;User32.dll&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">Bool</span> <span class="token function">PtInRect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">Rect</span> r<span class="token punctuation">,</span> <span class="token class-name">Point</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>类似你可以调用GetSystemInfo函数获得系统信息：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StructLayout</span><span class="token attribute-arguments"><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">SYSTEM_INFO</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwOemId<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwPageSize<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> lpMinimumApplicationAddress<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> lpMaximumApplicationAddress<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwActiveProcessorMask<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwNumberOfProcessors<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwProcessorType<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwAllocationGranularity<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwProcessorLevel<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwProcessorRevision<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetSystemInfo</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">SYSTEM_INFO</span> pSI<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">SYSTEM_INFO</span> pSI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SYSTEM_INFO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">GetSystemInfo</span><span class="token punctuation">(</span><span class="token keyword">ref</span> pSI<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="类成员的传递" tabindex="-1"><a class="header-anchor" href="#类成员的传递" aria-hidden="true">#</a> 类成员的传递</h3><p>同样只要类具有一个固定的类成员布局，你也可以传递一个类成员给一个不受管辖的动态链接库函数，下面的例子主要说明如何传递一个sequential顺序定义的MySystemTime类给User32.dll的GetSystemTime函数, 函数用C/C++调用规范如下:</p><p><code>void GetSystemTime(SYSTEMTIME* SystemTime);</code></p><p>不像传值类型,类总是通过引用传递参数.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//[C#]  </span>
<span class="token punctuation">[</span><span class="token function">StructLayout</span><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span><span class="token punctuation">]</span>  
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySystemTime</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wYear<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wMonth<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wDayOfWeek<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wDay<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wHour<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wMinute<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wSecond<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wMilliseconds<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">class</span> <span class="token class-name">Win32API</span> <span class="token punctuation">{</span>  
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;User32.dll&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetSystemTime</span><span class="token punctuation">(</span><span class="token class-name">MySystemTime</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre></div><h3 id="回调函数的传递" tabindex="-1"><a class="header-anchor" href="#回调函数的传递" aria-hidden="true">#</a> 回调函数的传递</h3><p>从受管辖的代码中调用大多数动态链接库函数,你只需创建一个受管辖的函数定义，然后调用它即可,这个过程非常直接。<br> 如果一个动态链接库函数需要一个函数指针作为参数，你还需要做以下几步：<br> 首先，你必须参考有关这个函数的文档，确定这个函数是否需要一个回调；第二，你必须在受管辖代码中创建一个回调函数；最后，你可以把指向这个函数的指针作为一个参数创递给DLL函数,.</p><h4 id="回调函数及其实现" tabindex="-1"><a class="header-anchor" href="#回调函数及其实现" aria-hidden="true">#</a> 回调函数及其实现</h4><p>回调函数经常用在任务需要重复执行的场合,譬如用于枚举函数,譬如Win32 API 中的EnumFontFamilies(字体枚举), EnumPrinters(打印机), EnumWindows (窗口枚举)函数. 下面以窗口枚举为例,谈谈如何通过调用EnumWindow 函数遍历系统中存在的所有窗口</p><p>分下面几个步骤:</p><ol><li>在实现调用前先参考函数的声明<br><code>BOOL EnumWindows(WNDENUMPROC lpEnumFunc, LPARMAM IParam)</code> 显然这个函数需要一个回调函数地址作为参数.</li><li>创建一个受管辖的回调函数,这个例子声明为代表类型(delegate),也就是我们所说的回调,它带有两个参数hwnd和lparam,第一个参数是一个窗口句柄，第二个参数由应用程序定义，两个参数均为整形。<br><br>当这个回调函数返回一个非零值时，标示执行成功，零则暗示失败，这个例子总是返回True值，以便持续枚举。</li><li>最后创建以代表对象(delegate)，并把它作为一个参数传递给EnumWindows 函数，平台会自动地 把代表转化成函数能够识别的回调格式。</li></ol><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//[C#]</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CallBack</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> hwnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> lParam<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumReportApp</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">EnumWindows</span><span class="token punctuation">(</span><span class="token class-name">CallBack</span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">CallBack</span> myCallBack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CallBack</span><span class="token punctuation">(</span>EnumReportApp<span class="token punctuation">.</span>Report<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">EnumWindows</span><span class="token punctuation">(</span>myCallBack<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> hwnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> lParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;窗口句柄为&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="指针类型参数传递" tabindex="-1"><a class="header-anchor" href="#指针类型参数传递" aria-hidden="true">#</a> 指针类型参数传递</h3><p>在Windows API函数调用时，大部分函数采用指针传递参数，对一个结构变量指针，我们除了使用上面的类和结构方法传递参数之外，我们有时还可以采用数组传递参数。</p><p>下面这个函数通过调用GetUserName获得用户名</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name">BOOL</span> <span class="token function">GetUserName</span><span class="token punctuation">(</span>
    <span class="token class-name">LPTSTR</span> lpBuffer<span class="token punctuation">,</span> <span class="token comment">// 用户名缓冲区</span>
    LPDWORD nSize <span class="token comment">// 存放缓冲区大小的地址指针</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Advapi32.dll&quot;</span><span class="token punctuation">,</span>
    EntryPoint<span class="token operator">=</span><span class="token string">&quot;GetComputerName&quot;</span><span class="token punctuation">,</span>
    ExactSpelling<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    SetLastError<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> GetComputerName <span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MarshalAs</span><span class="token attribute-arguments"><span class="token punctuation">(</span>UnmanagedType<span class="token punctuation">.</span>LPArray<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> lpBuffer<span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MarshalAs</span><span class="token attribute-arguments"><span class="token punctuation">(</span>UnmanagedType<span class="token punctuation">.</span>LPArray<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token class-name">Int32<span class="token punctuation">[</span><span class="token punctuation">]</span></span> nSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这个函数接受两个参数，<code>char *</code> 和<code>int *</code>,因为你必须分配一个字符串缓冲区以接受字符串指针，你可以使用String类代替这个参数类型，当然你还可以声明一个字节数组传递ANSI字符串，同样你也可以声明一个只有一个元素的长整型数组，使用数组名作为第二个参数。上面的函数可以调用如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token class-name">Int32<span class="token punctuation">[</span><span class="token punctuation">]</span></span> len<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Int32</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
len<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>  
GetComputerName <span class="token punctuation">(</span>str<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>  
MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>最后需要提醒的是，每一种方法使用前必须在文件头加上：</p><p><code>using System.Runtime.InteropServices;</code></p>`,44),o=[e];function c(l,u){return s(),a("div",null,o)}const i=n(p,[["render",c],["__file","cspapi2.html.vue"]]);export{i as default};
