import{_ as e,r as p,o,c,b as n,d as s,e as u,a as l}from"./app-477de5b2.js";const a="/steven-blogs/assets/netsoc7_1-51101975.gif",i={},k={id:"异步socket通信",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#异步socket通信","aria-hidden":"true"},"#",-1),d={href:"https://www.codeproject.com/Articles/1608/Asynchronous-Socket-Communication",target:"_blank",rel:"noopener noreferrer"},h=l('<p>本文介绍如何使用非阻塞方式的Socket通信，并且创建了一个聊天程序的例子来帮助说明。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>本文介绍如何在多个应用程序之间创建和使用TCP/IP Socket来进行通信。这些应用程序可以运行在同一台机器，也可以在局域网内，甚至也可以是跨越Internet的*。这种方法的好处是不需要你自己来使用线程，而是通过调用Socket的非阻塞模式来实现。在例子中：服务器创建病侦听客户端的连接，一旦有客户连接，服务器就将其加入到一个活动客户的列表中，某个客户端发送的消息也有服务器发送到各个连接的客户端，就好像聊天室中的那样。或许Remoting （远程调用）是做这种工作更好的办法，但是我们这里还是来学习学习如何使用Socket来实现。</p><p>*注意：跨越Internet的通讯要求服务器有独立的IP地址并且不在代理或是防火墙之后。</p><h3 id="事件时序" tabindex="-1"><a class="header-anchor" href="#事件时序" aria-hidden="true">#</a> 事件时序</h3><p>服务器必须要先侦听，客户端才能够连接。下面的图例说明了在一个异步Socket会话中的事件时序。</p><p><img src="'+a+`" alt="socketsincs_2"></p><h3 id="运行示例" tabindex="-1"><a class="header-anchor" href="#运行示例" aria-hidden="true">#</a> 运行示例</h3><p>实例代码分为两部分：ChatServer 和ChatClient. 我们首先来创建ChatServer ，然后使用下面的Telnet命令来测试它。</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>telnet {server machine IP address or machine name} 399
telnet 10.328.32.76 399
</code></pre></div><p>这时，服务器上应该出现一条消息来表明这个客户连接的地址和端口。在任一个telnet窗口中键入的字符都会回显到所有与服务器连接的telnet的窗口中。试试从多台机器上并发连接服务器。不要使用localhost或者127.0.0.1来作为服务器程序唯一的侦听地址。</p><p>然后运行ChatClient实例作相同的试验和多个客户端和多个telnet并存的测试。</p><h3 id="为什么要使用-net的socket" tabindex="-1"><a class="header-anchor" href="#为什么要使用-net的socket" aria-hidden="true">#</a> 为什么要使用.NET的Socket?</h3><p>.NET在很多地方都用到了sockets，比如：WebServices和Remoting。但是在那些应用中底层的Socket支持已经做好了，不需要直接使用。但是，和其他非.NET系统的Socket打交道或简单通信的场合中Socket的使用还是很有必要的。它可以用来和诸如DOS，Windows和UNIX系统进行通信。底层的Socket应用也可以让你减少了诸如组测，权限，域（domains），用户ID,密码等这些麻烦的安全方面的顾虑。</p><h2 id="chatserver-listener" tabindex="-1"><a class="header-anchor" href="#chatserver-listener" aria-hidden="true">#</a> ChatServer / Listener</h2><p>服务器侦听端口，当有连接请求时，接受该连接并返回一条欢迎信息。在例子中客户连接被加到一个活动客户列表m_aryClients中去。这个列表会根据客户加入和离开作相应的增删。在某些情况下可能会丢失连接，所以在实际的系统中还应该有轮询侦测客户端是否在线的部分。当服务器端的listener收到客户端发来的信息后，它会把消息广播到所有连接的客户端。</p><p>下面讨论两种侦听的方法，一个是用轮询(polling)，另外一个在使用事件来侦测连接的请求。</p><h3 id="方法1-–-使用轮询的-tcplistener" tabindex="-1"><a class="header-anchor" href="#方法1-–-使用轮询的-tcplistener" aria-hidden="true">#</a> 方法1 – 使用轮询的 TcpListener</h3><p>System.Net.Sockets中的TcpListener 类为我们提供了一个侦听和处理客户连接的简单手段。下面的代码侦听连接，接受连接，并且向客户连接发回一个带有时间戳的欢迎信息。如果有另外一个连接请求到来，原来的连接将会丢失。注意，欢迎信息是采用ASCII编码，而不是UNICODE。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name">Socket</span> client <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> nPortListen <span class="token operator">=</span> <span class="token number">399</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token class-name">TcpListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TcpListener</span><span class="token punctuation">(</span> nPortListen <span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span> <span class="token string">&quot;Listening as {0}&quot;</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span>LocalEndpoint <span class="token punctuation">)</span><span class="token punctuation">;</span>
    listener<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span> m_byBuff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> listener<span class="token punctuation">.</span><span class="token function">Pending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            client <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">AcceptSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Get current date and time.</span>
            <span class="token class-name">DateTime</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> strDateLine <span class="token operator">=</span> <span class="token string">&quot;Welcome &quot;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">;</span>

            <span class="token comment">// Convert to byte array and send.</span>
            <span class="token class-name">Byte<span class="token punctuation">[</span><span class="token punctuation">]</span></span> byteDateLine <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span> strDateLine<span class="token punctuation">.</span><span class="token function">ToCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            client<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span> byteDateLine<span class="token punctuation">,</span> byteDateLine<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Don&#39;t use this. </span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span>WriteLine <span class="token punctuation">(</span> ex<span class="token punctuation">.</span>Message <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="方法2-–-使用带事件的socket" tabindex="-1"><a class="header-anchor" href="#方法2-–-使用带事件的socket" aria-hidden="true">#</a> 方法2 – 使用带事件的Socket</h3><p>一个更为优雅的方法是创建一个事件来捕捉连接请求。ChatServer实例就采用了这种方法。首先服务器的名字和地址用下面的代码取得。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IPAddress <span class="token punctuation">[</span><span class="token punctuation">]</span></span> aryLocalAddr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> strHostName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token comment">// NOTE: DNS lookups are nice and all but quite time consuming.</span>
    strHostName <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">GetHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IPHostEntry</span> ipEntry <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">GetHostByName</span><span class="token punctuation">(</span> strHostName <span class="token punctuation">)</span><span class="token punctuation">;</span>
    aryLocalAddr <span class="token operator">=</span> ipEntry<span class="token punctuation">.</span>AddressList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span>WriteLine <span class="token punctuation">(</span><span class="token string">&quot;Error trying to get local address {0} &quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Message <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Verify we got an IP address. Tell the user if we did</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> aryLocalAddr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> aryLocalAddr<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span> <span class="token string">&quot;Unable to get local address&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span> <span class="token string">&quot;Listening on : [{0}] {1}&quot;</span><span class="token punctuation">,</span> strHostName<span class="token punctuation">,</span> aryLocalAddr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>得到地址之后，我们要把listener这个Socket绑定到这个地址。我们这里使用的侦听端口是399。此外，从位于&quot;C:\\WinNT\\System32\\drivers\\etc\\Services&quot;的服务文件中读取端口号应该是一个很好的练习。下面的代码绑定Listener并且开始侦听。一个事件handler把所有的连接请求都指向了OnConnectRequest。这样程序就可以不需要等待或者轮询来处理客户连接了。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> nPortListen <span class="token operator">=</span> <span class="token number">399</span><span class="token punctuation">;</span>
<span class="token comment">// Create the listener socket in this machines IP address</span>
<span class="token class-name">Socket</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span> AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp <span class="token punctuation">)</span><span class="token punctuation">;</span>
listener<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span> aryLocalAddr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">399</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//listener.Bind( new IPEndPoint( IPAddress.Loopback, 399 ) );    // For use with localhost 127.0.0.1</span>
listener<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Setup a callback to be notified of connection requests</span>
listener<span class="token punctuation">.</span><span class="token function">BeginAccept</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span> app<span class="token punctuation">.</span>OnConnectRequest <span class="token punctuation">)</span><span class="token punctuation">,</span> listener <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>当客户连接请求到达时，就会激发下面的处理事件。下面的代码首先创建了client （Socket），然后发回欢迎信息，接着重新建立了接受事件处理(accept event handler)。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Socket</span> client<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConnectRequest</span><span class="token punctuation">(</span> <span class="token class-name">IAsyncResult</span> ar <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Socket</span> listener <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>ar<span class="token punctuation">.</span>AsyncState<span class="token punctuation">;</span>
    client <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">EndAccept</span><span class="token punctuation">(</span> ar <span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span> <span class="token string">&quot;Client {0}, joined&quot;</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span>RemoteEndPoint <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get current date and time.</span>
    <span class="token class-name">DateTime</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> strDateLine <span class="token operator">=</span> <span class="token string">&quot;Welcome &quot;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">;</span>
 
    <span class="token comment">// Convert to byte array and send.</span>
    <span class="token class-name">Byte<span class="token punctuation">[</span><span class="token punctuation">]</span></span> byteDateLine <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span> strDateLine<span class="token punctuation">.</span><span class="token function">ToCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span> byteDateLine<span class="token punctuation">,</span> byteDateLine<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    listener<span class="token punctuation">.</span><span class="token function">BeginAccept</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span> OnConnectRequest <span class="token punctuation">)</span><span class="token punctuation">,</span> listener <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这段代码可以扩展，维护客户Socket的列表，监控数据接收和连接断开。对于连接断开的侦测放在AsyncCallback 事件处理中。ChatClient部分将在下面细述该机制。</p><h2 id="chatclient" tabindex="-1"><a class="header-anchor" href="#chatclient" aria-hidden="true">#</a> ChatClient</h2><p>ChatClient是一个Windows Form应用程序，用来连接服务器，收发消息。</p><h3 id="连接" tabindex="-1"><a class="header-anchor" href="#连接" aria-hidden="true">#</a> 连接</h3><p>当点击界面上的连接按钮使执行下面的程序使客户连接到服务器。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name">Socket</span> m_sock <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">m_btnConnect_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Cursor</span> cursor <span class="token operator">=</span> Cursor<span class="token punctuation">.</span>Current<span class="token punctuation">;</span>
    Cursor<span class="token punctuation">.</span>Current <span class="token operator">=</span> Cursors<span class="token punctuation">.</span>WaitCursor<span class="token punctuation">;</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Close the socket if it is still open</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> m_sock <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> m_sock<span class="token punctuation">.</span>Connected <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_sock<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span> SocketShutdown<span class="token punctuation">.</span>Both <span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_sock<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Create the socket object</span>
        m_sock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span> AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp <span class="token punctuation">)</span><span class="token punctuation">;</span>    
 
        <span class="token comment">// Define the Server address and port</span>
        <span class="token class-name">IPEndPoint</span> epServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>  IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span> m_tbServerAddress<span class="token punctuation">.</span>Text <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">399</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">// Connect to the server blocking method and setup callback for recieved data</span>
        <span class="token comment">// m_sock.Connect( epServer );</span>
        <span class="token comment">// SetupRecieveCallback( m_sock );</span>
        
        <span class="token comment">// Connect to server non-Blocking method</span>
        m_sock<span class="token punctuation">.</span>Blocking <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">AsyncCallback</span> onconnect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span> OnConnect <span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_sock<span class="token punctuation">.</span><span class="token function">BeginConnect</span><span class="token punctuation">(</span> epServer<span class="token punctuation">,</span> onconnect<span class="token punctuation">,</span> m_sock <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;Server Connect failed!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Cursor<span class="token punctuation">.</span>Current <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果连接已经存在就销毁它。创建一个Socket和指定的端点相连。 被注释掉部分的代码采用简单的阻塞式连接方法。BeginConnect 则用来做一个非阻塞的连接请求。注意，即使是一个非阻塞的用户连接请求，连接也回被阻塞知道机器名称被解析为IP地址。所以，要尽量使用IP地址而不是机器名来避免这种情况。一旦连接请求处理完毕就会调用下面的方法，它显示连接错误或者在成功连接的情况下建立起接收数据的回调。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConnect</span><span class="token punctuation">(</span> <span class="token class-name">IAsyncResult</span> ar <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Socket was the passed in object</span>
    <span class="token class-name">Socket</span> sock <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>ar<span class="token punctuation">.</span>AsyncState<span class="token punctuation">;</span>

    <span class="token comment">// Check if we were sucessfull</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//    sock.EndConnect( ar );</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> sock<span class="token punctuation">.</span>Connected <span class="token punctuation">)</span>
            <span class="token function">SetupRecieveCallback</span><span class="token punctuation">(</span> sock <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;Unable to connect to remote machine&quot;</span><span class="token punctuation">,</span> 
                             <span class="token string">&quot;Connect Failed!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;Unusual error during Connect!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre></div><h3 id="接收数据" tabindex="-1"><a class="header-anchor" href="#接收数据" aria-hidden="true">#</a> 接收数据</h3><p>为了异步接收数据，有必要建立一个AsyncCallback 来处理被诸如接到数据和连接断开所激发的事件。用下面的方法。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>    m_byBuff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// Recieved data buffer</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetupRecieveCallback</span><span class="token punctuation">(</span> <span class="token class-name">Socket</span> sock <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">AsyncCallback</span> recieveData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span> OnRecievedData <span class="token punctuation">)</span><span class="token punctuation">;</span>
        sock<span class="token punctuation">.</span><span class="token function">BeginReceive</span><span class="token punctuation">(</span> m_byBuff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m_byBuff<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> SocketFlags<span class="token punctuation">.</span>None<span class="token punctuation">,</span>
            recieveData<span class="token punctuation">,</span> sock <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;Setup Recieve Callback failed!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>SetupRecieveCallback 方法启动了BeginReceive ，并利用代理指针把回调指向OnReceveData 方法。同时它也把一个用来接收数据的缓冲传递过去。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnRecievedData</span><span class="token punctuation">(</span> <span class="token class-name">IAsyncResult</span> ar <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Socket was the passed in object</span>
    <span class="token class-name">Socket</span> sock <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>ar<span class="token punctuation">.</span>AsyncState<span class="token punctuation">;</span>

    <span class="token comment">// Check if we got any data</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nBytesRec <span class="token operator">=</span> sock<span class="token punctuation">.</span><span class="token function">EndReceive</span><span class="token punctuation">(</span> ar <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> nBytesRec <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Wrote the data to the List</span>
            <span class="token class-name"><span class="token keyword">string</span></span> sRecieved <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span> m_byBuff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nBytesRec <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
            <span class="token comment">// WARNING : The following line is NOT thread safe. Invoke is</span>
            <span class="token comment">// m_lbRecievedData.Items.Add( sRecieved );</span>
            <span class="token function">Invoke</span><span class="token punctuation">(</span> m_AddMessage<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> sRecieved <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
            <span class="token comment">// If the connection is still usable restablish the callback</span>
            <span class="token function">SetupRecieveCallback</span><span class="token punctuation">(</span> sock <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// If no data was recieved then the connection is probably dead</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span> <span class="token string">&quot;Client {0}, disconnected&quot;</span><span class="token punctuation">,</span> sock<span class="token punctuation">.</span>RemoteEndPoint <span class="token punctuation">)</span><span class="token punctuation">;</span>
            sock<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span> SocketShutdown<span class="token punctuation">.</span>Both <span class="token punctuation">)</span><span class="token punctuation">;</span>
            sock<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;Unusual error druing Recieve!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>当上面的事件被激发时，接收到的数据被默认为是ASCII编码的。新数据也会被激发的事件显示出来。尽管可以调用Add() 在列表中显示新数据，但这并不是一个好主意，因为收到的数据很有可能要被送到其他线程中去处理。注意，需要在接收之后重建接收回调，来确保可以继续接收数据。因为有可能数据很多，超过最初的buffer容量。</p><p>创建 AddMessage 委托可以降低Socket线程和用户界面线程的耦合程度，如下所示：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Declare the delegate prototype to send data back to the form</span>
<span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddMessage</span><span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">string</span></span> sNewMessage <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">ChatClient</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormMain</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Form</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">event</span> <span class="token class-name">AddMessage</span> m_AddMessage<span class="token punctuation">;</span>
        <span class="token comment">// Add Message Event handler for Form</span>
        <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>

        <span class="token keyword">public</span> <span class="token function">FormMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> 
            <span class="token comment">// Add Message Event handler for Form decoupling from input thread</span>
            m_AddMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AddMessage</span><span class="token punctuation">(</span> OnAddMessage <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnAddMessage</span><span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">string</span></span> sMessage <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Thread safe operation here</span>
            m_lbRecievedData<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span> sMessage <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
 
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnSomeOtherThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>
            <span class="token class-name"><span class="token keyword">string</span></span> sSomeText <span class="token operator">=</span> <span class="token string">&quot;Bilbo Baggins&quot;</span><span class="token punctuation">;</span>
            <span class="token function">Invoke</span><span class="token punctuation">(</span> m_AddMessage<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> sSomeText <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre></div><h3 id="使用unicode" tabindex="-1"><a class="header-anchor" href="#使用unicode" aria-hidden="true">#</a> 使用UNICODE</h3><p>当时用比特流来发送接收数据时，数据就需要被适当的编码。C# 采用多字节字符编码，尽管这里使用Encoding.ASCII ，但如果需要也可以使用Encoding.UNICODE</p><h3 id="不要相信发出什么就能收到什么" tabindex="-1"><a class="header-anchor" href="#不要相信发出什么就能收到什么" aria-hidden="true">#</a> 不要相信发出什么就能收到什么</h3><p>当接收数据事件被激发，接收的数据被放置到接收缓冲中去。在我们的开发中，分组发送往往对应一个分组接收事件。但是在真正的系统中并非如此。数据并不是都是规规矩矩的在报文中，而有可能被拆分到若干个分组中。不要指望总能收到完整的报文，也不要指望建立自己的符号标记报文的开始和结束就万事大吉了。</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>尽管使用Socket并不难，但是要用的很好还是需要大量的实践练习。当然在合适的场合你也应该试试使用WebServices或Remoting。此外，Wrox出版社的Professional ADO.NET Programming这本书很不错，值得一看。</p><hr><p>英文原文</p><p>Asynchronous socket communication</p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>This article shows how to create both ends of a TCP/IP socket connection between two or more applications. These application may be run, on the same machine, machines connected by a local area network or even machines communicating across the internet*. A key feature of this method is it does not your threads, instead using sockets in a non-blocking mode. In this example a server is created that listens for clients to connect. Once a client connects it is added to a list of active clients. If a client sends in a message it is broadcast to all connected clients in much the same way as a chat group would operate. Remoting would be a better way to do this, but we are here to learn about Sockets.</p><p>*Note, to communicate across the internet will require the server to have an IP address on the internet not hidden behind a proxy server as many ISPs do.</p><h3 id="sequence-of-events" tabindex="-1"><a class="header-anchor" href="#sequence-of-events" aria-hidden="true">#</a> Sequence of events</h3><p>Before a client can connect, the server must be listening. The following diagram shows the sequence of events that make up an asynchronous socket session.</p><p><img src="`+a+`" alt="img"></p><h3 id="running-the-sample" tabindex="-1"><a class="header-anchor" href="#running-the-sample" aria-hidden="true">#</a> Running the sample</h3><p>The sample code is divided into two application ChatServer that the clients connect to and ChatClient that connects to the client. Build the ChatServer first and test it using Telnet with the following command.</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>telnet {server machine IP address or machine name} 399
telnet 10.328.32.76 399
</code></pre></div><p>A message should appear on ChatServer indicating the address and the port number the client can connected on. Anything typed into the telnet window should echo back to all telnet windows connected to the server. Try making several concurrent connections from various machines. Do not use localhost or the 127.0.0.1 address as the server application is only listening on the address shown in the server start-up message.</p><p>Next run the ChatClient sample any try the same test using multiple instances of ChatClient and Telnet across various machines.</p><h3 id="why-use-sockets-with-net" tabindex="-1"><a class="header-anchor" href="#why-use-sockets-with-net" aria-hidden="true">#</a> Why use sockets with .NET?</h3><p>.NET uses sockets in may instances such as WebServices and Remoting, but in these instances the low level socket stuff is done for you and there is no need to use sockets directly. However, when interfacing to other non .NET systems sockets are a necessary and simple communication method. They can be used to communicate with DOS, Windows and UNIX systems. The low level sockets also allows you to avoid having to worry about registration, privileges, domains, user id&#39;s, password and other troublesome security issues.</p><h2 id="chatserver-listener-1" tabindex="-1"><a class="header-anchor" href="#chatserver-listener-1" aria-hidden="true">#</a> ChatServer/Listener</h2><p>The server listens for clients to connect when a connection is requested the server will accept the connection and return a welcome message. In the sample the connections are added to an array of active clients m_aryClients. As client connect and disconnect, this list will grow and shrink. It is not always possible to detect the loss of a connection, so in a production system there should be some form of polling to detect if the connection is still alive. When data is received on a listener it is broadcast to all connected clients.</p><p>Two methods of listening are discussed below one using polling the other events to detect connection requests.</p><h3 id="method-1-using-polled-tcplistener" tabindex="-1"><a class="header-anchor" href="#method-1-using-polled-tcplistener" aria-hidden="true">#</a> Method 1 - Using polled TcpListener</h3><p>Using the TcpListener class from System.Net.Sockets provides a simple method to listen for client connections and process them. The following code listens for a connection, accepts it and sends a welcome message with a time stamp. If another connection is requested the old one is lost. Note, the welcome message is returned in ASCII not UNICODE.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name">Socket</span> client <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> nPortListen <span class="token operator">=</span> <span class="token number">399</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token class-name">TcpListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TcpListener</span><span class="token punctuation">(</span> nPortListen <span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span> <span class="token string">&quot;Listening as {0}&quot;</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span>LocalEndpoint <span class="token punctuation">)</span><span class="token punctuation">;</span>
    listener<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span> m_byBuff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> listener<span class="token punctuation">.</span><span class="token function">Pending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            client <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">AcceptSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Get current date and time.</span>
            <span class="token class-name">DateTime</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> strDateLine <span class="token operator">=</span> <span class="token string">&quot;Welcome &quot;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">;</span>

            <span class="token comment">// Convert to byte array and send.</span>
            <span class="token class-name">Byte<span class="token punctuation">[</span><span class="token punctuation">]</span></span> byteDateLine <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span> strDateLine<span class="token punctuation">.</span><span class="token function">ToCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            client<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span> byteDateLine<span class="token punctuation">,</span> byteDateLine<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Don&#39;t use this. </span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span>WriteLine <span class="token punctuation">(</span> ex<span class="token punctuation">.</span>Message <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="method-2-using-socket-with-event" tabindex="-1"><a class="header-anchor" href="#method-2-using-socket-with-event" aria-hidden="true">#</a> Method 2 - Using Socket with event</h3><p>A more elegant method is to setup an event to catch connection attempts. The ChatServer sample uses this method. Firstly the name and address of the server is identified with the following code.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IPAddress <span class="token punctuation">[</span><span class="token punctuation">]</span></span> aryLocalAddr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> strHostName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token comment">// NOTE: DNS lookups are nice and all but quite time consuming.</span>
    strHostName <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">GetHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IPHostEntry</span> ipEntry <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">GetHostByName</span><span class="token punctuation">(</span> strHostName <span class="token punctuation">)</span><span class="token punctuation">;</span>
    aryLocalAddr <span class="token operator">=</span> ipEntry<span class="token punctuation">.</span>AddressList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span>WriteLine <span class="token punctuation">(</span><span class="token string">&quot;Error trying to get local address {0} &quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Message <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Verify we got an IP address. Tell the user if we did</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> aryLocalAddr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> aryLocalAddr<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span> <span class="token string">&quot;Unable to get local address&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span> <span class="token string">&quot;Listening on : [{0}] {1}&quot;</span><span class="token punctuation">,</span> strHostName<span class="token punctuation">,</span> aryLocalAddr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>With the address identified we need to bind the listener to this address. Here we are listening on port 399. It is good practice to read the port number from from the Services file located in &quot;C:\\WinNT\\System32\\drivers\\etc\\Services&quot;. The following code binds the listener and begins to listen. An event handler is added pointing all connection requests to OnConnectRequest. The application can now go about its business without having to wait or poll for clients to connect.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> nPortListen <span class="token operator">=</span> <span class="token number">399</span><span class="token punctuation">;</span>
<span class="token comment">// Create the listener socket in this machines IP address</span>
<span class="token class-name">Socket</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span> AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp <span class="token punctuation">)</span><span class="token punctuation">;</span>
listener<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span> aryLocalAddr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">399</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//listener.Bind( new IPEndPoint( IPAddress.Loopback, 399 ) );    // For use with localhost 127.0.0.1</span>
listener<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Setup a callback to be notified of connection requests</span>
listener<span class="token punctuation">.</span><span class="token function">BeginAccept</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span> app<span class="token punctuation">.</span>OnConnectRequest <span class="token punctuation">)</span><span class="token punctuation">,</span> listener <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When a client requests a connection, the connection request event handler is fired as follows. The following code creates a client sends a welcome message and and re-establishes the accept event handler.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Socket</span> client<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConnectRequest</span><span class="token punctuation">(</span> <span class="token class-name">IAsyncResult</span> ar <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Socket</span> listener <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>ar<span class="token punctuation">.</span>AsyncState<span class="token punctuation">;</span>
    client <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">EndAccept</span><span class="token punctuation">(</span> ar <span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span> <span class="token string">&quot;Client {0}, joined&quot;</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span>RemoteEndPoint <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get current date and time.</span>
    <span class="token class-name">DateTime</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> strDateLine <span class="token operator">=</span> <span class="token string">&quot;Welcome &quot;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// Convert to byte array and send.</span>
    <span class="token class-name">Byte<span class="token punctuation">[</span><span class="token punctuation">]</span></span> byteDateLine <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span> strDateLine<span class="token punctuation">.</span><span class="token function">ToCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span> byteDateLine<span class="token punctuation">,</span> byteDateLine<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    listener<span class="token punctuation">.</span><span class="token function">BeginAccept</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span> OnConnectRequest <span class="token punctuation">)</span><span class="token punctuation">,</span> listener <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This is expanded on in the sample code to allow the client socket to be kept in a list and monitored for received data and disconnections. Disconnections are detected on the client socket in the AsyncCallback event handler. The ChatClient details this mechanism below.</p><h2 id="chatclient-1" tabindex="-1"><a class="header-anchor" href="#chatclient-1" aria-hidden="true">#</a> ChatClient</h2><p>The ChatClient is a windows form application that connects to the server and displays messages that it receives and allow messages to be sent.</p><h3 id="connecting" tabindex="-1"><a class="header-anchor" href="#connecting" aria-hidden="true">#</a> Connecting</h3><p>The client connects connect to the server when the Connect button is pressed with the following code;</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name">Socket</span> m_sock <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">m_btnConnect_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Cursor</span> cursor <span class="token operator">=</span> Cursor<span class="token punctuation">.</span>Current<span class="token punctuation">;</span>
    Cursor<span class="token punctuation">.</span>Current <span class="token operator">=</span> Cursors<span class="token punctuation">.</span>WaitCursor<span class="token punctuation">;</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Close the socket if it is still open</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> m_sock <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> m_sock<span class="token punctuation">.</span>Connected <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_sock<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span> SocketShutdown<span class="token punctuation">.</span>Both <span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_sock<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Create the socket object</span>
        m_sock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span> AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp <span class="token punctuation">)</span><span class="token punctuation">;</span>    

        <span class="token comment">// Define the Server address and port</span>
        <span class="token class-name">IPEndPoint</span> epServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>  IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span> m_tbServerAddress<span class="token punctuation">.</span>Text <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">399</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Connect to the server blocking method and setup callback for recieved data</span>
        <span class="token comment">// m_sock.Connect( epServer );</span>
        <span class="token comment">// SetupRecieveCallback( m_sock );</span>
        
        <span class="token comment">// Connect to server non-Blocking method</span>
        m_sock<span class="token punctuation">.</span>Blocking <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">AsyncCallback</span> onconnect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span> OnConnect <span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_sock<span class="token punctuation">.</span><span class="token function">BeginConnect</span><span class="token punctuation">(</span> epServer<span class="token punctuation">,</span> onconnect<span class="token punctuation">,</span> m_sock <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;Server Connect failed!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Cursor<span class="token punctuation">.</span>Current <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>If the connection already exists it is destroyed. A Socket is then created and an end point established. The commented out code allows for the simpler blocking connection attempt. BeginConnect is used to commence a non blocking connection attempt. Note, even if a non-blocking connection is attempted, the connection will block until the machine name is resolved into an IP address, for this reason it is better to use the IP address than the machine name if possible to avoid blocking. The following method is called once the connection attempt is complete, it displays connection error or sets up the receive data callback if connected OK.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConnect</span><span class="token punctuation">(</span> <span class="token class-name">IAsyncResult</span> ar <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Socket was the passed in object</span>
    <span class="token class-name">Socket</span> sock <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>ar<span class="token punctuation">.</span>AsyncState<span class="token punctuation">;</span>

    <span class="token comment">// Check if we were sucessfull</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//    sock.EndConnect( ar );</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> sock<span class="token punctuation">.</span>Connected <span class="token punctuation">)</span>
            <span class="token function">SetupRecieveCallback</span><span class="token punctuation">(</span> sock <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;Unable to connect to remote machine&quot;</span><span class="token punctuation">,</span> 
                             <span class="token string">&quot;Connect Failed!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;Unusual error during Connect!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre></div><h3 id="receiving-data" tabindex="-1"><a class="header-anchor" href="#receiving-data" aria-hidden="true">#</a> Receiving data</h3><p>To receive data asynchronously, it is necessary to setup an AsyncCallback to handle events triggered by the Socket such as new data and loss of connection. This is done using the following method;</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>    m_byBuff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// Recieved data buffer</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetupRecieveCallback</span><span class="token punctuation">(</span> <span class="token class-name">Socket</span> sock <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">AsyncCallback</span> recieveData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span> OnRecievedData <span class="token punctuation">)</span><span class="token punctuation">;</span>
        sock<span class="token punctuation">.</span><span class="token function">BeginReceive</span><span class="token punctuation">(</span> m_byBuff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m_byBuff<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> SocketFlags<span class="token punctuation">.</span>None<span class="token punctuation">,</span>
            recieveData<span class="token punctuation">,</span> sock <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;Setup Recieve Callback failed!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The SetupRecieveCallback method starts a BeginReceive using a delegate pointing to the OnReceveData method that follows. It also passes a buffer for the receive data to be inserted into.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnRecievedData</span><span class="token punctuation">(</span> <span class="token class-name">IAsyncResult</span> ar <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Socket was the passed in object</span>
    <span class="token class-name">Socket</span> sock <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>ar<span class="token punctuation">.</span>AsyncState<span class="token punctuation">;</span>

    <span class="token comment">// Check if we got any data</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nBytesRec <span class="token operator">=</span> sock<span class="token punctuation">.</span><span class="token function">EndReceive</span><span class="token punctuation">(</span> ar <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> nBytesRec <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Wrote the data to the List</span>
            <span class="token class-name"><span class="token keyword">string</span></span> sRecieved <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span> m_byBuff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nBytesRec <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// WARNING : The following line is NOT thread safe. Invoke is</span>
            <span class="token comment">// m_lbRecievedData.Items.Add( sRecieved );</span>
            <span class="token function">Invoke</span><span class="token punctuation">(</span> m_AddMessage<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> sRecieved <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// If the connection is still usable restablish the callback</span>
            <span class="token function">SetupRecieveCallback</span><span class="token punctuation">(</span> sock <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// If no data was recieved then the connection is probably dead</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span> <span class="token string">&quot;Client {0}, disconnected&quot;</span><span class="token punctuation">,</span> sock<span class="token punctuation">.</span>RemoteEndPoint <span class="token punctuation">)</span><span class="token punctuation">;</span>
            sock<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span> SocketShutdown<span class="token punctuation">.</span>Both <span class="token punctuation">)</span><span class="token punctuation">;</span>
            sock<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">Exception</span> ex <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;Unusual error druing Recieve!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>When the above event is fired the receive data is assumed to be ASCII. The new data is sent to the display by invoking a delegate. Although it is possible to call Add() on the list to display the new data, it is a very bad idea because the received data will most likely be running in another thread. Note the receive callback must also be established again to continue to receive more events. Even if more data was received than can be placed in the input buffer, restabilising the receive callback will cause it to trigger until all data has been read.</p><p>The AddMessage delegate is created to decouple socket thread from user interface thread as follows;</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Declare the delegate prototype to send data back to the form</span>
<span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddMessage</span><span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">string</span></span> sNewMessage <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">ChatClient</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormMain</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Form</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">event</span> <span class="token class-name">AddMessage</span> m_AddMessage<span class="token punctuation">;</span>
        <span class="token comment">// Add Message Event handler for Form</span>
        <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>

        <span class="token keyword">public</span> <span class="token function">FormMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> 
            <span class="token comment">// Add Message Event handler for Form decoupling from input thread</span>
            m_AddMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AddMessage</span><span class="token punctuation">(</span> OnAddMessage <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnAddMessage</span><span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">string</span></span> sMessage <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Thread safe operation here</span>
            m_lbRecievedData<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span> sMessage <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnSomeOtherThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>
            <span class="token class-name"><span class="token keyword">string</span></span> sSomeText <span class="token operator">=</span> <span class="token string">&quot;Bilbo Baggins&quot;</span><span class="token punctuation">;</span>
            <span class="token function">Invoke</span><span class="token punctuation">(</span> m_AddMessage<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> sSomeText <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre></div><h3 id="working-in-unicode" tabindex="-1"><a class="header-anchor" href="#working-in-unicode" aria-hidden="true">#</a> Working in UNICODE</h3><p>When data is received or is to be sent the data is held in an array of 8 bit bytes. This data must be encoded to a format suitable for .NET when received and a format suitable for the receiving application when sent. C# uses a multibyte character encoding internally so data must be converted to that when it is received and before it is sent out using the Encoding.ASCII or Encoding.UNICODE static methods as necessary.</p><h3 id="don-t-believe-a-packet-sent-is-a-packet-received" tabindex="-1"><a class="header-anchor" href="#don-t-believe-a-packet-sent-is-a-packet-received" aria-hidden="true">#</a> Don&#39;t believe a packet sent is a packet received</h3><p>When the receive data event is triggered the received data is held in the input buffer. During development a packet sent often corresponds to a single trigging of the receive event and one complete set of data in the receive buffer. This is definitely not the case in a production system. Data is not packet-ised and actually consists of a stream of individual bytes that may be broken up into may packets. Do not relay on receiving complete packets and develop your own tags to indicate start and end of packet.</p><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><p>Although fairly simple to use Sockets do require a fair amount of code to get working well. Where possible you should try to use WebServices or Remoting in there place. Professional ADO.NET Programming by Wrox is a good book on other stuff, check it out.</p><h2 id="about-john-mctainsh" tabindex="-1"><a class="header-anchor" href="#about-john-mctainsh" aria-hidden="true">#</a> About John McTainsh</h2><p>I starting writing code when Apple IIe was all the rage (1982?). Graduated Mechanical Engineering in New Zealand, so I could build Robots. Took up Commerical diving in Asia for a few years to make some quick money (Spent it all). I have been writing C/C++/Assembly and building underwater robots since MS QuickC/Quick Assembler in 1989. I currently live in Australia and work mosly with MS VisualC.</p>`,102);function m(y,g){const t=p("ExternalLinkIcon");return o(),c("div",null,[n("h1",k,[r,s(),n("a",d,[s("异步Socket通信"),u(t)])]),h])}const f=e(i,[["render",m],["__file","netsoc7.html.vue"]]);export{f as default};
