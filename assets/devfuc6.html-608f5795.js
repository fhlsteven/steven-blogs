import{_ as e,o as i,c as l,a as o}from"./app-a2b6e588.js";const t={},c=o('<h1 id="项目管理方法新尝试" tabindex="-1"><a class="header-anchor" href="#项目管理方法新尝试" aria-hidden="true">#</a> 项目管理方法新尝试</h1><p>直困扰于项目的统一管理，怎么将众多存在或者不存在联系的项目用一个统一的界面来管理，曾经尝试过很多办法，比如sharepoint，project server。</p><p>我们发现，实际上，完成的类似于project那样精确的时间控制在国内比较难做到，特别是一些不是只有程序开发的项目。而我们需要关注的有下面这些：</p><ol><li>一个项目的所有文档要能被包括。比如需求、特性列表、开发文档、用户手册、宣传文档、执行文档、FAQ等等。</li><li>一个项目的不同版本的所有文档要被包括。有的项目升级可能比较多，所有的版本历史需要被保存下来。</li><li>客户端使用简单。最好不要有超过1个小时以上的培训，这点在实际工作中是一个非常要命的问题。</li><li>检查项目进度容易。包括检查一个项目、多个项目、按照team或者人来检查、检查所有同类型的文档(比如给销售的所有对外宣传文档)，这点和下面这点也是实际工作中的难点，project和cvs好像都比较难以胜任，前提还有培训简单。</li><li>领导检查的容易。不要小看这一点，你的动作成绩很多时候是难以衡量的，但是领导的衡量总是一个很重要的指标。要领导安装客户端或者自己看几十个excel报表，几乎是一件不可能的事情。</li><li>合作伙伴容易使用。不用多解释，合作伙伴包括内部的和外部的。</li><li>权限管理。没有必要把算法的设计文档提供给销售部的同事。</li><li>备份容易。</li><li>符合潮流。时髦还是要赶一下的。</li><li>安装和配置的容易。</li></ol><p>鉴于以上这些要求，我们比较了microsoft project, microsoft sharepoint, CVS, 传统的File shareing, 传统的FTP等我们试验过的方式，在投入的直接成本最少、不用盗版软件的前提之下，我们选用著名的mediawiki来完成以上的功能，实际的使用情况也要慢慢来查看了。至少我自己已经在pbwiki上开始进行kappa of disk项目的开发管理(早晚会将这个项目作为opensource，我的个人梦想，不代表团队和公司)。</p>',5),r=[c];function a(s,n){return i(),l("div",null,r)}const d=e(t,[["render",a],["__file","devfuc6.html.vue"]]);export{d as default};
