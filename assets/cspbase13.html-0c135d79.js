import{_ as n,o as s,c as a,a as t}from"./app-477de5b2.js";const p={},o=t(`<h1 id="c-实现控件数组" tabindex="-1"><a class="header-anchor" href="#c-实现控件数组" aria-hidden="true">#</a> C#实现控件数组</h1><p>DotNet里取消了控件数组，这让习惯了使用VB控件的程序员非常不适应。有什么办法能够实现控件数组的功能吗?答案是肯定的。</p><p>众所周知，控件数组最主要的两个优点：可以循环附值；可以响应同一个事件。从而大大简化了代码。下面根据这两个方面，举一个例子。</p><p>新建一个工程，在窗体上添加5个textbox（textBox1...textBox5）和2个button (button1、button2)。</p><h2 id="_1-循环附值" tabindex="-1"><a class="header-anchor" href="#_1-循环附值" aria-hidden="true">#</a> 1.循环附值</h2><p>总的来说，有两种实现方法：</p><p>1.1 定义动态的控件数组。因为DotNet里支持动态的控件数组，所以我们可以把已设计好的控件，附给动态的数组，这样就可以任意的使用了。代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">TextBox<span class="token punctuation">[</span><span class="token punctuation">]</span></span> myTextBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextBox</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    myTextBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> textBox1<span class="token punctuation">;</span>
    myTextBox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> textBox2<span class="token punctuation">;</span>
    myTextBox<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> textBox3<span class="token punctuation">;</span>
    myTextBox<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> textBox4<span class="token punctuation">;</span>
    myTextBox<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> textBox5<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        myTextBox<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;fill_1&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>1.2 利用窗体的控件数组。因为窗体里的控件，都被包括在Control里面，所以可以根据其类别加以区分。代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button2_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">Control</span> myControls <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>myControls<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;TextBox&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            myControls<span class="token punctuation">.</span>Text <span class="token operator">=</span><span class="token string">&quot;fill_2&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_2-事件响应" tabindex="-1"><a class="header-anchor" href="#_2-事件响应" aria-hidden="true">#</a> 2.事件响应</h2><p>让数组里的控件都响应同一个相应的事件，通过起在数组里唯一的标识，再将他们加以区分。下面一个例子，使5个textBox响应同一个keypress事件。</p><p>自定义一个控件事件-- textBox_KeyPress ，代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">textBox_KeyPress</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>KeyPressEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">TextBox</span> box <span class="token operator">=</span> <span class="token punctuation">(</span>TextBox<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>
    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">&quot;you choose &quot;</span> <span class="token operator">+</span> box<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot; and you keypress &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>KeyChar<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token string">&quot;try&quot;</span> <span class="token punctuation">,</span>MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>选定textBox1，按F4显示其属性页，选择&quot;Events&quot;按钮（就是那个小闪电），列出了textBox1的所有事件，在keypress里写我们想让他相应的事件的名字--textBox_KeyPress，这样，当textBox1产生keypress事件时，他相应的是textBox_KeyPress这个我们自定义的事件。同样，对其它的textBox控件也做如上的属性设置。这样，5个textBox同时响应一个keypress事件，而可以通过object sender的不同，可以加以区分。这样就达到了数组的效果。</p><p>以上是根据本人的一点经验总结而得，如果有其他好的方法，欢迎探讨。</p><p>minajo21(大眼睛)</p>`,17),e=[o];function c(u,l){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","cspbase13.html.vue"]]);export{i as default};
