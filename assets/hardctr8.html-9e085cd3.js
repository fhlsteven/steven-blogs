import{_ as n,o as s,c as a,a as t}from"./app-a2b6e588.js";const e={},p=t(`<h1 id="键盘部分代码" tabindex="-1"><a class="header-anchor" href="#键盘部分代码" aria-hidden="true">#</a> 键盘部分代码</h1><h2 id="_1。获取键盘上的字符" tabindex="-1"><a class="header-anchor" href="#_1。获取键盘上的字符" aria-hidden="true">#</a> 1。获取键盘上的字符</h2><p>做一mc，在主场景中的mc上加：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token function">onClipEvent</span><span class="token punctuation">(</span>keyDown<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">trace</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span><span class="token function">getAscii</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//key.getAscii()为获取键盘输入的ascii值，string.fromCharCode是转换为字符</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_2-对输入特定字符的控制" tabindex="-1"><a class="header-anchor" href="#_2-对输入特定字符的控制" aria-hidden="true">#</a> 2.对输入特定字符的控制</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span><span class="token function">isDown</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;a is pressed!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_3-key对象集合" tabindex="-1"><a class="header-anchor" href="#_3-key对象集合" aria-hidden="true">#</a> 3.key对象集合</h2><h3 id="一、方法" tabindex="-1"><a class="header-anchor" href="#一、方法" aria-hidden="true">#</a> 一、方法</h3><p>1。Key.addListener</p><p><strong>用法</strong>：<code>Key.addListener</code> (newListener)<br><strong>实例</strong>：此示例创建一个新的侦听器对象，并为 onKeyDown 和 onKeyUp 定义一个函数。最后一行使用 addListener 方法向 Key 对象注册该侦听器，以使该对象可接收按下和释放按键事件的通知。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>myListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myListener<span class="token punctuation">.</span>onKeyDown <span class="token operator">=</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    trace <span class="token punctuation">(</span><span class="token string">&quot;You pressed a key.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
myListener<span class="token punctuation">.</span>onKeyUp <span class="token operator">=</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    trace <span class="token punctuation">(</span><span class="token string">&quot;You released a key.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Key<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>myListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>2。Key.getAscii</p><p><strong>用法</strong>：<code>Key.getAscii();</code></p><p>3。Key.getCode</p><p>4。Key.isDown</p><p><strong>用法</strong>：<code>Key.isDown(keycode);</code><br><strong>参数</strong>：keycode 分配给特定键的键控代码值，或与特定键相关联的 Key 对象属性。若要获取与标准键盘上按键相关联的所有键控代码的列表，请参阅《使用 Flash》的&quot;附录 B&quot;&quot;键盘键和键控代码值&quot;。</p><p>5。Key.isToggled</p><p><strong>用法</strong>：<code>Key.isToggled(keycode)</code><br><strong>参数</strong>：keycode Caps Lock 的键控代码 (20) 或 Num Lock 的键控代码 (144)。</p><p>6。Key.removeListener</p><p><strong>用法</strong>：<code>Key.removeListener(listener)</code></p><h3 id="二、常数" tabindex="-1"><a class="header-anchor" href="#二、常数" aria-hidden="true">#</a> 二、常数</h3><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>1。 Key.BACKSPACE     属性；与 Backspace 键的键控代码值 (8)  关联的常量。
2。 Key.CAPSLOCK      属性；与 Caps Lock 键的键控代码值 (20) 关联的常量。
3。 Key.CONTROL       属性；与 Control   键的键控代码值 (17) 关联的常量。
4。 Key.DELETEKEY     属性；与 Delete    键的键控代码值 (46) 关联的常量
5。 Key.DOWN          属性；与向下箭头键的键控代码值 (40) 关联的常量。
6。 Key.END           属性；与 End       键的键控代码值 (35) 关联的常量。
7。 Key.ENTER         属性；与 Enter     键的键控代码值 (13) 关联的常量。
8。 Key.ESCAPE        属性；与 Escape    键的键控代码值 (27) 关联的常量。
9。 Key.HOME          属性；与 Home      键的键控代码值 (36) 关联的常量。
10。Key.INSERT        属性；与 Insert    键的键控代码值 (45) 关联的常量。
11。Key.LEFT          属性；与左箭头键的键控代码值 (37) 关联的常量。
12。Key.PGDN          属性；与 Page Down 键的键控代码值 (34) 关联的常量。
13。Key.PGUP          属性；与 Page Up 键的键控代码值 (33) 关联的常量。
14。Key.RIGHT         属性；与右箭头键的键控代码值 (39) 关联的常量。
15。Key.SHIFT         属性；与 Shift     键的键控代码值 (16) 关联的常量。
16。Key.SPACE         属性；与空格键的键控代码值 (32) 关联的常量。
17。Key.TAB           属性；与 Tab       键的键控代码值 (9) 关联的常量。
18。Key.UP            属性；与向上箭头键的键控代码值 (38) 关联的常量。
</code></pre></div><h3 id="三、侦听器" tabindex="-1"><a class="header-anchor" href="#三、侦听器" aria-hidden="true">#</a> 三、侦听器</h3><p>1。Key.onKeyDown</p><p><strong>用法</strong>：<code>someListener.onKeyDown</code><br><strong>说明</strong>：当按下某按键时获得通知。若要使用 onKeyDown，您必须创建侦听器对象。然后您可为 onKeyDown 定义一个函数，再使用 addListener 方法向 Key 对象注册该侦听器，如下所示：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>someListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
someListener<span class="token punctuation">.</span>onKeyDown <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Key<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>someListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>侦听器可以使不同的代码片段协同工作，因为多个侦听器可以接收有关单个事件的通知。</p><p>2。Key.onKeyUp</p><p><strong>用法</strong>：<code>someListener.Key.onKeyUp</code><br><strong>说明</strong>：当释放某按键时获得通知。若要使用 onKeyUp，您必须创建侦听器对象。然后您可为 onKeyUp 定义一个函数，再使用 addListener 方法向 Key 对象注册该侦听器，如下所示：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>someListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
someListener<span class="token punctuation">.</span>onKeyUp <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Key<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>someListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>侦听器可以使不同的代码片段协同工作，因为多个侦听器可以接收有关单个事件的通知。</p>`,31),o=[p];function c(u,i){return s(),a("div",null,o)}const l=n(e,[["render",c],["__file","hardctr8.html.vue"]]);export{l as default};
