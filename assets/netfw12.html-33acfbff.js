import{_ as i,o as l,c as e,a as p}from"./app-f0851ed3.js";const t={},r=p('<h1 id="net-是未来的趋势-为什么" tabindex="-1"><a class="header-anchor" href="#net-是未来的趋势-为什么" aria-hidden="true">#</a> .Net 是未来的趋势, 为什么?</h1><blockquote><p>www.chinacs.net 2001-8-28 中文C#技术站</p></blockquote><p>.Net姗姗来迟了.但是终于我觉得应该谈论一下.NET的未来了.原因很简单,我现在每天都收到几乎50封邮件询问.NET的未来以及与其它技术相比,它有什么样的优势等.所以在这里,我将介绍我个人对这项技术未来发展的看法.</p><p>我将从开发者的期望开始并以公司(软件工业企业)的视点结束.</p><p>好了!</p><p>当一个开发者开始开发一个软件的时候,他所要求或需要的是:</p><ol><li>适当的编程语言知识来将商业逻辑写成程序</li><li>数据库知识来储存他的数据</li><li>在分布式环境中将商业逻辑连接到数据库的工具</li><li>懂得如何将应用程序打包</li><li>如果需要在客户端提供用户透明性则需要开发web解决方案</li><li>希望得到一些组件来复用他辛勤劳动的结果或其他人高效的解决办法</li><li>希望能够通过脚本或服务器端的逻辑来完成更新客户端的任务</li><li>希望能够授权一个团体来重用你的组件以便促进你的业务或工作</li><li>希望提供一个简洁的用户界面</li><li>希望避免建立一个你已经作过的web页面的麻烦</li></ol><p>还有很多...(我无法包括或讨论所有的方面因为所有这些东西实际上随个人的不同而不同)</p><p>但我认为上面提到的10点应该是所有认真的开发者都要考虑的.所以从技术上讲,在.NET到来以前,我们知道的对这些问题的解决办法是:**这里我假设你们希望从列出了所有可能选项的列表中选择一个而且我只会提供这些流行技术的名字.</p><ol><li>适当的编程语言知识来将商业逻辑写成程序:C,C++,和JAVA.</li><li>数据库:ORACLE,SOL Server 等.</li><li>在分布式环境中将商业逻辑连接到数据库组件的工具:CORBA, RMI, DCOM等</li><li>为分发应用程序打包:安装程序(独立于环境),二进制文件而后最终注册组件</li><li>通过(显示)提供在线解决方案:HTML, DHTML, CSS, 和XML等.</li><li>希望使用软件重用机制:Java Beans, COM等</li><li>客户端更新:Java Script, JScript, Applets 等和服务器端逻辑: Perl, ASP, PHP 等.</li><li>组件发售:进行物理拷贝和注册组件或完全通过服务器访问</li><li>简洁的用户界面:VB, VC++, GTK 等</li><li>可重用web组件:目前工业界还没有任何一个流行的软件被经常使用.</li></ol><p>例如我曾为我的开发环境使用:C++, SQL Server, DCOM, HTML, COM, JScript, ASP,服务器和客户端注册实用程序, VC++, GTK+ (在Linux上) 和 XML .所以我所遇到的问题是我需要花费很长的时间来学会这些技术而且几乎每次我都怀疑这些技术能否普及或者能否生存下去.我并不是说所有的开发者都要一下子学会这所有的技术但可以肯定的是,如果你要设计新的和有创意的东西那么你就必须对上面我们讨论的每一点中的至少一项有很好的了解而且做到这一点的人的确是这个工业的领头人.</p><p>但是对于.NET,微软在一个软件包里依靠几种拥有明显界线的技术集成了几乎所有的东西.意味着你拥有了所有的东西但不会把它们混淆起来.</p><p>因此如果你开始学习.NET,你所需要学习的一切是:<br> 主要技术:<strong>C#</strong>(VB.NET也是一个好的选择)<br><strong>ASP.NET</strong><br><strong>XML</strong>.</p><p>只有三种....................是的!</p><p>C#可以用来编写客户端更新的脚本,创建商业逻辑,做服务器端编程,编写Windows应用程序,编写控制台程序,做组件设计,而且它可以将XML作为数据,元数据(自描述的数据),商业逻辑和数据库之间的连接工具,但同时你需要ADO.NET的C#实现,更进一步的是如果你要将东西发布到网上,你需要在服务器端安装ASP.NET,如果要创建可重用的web组件,你需要Web Services的概念,就象VC++开发的Windows Services一样,但是没有了物理上的局限.</p><p>只有一种语言,我们能将它用在几乎每一个地方.没有更多的混淆...是的!没有了COM/DCOM里浪费系统主存的组件注册过程也没有了系统上的授权允许过程(除了一些特殊情况).</p><p>所以从程序员或开发者的视点来看这是一个高度的成功.</p><p>现在让我们从公司的角度来想一想(当然!这里我讨论的是小公司,它们以独立项目的方式工作).例如一个公司招聘了四个VC++程序员因为他们的项目将用VC++开发,但是在后来的6个月里他们获得了一个用VB开发的项目.</p><p>现在会怎么样呢?</p><p>他们会要求他们的开发者学习VB开始工作,当然另一种方法是解雇他们而招聘一批VB开发者!<br> 所以这是一个主要问题.</p><p>但是对于.NET,由于极好的相互兼容性,你不需要学习一种新的.NET语言因为你可以将一种语言的组件引入到另一种.NET语言中来.</p><p>因此对于.NET没有必要将你的VB程序员转变成Managed C++ 程序员或把C#程序员转变成JScript.NET程序员.</p>',22),n=[r];function o(c,s){return l(),e("div",null,n)}const C=i(t,[["render",o],["__file","netfw12.html.vue"]]);export{C as default};
