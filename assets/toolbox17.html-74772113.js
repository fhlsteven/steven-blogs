import{_ as n,o as s,c as a,a as t}from"./app-f0851ed3.js";const p={},o=t(`<h1 id="vb-net和vc-net中控件数组的建立" tabindex="-1"><a class="header-anchor" href="#vb-net和vc-net中控件数组的建立" aria-hidden="true">#</a> VB.NET和VC#.NET中控件数组的建立</h1><blockquote><p>作者：陶刚 发文时间：2003.04.28 16:07:02</p></blockquote><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>数组为共享公用功能的一组控件一起工作提供了便捷的途径。例如，一组控件可能用于显示相关的数据，或者在被点击时提供相关的行为。Visual Basic .NET和C#本身并不支持控件数组的建立，但是你可以通过编程复制控件数组的所有功能。本文介绍复制控件数组功能的简单组件的建立。</p><p>控件数组的主要用处有：</p><p>l 使用相同的名称与索引访问一组控件，允许用编号检索和设置数据项并且在整个数组中重复。这个功能可以使用下面的代码实现。</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic伪代码</span>
MyControl<span class="token punctuation">(</span>myIndex<span class="token punctuation">)</span><span class="token punctuation">.</span>MyProperty <span class="token operator">=</span> myValue
MyControl<span class="token punctuation">(</span>myIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MyMethod
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#伪代码</span>
myControl<span class="token punctuation">[</span>myIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>MyProperty <span class="token operator">=</span> myValue<span class="token punctuation">;</span>
myControl<span class="token punctuation">[</span>myIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>MyMethod
</code></pre></div><p>l 多个对象使用同一个事件处理程序（event handler）处理事件，在这些事件中检索和使用索引，代码如下：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic伪代码</span>
<span class="token keyword">Private</span> <span class="token keyword">Sub</span> MyControl_Click<span class="token punctuation">(</span>sender <span class="token keyword">as</span> <span class="token keyword">Object</span><span class="token punctuation">,</span> e <span class="token keyword">as</span> EventArgs<span class="token punctuation">)</span>
   Messagebox<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token string">&quot;You have clicked MyControl number &quot;</span> <span class="token operator">&amp;</span> <span class="token operator">_</span>
      MyControl<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
<span class="token keyword">End</span> <span class="token keyword">Sub</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#伪代码</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">myControl_Click</span><span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Object</span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Messagebox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;You have clicked MyControl number &quot;</span> <span class="token operator">+</span> myControl<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>l 在运行时动态添加或者删除控件，代码如下：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic伪代码</span>
<span class="token keyword">Dim</span> i <span class="token keyword">as</span> <span class="token keyword">Integer</span>
<span class="token keyword">For</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">to</span> <span class="token number">5</span>
   <span class="token comment">&#39; 插入代码来建立控件并给属性赋值</span>
<span class="token keyword">Next</span> i
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#伪代码</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//插入代码来建立控件并给属性赋值</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Visual Basic .NET和C#允许你复制与控件数组相关的一些功能。例如，你能使用委托把多个对象的事件绑定到一个事件处理程序。但是，如果把这些功能合并到一个动态的、容易管理的组件中更加简便。本文将建立有下面特性的组件：</p><ul><li>建立索引和排序控件的集合。将使用按钮集合来演示。</li><li>一个事件处理程序来处理衍生的按钮的点击事件。</li><li>使用索引引用控件和成员的代码。</li><li>给窗体动态添加和删除控件的代码。</li></ul><h2 id="预备知识" tabindex="-1"><a class="header-anchor" href="#预备知识" aria-hidden="true">#</a> 预备知识</h2><ul><li>了解属性组件和它们的工作方式。</li><li>了解一些组件的多态性</li><li>知道Visual Basic .NET或C# .NET的语法。</li></ul><h2 id="建立项目" tabindex="-1"><a class="header-anchor" href="#建立项目" aria-hidden="true">#</a> 建立项目</h2><p>在本节中将建立并命名一个项目，并给该项目添加一个类。该类将封装实现控件数组的代码。</p><p>1、选择File-&gt; New-&gt; Project菜单打开New Project对话框。<br> 2、从Visual Basic或Visual C#项目列表中选择Windows Application项目模版，在Name框中输入ButtonArrayProject。<br> 3、选择File-&gt; Save All保存项目。</p><h2 id="实现一个集合" tabindex="-1"><a class="header-anchor" href="#实现一个集合" aria-hidden="true">#</a> 实现一个集合</h2><p>ButtonArray类会处理通过一个集合的实现来保存和组织控件数组的事务。集合是包含索引对象变量列表的对象，也包含add、remove等方法和其它的操作对象。本节中将建立一个继承自System.Collections.CollectionBase（.NET框架组件中提供必要的集合功能的类）的类，并实现提供必要功能的方法。</p><p>建立继承类的过程：</p><p>1、从Project菜单中选择Add Class。<br> 2、根据情况把类命名为ButtonArray.vb或者ButtonArray.cs。类的代码编辑器将打开。<br> 3、在类的声明中，指定它继承自.NET框架组件的System.Collections.CollectionBase类。</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic</span>
<span class="token keyword">Public</span> <span class="token keyword">Class</span> ButtonArray
   <span class="token keyword">Inherits</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>CollectionBase
<span class="token keyword">End</span> <span class="token keyword">Class</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ButtonArray</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>CollectionBase</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// 省略了设计者增加的代码</span>
<span class="token punctuation">}</span>
</code></pre></div><p>System.Collections.CollectionBase类为集合提供了很多必要的功能。其中包括一个跟踪集合中对象的List对象，维护集合中当前对象数量的Count属性，允许删除特定位置索引的对象的RemoveAt方法。在实现控件数组集合时会使用到它们。</p><p>因为每个控件数组与一个窗体关联，索引必须添加一个字段来保存该窗体的引用。通过建立私有的、只读字段来保存引用，可以保证每个控件数组组件只与以一个窗体关联。</p><h2 id="为组件建立私有、只读字段" tabindex="-1"><a class="header-anchor" href="#为组件建立私有、只读字段" aria-hidden="true">#</a> 为组件建立私有、只读字段</h2><p>立即给类声明添加下面的代码：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic</span>
<span class="token keyword">Private</span> <span class="token keyword">ReadOnly</span> HostForm <span class="token keyword">as</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Form
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Form</span> HostForm<span class="token punctuation">;</span>
</code></pre></div><p>在集合中实现的第一个方法是AddNewButton。该方法建立一个新的按钮控件并把它添加到目标窗体。你也可以使用该方法为新按钮设置初始属性。</p><h2 id="实现addnewbutton方法" tabindex="-1"><a class="header-anchor" href="#实现addnewbutton方法" aria-hidden="true">#</a> 实现AddNewButton方法</h2><p>在ButtonArray类的代码编辑器中输入下面的代码：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token keyword">Public</span> <span class="token keyword">Function</span> AddNewButton<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">As</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button
   <span class="token comment">&#39;为Button类建立新的实例</span>
   <span class="token keyword">Dim</span> aButton <span class="token keyword">As</span> <span class="token keyword">New</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token comment">&#39; 将该按钮添加到集合的内部列表</span>
   <span class="token keyword">Me</span><span class="token punctuation">.</span>List<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>aButton<span class="token punctuation">)</span>
   <span class="token comment">&#39;把控件集合中的按钮添加到被HostForm字段引用的窗体</span>
   HostForm<span class="token punctuation">.</span>Controls<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>aButton<span class="token punctuation">)</span>
   <span class="token comment">&#39; 设置该按钮对象的初始属性</span>
   aButton<span class="token punctuation">.</span>Top <span class="token operator">=</span> Count <span class="token operator">*</span> <span class="token number">25</span>
   aButton<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token number">100</span>
   aButton<span class="token punctuation">.</span>Tag <span class="token operator">=</span> <span class="token keyword">Me</span><span class="token punctuation">.</span>Count
   aButton<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;Button &quot;</span> <span class="token operator">&amp;</span> <span class="token keyword">Me</span><span class="token punctuation">.</span>Count<span class="token punctuation">.</span>ToString
   <span class="token keyword">Return</span> aButton
<span class="token keyword">End</span> <span class="token keyword">Function</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
<span class="token keyword">public</span> <span class="token return-type class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button</span> <span class="token function">AddNewButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//为Button类建立新的实例</span>
    <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button</span> aButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将该按钮添加到集合的内部列表</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>aButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把控件集合中的按钮添加到被HostForm字段引用的窗体</span>
    HostForm<span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>aButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置该按钮对象的初始属性</span>
    aButton<span class="token punctuation">.</span>Top <span class="token operator">=</span> Count <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">;</span>
    aButton<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    aButton<span class="token punctuation">.</span>Tag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Count<span class="token punctuation">;</span>
    aButton<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;Button &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Count<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> aButton<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上面的方法的功能是：</p><p>1、建立一个新按钮。<br> 2、把它添加到内部列表和HostForm引用的窗体的控件集合。<br> 3、设置初始属性，包括设置Tag属性来索引该按钮。你可以在这一段中添加代码为控件设置更多的属性。<br> 4、返回新按钮，这样它就能立即被修改并指定给其它的对象引用。</p><p>你必须建立一个构造函数（组件被初始化时运行的方法），当控件数组类的一个新实例被建立时，它用来设置HostForm字段的值并把新按钮添加到窗体。可以使用下面的方式达到这个目的。</p><h2 id="建立构造函数" tabindex="-1"><a class="header-anchor" href="#建立构造函数" aria-hidden="true">#</a> 建立构造函数</h2><p>为类建立构造函数。</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic</span>
<span class="token keyword">Public</span> <span class="token keyword">Sub</span> <span class="token keyword">New</span><span class="token punctuation">(</span><span class="token keyword">ByVal</span> host <span class="token keyword">as</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Form<span class="token punctuation">)</span>
   HostForm <span class="token operator">=</span> host
   <span class="token keyword">Me</span><span class="token punctuation">.</span>AddNewButton<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">End</span> <span class="token keyword">Sub</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
<span class="token comment">// 使用下面的构造函数代替默认的构造函数</span>
<span class="token keyword">public</span> <span class="token function">ButtonArray</span><span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Form</span> host<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    HostForm <span class="token operator">=</span> host<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">AddNewButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>构造函数需要一个参数，即放置按钮数组的窗体。它把该值指定给HostForm字段，接着类的AddNewButton方法给窗体添加一个新按钮。</p><h2 id="暴露控件数组" tabindex="-1"><a class="header-anchor" href="#暴露控件数组" aria-hidden="true">#</a> 暴露控件数组</h2><p>现在已经建立了建立和跟踪数组中控件的途径，但是还必须把它们暴露给开发者。可以通过属性实现这个功能。我们将建立一个默认属性（Visual Basic）或索引器（C#）基于特定按钮的索引返回它的引用。这样你就能编程使用典型控件数组中的MyButtonArray（myIndex）语法了。</p><p>建立默认属性</p><p>给组件添加下面的代码：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic</span>
<span class="token keyword">Default</span> <span class="token keyword">Public</span> <span class="token keyword">ReadOnly</span> <span class="token keyword">Property</span> Item<span class="token punctuation">(</span><span class="token keyword">ByVal</span> Index <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token operator">_</span>
   System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button
   <span class="token keyword">Get</span>
      <span class="token keyword">Return</span> <span class="token keyword">CType</span><span class="token punctuation">(</span><span class="token keyword">Me</span><span class="token punctuation">.</span>List<span class="token punctuation">.</span>Item<span class="token punctuation">(</span>Index<span class="token punctuation">)</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button<span class="token punctuation">)</span>
   <span class="token keyword">End</span> <span class="token keyword">Get</span>
<span class="token keyword">End</span> <span class="token keyword">Property</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
<span class="token keyword">public</span> <span class="token return-type class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button</span> <span class="token keyword">this</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> Index<span class="token punctuation">]</span>
<span class="token punctuation">{</span>
    <span class="token keyword">get</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>List<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="实现remove方法" tabindex="-1"><a class="header-anchor" href="#实现remove方法" aria-hidden="true">#</a> 实现Remove方法</h2><p>现在已经建立了暴露数组中按钮的属性，可以建立从数组中删除按钮的机制了。为了从数组中删除一个按钮，必须从集合的内部List对象和窗体的Controls集合中删除它。</p><p>给组件添加下面的方法：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic</span>
<span class="token keyword">Public</span> <span class="token keyword">Sub</span> Remove<span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token comment">&#39; 检查以确保有按钮可以删除</span>
   <span class="token keyword">If</span> <span class="token keyword">Me</span><span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">Then</span>
      <span class="token comment">&#39; 从主窗体上的控件集合的数组按钮数组中删除最后一个</span>
      <span class="token comment">&#39; 注意在访问数组时使用了默认属性</span>
      HostForm<span class="token punctuation">.</span>Controls<span class="token punctuation">.</span>Remove<span class="token punctuation">(</span><span class="token keyword">Me</span><span class="token punctuation">(</span><span class="token keyword">Me</span><span class="token punctuation">.</span>Count <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">Me</span><span class="token punctuation">.</span>List<span class="token punctuation">.</span>RemoveAt<span class="token punctuation">(</span><span class="token keyword">Me</span><span class="token punctuation">.</span>Count <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token keyword">End</span> <span class="token keyword">If</span>
<span class="token keyword">End</span> <span class="token keyword">Sub</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//检查以确保有按钮可以删除</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 从主窗体上的控件集合的数组按钮数组中删除最后一个</span>
        <span class="token comment">// 注意在访问数组时使用了默认属性</span>
        HostForm<span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>Count <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Count <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="建立公用事件处理程序" tabindex="-1"><a class="header-anchor" href="#建立公用事件处理程序" aria-hidden="true">#</a> 建立公用事件处理程序</h2><p>最后一步是为控件数组建立事件处理程序来处理公用的事件。在演示中，将为按钮的点击事件建立一个方法，接着添加代码把该事件与事件处理程序关联。</p><p>建立公用事件处理程序</p><p>给组件添加下面的方法：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic</span>
<span class="token keyword">Public</span> <span class="token keyword">Sub</span> ClickHandler<span class="token punctuation">(</span><span class="token keyword">ByVal</span> sender <span class="token keyword">As</span> <span class="token keyword">Object</span><span class="token punctuation">,</span> <span class="token keyword">ByVal</span> e <span class="token keyword">As</span> <span class="token operator">_</span>
   System<span class="token punctuation">.</span>EventArgs<span class="token punctuation">)</span>
   MessageBox<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token string">&quot;you have clicked button &quot;</span> <span class="token operator">&amp;</span> <span class="token keyword">CType</span><span class="token punctuation">(</span><span class="token keyword">CType</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> <span class="token operator">_</span>
      System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button<span class="token punctuation">)</span><span class="token punctuation">.</span>Tag<span class="token punctuation">,</span> <span class="token keyword">String</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">End</span> <span class="token keyword">Sub</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ClickHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;You have clicked button &quot;</span> <span class="token operator">+</span> 
        <span class="token punctuation">(</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button<span class="token punctuation">)</span> sender<span class="token punctuation">)</span><span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>该方法通过检索存储在按钮的Tag属性的索引，显示一个消息框表明哪个按钮被点击了。该方法的参数与被处理事件的相同，对于事件处理程序是必要的。你也必须把该事件与事件处理程序关联。</p><h2 id="把该事件与事件处理程序关联" tabindex="-1"><a class="header-anchor" href="#把该事件与事件处理程序关联" aria-hidden="true">#</a> 把该事件与事件处理程序关联</h2><p>给AddNewButton方法添加下面的代码：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic</span>
<span class="token keyword">AddHandler</span> aButton<span class="token punctuation">.</span>Click<span class="token punctuation">,</span> <span class="token keyword">AddressOf</span> ClickHandler
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
aButton<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span>ClickHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="测试该项目" tabindex="-1"><a class="header-anchor" href="#测试该项目" aria-hidden="true">#</a> 测试该项目</h2><p>现在组件已经完成了，需要建立一个应用程序来测试该组件。</p><p>建立测试应用程序</p><p>1、在解决方案管理器中，右键点击Form1并从弹出菜单中选择View Designer。<br> Form1的设计器被打开了。<br> 2、给窗体添加两个按钮。<br> 3、把这些按钮的位置调整到窗体的右侧。<br> 4、设置这些按钮的属性：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>按钮 Name 　　　　Text
Button1 btnAdd 　　　　Add Button
Button2 btnRemove 　　Remove Button
</code></pre></div><p>5、在解决方案管理器中，右键点击Form1并从弹出菜单中选择View Code。<br> Form1的代码编辑器被打开了。<br> 6、在Form1的类声明中，声明下面的控件数组对象：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic</span>
<span class="token comment">&#39; 声明新的ButtonArray对象</span>
<span class="token keyword">Dim</span> MyControlArray <span class="token keyword">as</span> ButtonArray
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
<span class="token comment">//声明新的ButtonArray对象</span>
<span class="token class-name">ButtonArray</span> MyControlArray<span class="token punctuation">;</span>
</code></pre></div><p>7、在窗体的构造函数中，在方法结尾前添加下面的代码：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic</span>
MyControlArray <span class="token operator">=</span> <span class="token keyword">New</span> ButtonArray<span class="token punctuation">(</span><span class="token keyword">Me</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
MyControlArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ButtonArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>该语句建立了一个新的ButtonArray对象。它的参数（Me或者this）指向建立新ButtonArray的窗体，将成为放置按钮数组的窗体。</p><p>注意：在Visual Basic .NET中，构造函数在&quot;Windows Form Designer generated code&quot;代码段中，需要展开这一段查看构造函数。</p><p>8、在解决方案管理器中，右键点击Form1并从弹出菜单中选择View Designer。<br> 9、在设计器中双击btnAdd来打开btnAdd_Click事件的代码编辑器。<br> 10、在方法btnAdd_Click中添加代码调用MyControlArray的AddNewButton方法：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic</span>
<span class="token comment">&#39; 调用MyControlArray的AddNewButton方法</span>
MyControlArray<span class="token punctuation">.</span>AddNewButton<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">&#39; 改变Button 0的BackColor属性</span>
MyControlArray<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BackColor <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Red
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
<span class="token comment">//调用MyControlArray的AddNewButton方法</span>
MyControlArray<span class="token punctuation">.</span><span class="token function">AddNewButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//改变Button 0的BackColor属性</span>
MyControlArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>BackColor <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">;</span>
</code></pre></div><p>11、在解决方案管理器中，右键点击Form1并从弹出菜单中选择View Designer。<br> 12、在设计器中双击btnRemove来打开btnRemove_Click事件的代码编辑器。<br> 13、在btnRemove_Click方法中添加下面的代码：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; Visual Basic</span>
<span class="token comment">&#39; 调用MyControlArray的Remove方法</span>
MyControlArray<span class="token punctuation">.</span>Remove<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// C#</span>
<span class="token comment">// 调用MyControlArray的Remove方法</span>
MyControlArray<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>14、保存项目</p><h2 id="测试该项目-1" tabindex="-1"><a class="header-anchor" href="#测试该项目-1" aria-hidden="true">#</a> 测试该项目</h2><p>1、从Debug菜单中选择Start。<br> Form1窗体被打开，上面有三个按钮，标签分别是Add Button、Remove Button和Button 1。</p><p>2、点击Button 1。<br> 显示了一个消息框，消息框正确地显示了索引。</p><p>3、点击几次Add Button按钮。<br> 每次点击会给窗体添加一个新按钮。点击任何一个新按钮将导致一个正确显示该按钮索引的消息框。注意Button 0的颜色改变为红色，是btnAdd_Click事件中下面一行的结果：<br><code>MyControlArray(0).BackColor = System.Drawing.Color.Red</code></p><p>4、点击几次Remove Button按钮。<br> 每次点击时从窗体上删除一个按钮。</p><p>5、点击Remove Button按钮直到窗体右侧的所有按钮都被删除为止。</p><p>6、再次点击Add Button按钮。</p><p>按钮再次添加到窗体并且索引的编号正确。</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>本文演示了怎样建立封装控件数组功能的组件。你可以看到怎样建立方法来动态地给窗体添加和删除控件，怎样通过默认属性或者索引器暴露对象。上面的代码已经实现了所有的功能，还可以通过为组件编写自定义代码来扩展控件数组。</p><blockquote><p>（责任编辑:西门吹雪）</p></blockquote>`,99),e=[o];function c(l,u){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","toolbox17.html.vue"]]);export{r as default};
