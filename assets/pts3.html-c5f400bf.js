import{_ as n,o as a,c as s,a as t}from"./app-477de5b2.js";const p={},e=t(`<h1 id="创建多线程应用程序" tabindex="-1"><a class="header-anchor" href="#创建多线程应用程序" aria-hidden="true">#</a> 创建多线程应用程序</h1><p>在.NET和C#中编写一个多线程应用程序将非常得容易。即使对于那些从没有用C#编写过多线程应用程序的初学者，只需遵循以下这些简单的步骤就可以实现目的。</p><h2 id="定义名称空间" tabindex="-1"><a class="header-anchor" href="#定义名称空间" aria-hidden="true">#</a> 定义名称空间</h2><p>在.NET中，多线程功能是在System.Threading名称空间中定义的。</p><p><code>using System.Threading;</code></p><h2 id="启动线程" tabindex="-1"><a class="header-anchor" href="#启动线程" aria-hidden="true">#</a> 启动线程</h2><p>System.threading名称空间中的Thread类代表一个线程对象，用这个类对象可以创建新的线程，删除、暂停和恢复线程。</p><p>下面的代码使用Thread类创建一个新的线程，然后启动这个线程：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Thread</span> mythread<span class="token punctuation">;</span>

mythread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span> WriteData <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mythread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>其中WriteData是这个线程要执行的一个函数，代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        str <span class="token operator">=</span> <span class="token string">&quot;Secondary Thread&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>listView1<span class="token punctuation">.</span>ListItems<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="杀死线程" tabindex="-1"><a class="header-anchor" href="#杀死线程" aria-hidden="true">#</a> 杀死线程</h2><p>Thread类的Abort方法用于永久地杀死一个线程。但是请注意，在调用Abort方法前一定要判断线程是否还激活，：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span> mythread<span class="token punctuation">.</span>IsAlive <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    mythread<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="暂停线程" tabindex="-1"><a class="header-anchor" href="#暂停线程" aria-hidden="true">#</a> 暂停线程</h2><p><code>Thread.Sleep</code>方法用于将一个线程暂停一段时间，代码如下： 　　 <code>mythread.Sleep(int);</code></p><h2 id="设置线程的优先权" tabindex="-1"><a class="header-anchor" href="#设置线程的优先权" aria-hidden="true">#</a> 设置线程的优先权</h2><p>我们可以使用<code>Thread</code>类的<code>ThreadPriority</code>属性设置线程的优先权。线程优先权的取值范围是<code>Normal、AboveNormal、BelowNormal、Highest或者Lowest</code>。请看下面的设置代码：</p><p><code>mythread.Priority = ThreadPriority.Highest;</code></p><h2 id="延迟线程" tabindex="-1"><a class="header-anchor" href="#延迟线程" aria-hidden="true">#</a> 延迟线程</h2><p>Thread类的Suspend方法可以延迟一个线程(挂起线程)。线程被延迟到调用Resume方法为止。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>mythread<span class="token punctuation">.</span>ThreadState <span class="token operator">=</span> ThreadState<span class="token punctuation">.</span>Running <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    mythread<span class="token punctuation">.</span><span class="token function">Suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="恢复被延迟的线程" tabindex="-1"><a class="header-anchor" href="#恢复被延迟的线程" aria-hidden="true">#</a> 恢复被延迟的线程</h2><p>调用Resume方法可以恢复一个被延迟的线程。如果线程没有被延迟，Resume方法就是无效的。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>mythread<span class="token punctuation">.</span>ThreadState <span class="token operator">=</span> ThreadState<span class="token punctuation">.</span>Suspended <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    mythread<span class="token punctuation">.</span><span class="token function">Resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,25),o=[e];function c(u,i){return a(),s("div",null,o)}const l=n(p,[["render",c],["__file","pts3.html.vue"]]);export{l as default};
