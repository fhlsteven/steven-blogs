(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{458:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"关于-net异步调用的初步总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于-net异步调用的初步总结"}},[s._v("#")]),s._v(" 关于.NET异步调用的初步总结")]),s._v(" "),t("p",[s._v("最近看了看.NET异步调用方面的资料，现择重点总结，若有纰漏敬请指正。")]),s._v(" "),t("h2",{attrs:{id:"异步调用的实质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步调用的实质"}},[s._v("#")]),s._v(" 异步调用的实质")]),s._v(" "),t("p",[s._v("异步调用通过委托将所需调用的方法置于一个新线程上运行，从而能够使一个可能需要较长时间的任务在后台执行而不影响调用方的其他行为。")]),s._v(" "),t("h2",{attrs:{id:"异步调用的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步调用的实现"}},[s._v("#")]),s._v(" 异步调用的实现")]),s._v(" "),t("p",[s._v("前面已经讲道，异步调用通过委托实现。委托支持同步和异步调用。在同步调用中，一个委托的实例可记录多个目标方法；在异步调用中，一个委托实例中有且只能包含一个目标方法。异步调用使用委托实例的"),t("code",[s._v("BeginInvoke")]),s._v("方法和"),t("code",[s._v("EndInvoke")]),s._v("方法分别开始调用和检索返回值，这两个方法在编译期生成。调用"),t("code",[s._v("BeginInvoke")]),s._v("后委托立即返回；调用"),t("code",[s._v("EndInvoke")]),s._v("时倘若委托方法未执行完毕，则阻塞当前线程至调用完毕。")]),s._v(" "),t("p",[s._v("假设有一个委托")]),s._v(" "),t("p",[t("code",[s._v("public delegate int ASyncHandler(int a,string b,ref string c);")])]),s._v(" "),t("p",[s._v("那么，其BeginInvoke与EndInvoke的形式如下：")]),s._v(" "),t("div",{staticClass:"language-csharp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("IAsyncResult")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("BeginInvoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")])]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")])]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")])]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsyncCallback")]),s._v(" callback"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")])]),s._v(" asyncState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("EndInvoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")])]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IAsyncResult")]),s._v(" asyncResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("也就是说，"),t("code",[s._v("BeginInvoke")]),s._v("与"),t("code",[s._v("EndInvoke")]),s._v("的参数列表与当前委托签名有关，可以总结为：")]),s._v(" "),t("div",{staticClass:"language-csharp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("IAsyncResult")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("BeginInvoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("委托所具有的全部参数，"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AsyncCallback")]),s._v(" callback"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")])]),s._v(" asyncState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" 委托返回值 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("EndInvoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("委托参数中"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ref")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("out")]),s._v("部分"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IAsyncResult")]),s._v(" asyncResult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[t("code",[s._v("BeginInvoke")]),s._v("返回一个"),t("code",[s._v("IAsyncResult")]),s._v("，其实质是实现"),t("code",[s._v("IAsyncResult")]),s._v("的"),t("code",[s._v("System.Runtime.Remoting.Messaging.AsyncResult")]),s._v("类。该对象相当于一个“凭证”，在调用"),t("code",[s._v("EndInvoke")]),s._v("时用于确认应等待返回的方法（猜测如此）。就像去银行，存钱时拿到一份存折（凭证），取款时依据存折（凭证）取款。")]),s._v(" "),t("p",[t("code",[s._v("EndInvoke")]),s._v("检索委托返回值，并返回标有"),t("code",[s._v("ref/out")]),s._v("的参数值。")]),s._v(" "),t("p",[t("code",[s._v("IAsyncResult")]),s._v("接口声明：")]),s._v(" "),t("div",{staticClass:"language-csharp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IAsyncResult")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")])]),s._v(" AsyncState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("WaitHandle")]),s._v(" AsyncWaitHandle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")])]),s._v(" CompletedSynchronously"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")])]),s._v(" IsCompleted"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("等待调用结束的三种方法：")]),s._v(" "),t("ol",[t("li",[s._v("使用"),t("code",[s._v("EndInvoke")]),s._v("主动等待异步调用结束。这是最简单的一种方法，适用于非用户界面程序及一些IO操作，因为在调用"),t("code",[s._v("EndInvoke")]),s._v("之后当前线程被阻塞，除了等待什么都不能做。")]),s._v(" "),t("li",[s._v("使用"),t("code",[s._v("WaitHandle")]),s._v("等待异步调用结束。"),t("code",[s._v("IAsyncResult")]),s._v("中有"),t("code",[s._v("WaitHandle")]),s._v("成员，获取用于等待异步操作完成的"),t("code",[s._v("WaitHandle")]),s._v("，即调用结束信号。使用"),t("code",[s._v("WaitHandle.WaitOne()")]),s._v("可以阻塞当前线程至异步调用完成。这样做的好处是：在调用"),t("code",[s._v("WaitOne")]),s._v("之后、"),t("code",[s._v("EndInvoke")]),s._v("之前，可以执行其他处理。")]),s._v(" "),t("li",[s._v("主动轮询。使用"),t("code",[s._v("IAsyncResult")]),s._v("中有"),t("code",[s._v("IsCompleted")]),s._v("成员检索当前异步调用情况。该方法适用于用户界面程序，想象可在一个循环内做到既等待委托完成，又可以更新用户界面。")]),s._v(" "),t("li",[s._v("使用回调，在异步调用结束时执行一个操作。前面的"),t("code",[s._v("BeginInvoke")]),s._v("方法签名的最后两个参数用于回调。需要用到"),t("code",[s._v("AsyncCallback")]),s._v("委托：")])]),s._v(" "),t("p",[t("code",[s._v("public delegate void AsyncCallback(IAsyncResult asyncResult);")])]),s._v(" "),t("p",[s._v("回调方法在系统线程池中执行。"),t("code",[s._v("BeginInvoke")]),s._v("的最后一个参数"),t("code",[s._v("（object asyncState）")]),s._v("可以传递包含回调方法将要使用的信息的对象。在回调方法中调用"),t("code",[s._v("EndInvoke")]),s._v("可以通过取得"),t("code",[s._v("System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate")]),s._v("实现。")]),s._v(" "),t("p",[s._v("个人认为方法1、2相差不算太大。")]),s._v(" "),t("p",[s._v("先写这么些，以后再补上其他的一些东西。")])])}),[],!1,null,null,null);t.default=e.exports}}]);