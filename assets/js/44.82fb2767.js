(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{451:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"c-中的非安全编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-中的非安全编程"}},[t._v("#")]),t._v(" C#中的非安全编程")]),t._v(" "),s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("这是C/C++程序迷们经常谈论的一个话题，同时也是一个复杂的、难以理解的话题－指针！每次谈到C#，大多数我遇到的人都持这样的观点－C#中没有指针的概念。而实际上，它已经被废除了，取而代之的是C#中的非安全编程－如何在程序中使用指针。不同于其字面意思的是，使用指针编程并没有什么不安全的。")]),t._v(" "),s("p",[t._v("它如此受关注的根本原因是，非安全编程不同于习惯的.NET开发规范，而需要编程人员进行明确定本地环境设置(仅适用于本地执行)。本文我将从区别两个最容易被疑惑的概念－非安全代码与非受控代码开始讨论非安全编程这个主题。接下来我们将讨论如何编写非安全代码，亦即如何在C#中使用指针。")]),t._v(" "),s("p",[t._v("非安全还是非受控？")]),t._v(" "),s("p",[t._v("受控代码是指在CLR管理下执行的代码。CLR负责了许多幕后的工作：")]),t._v(" "),s("ul",[s("li",[t._v("管理对象的内存")]),t._v(" "),s("li",[t._v("进行类型验证")]),t._v(" "),s("li",[t._v("垃圾回收")])]),t._v(" "),s("p",[t._v("说了这些，实际就是要将用户从上述的这些工作中解脱出来了，专心于业务实现。用户不再需要直接手工地进行内存操作，因为这些工作已由CLR完成了。")]),t._v(" "),s("p",[t._v("另一方面，非受控代码就是在CLR上下文外执行的代码了。最好的例子就是我们平时使用的Win32 DLL，比如kernel32.dll，user32.dll以及安装上我们系统上的各种COM组件。如何为它们分配内存、如何释放这些内存、如何实现类型验证？这些工作都需要它们自己来完成。一个典型的C++程序中分配一个字符指针的语句也是非受控代码的另一类例子，因为作为一名编程者，你要负责：")]),t._v(" "),s("ul",[s("li",[t._v("调用内存分配函数")]),t._v(" "),s("li",[t._v("确保类型转换的结果正确")]),t._v(" "),s("li",[t._v("确保指针在使用完毕后其内存被释放")])]),t._v(" "),s("p",[t._v("如果你留心上面的解释，所有这些工作都是由CLR来完成以减轻编程者的负担。")]),t._v(" "),s("p",[t._v("非安全代码是介于受控与非受控代码间的一种代码类型")]),t._v(" "),s("p",[t._v("非安全代码仍然象受控代码一样是在CLR的管理下执行的，但在同时它又象非受控代码一样允许你通过指针直接访问内存。因此你获得了两者的优点。如果你正在编写写一个.NET应用程序，但同时又希望可以广泛使用Win32 DLL中的各种函数－需要使用指针的，那么此时非安全代码就是你的救星了。")]),t._v(" "),s("p",[t._v("我们已经明确了两者的区别后，就开始编写实际的代码，毫无疑问，这才是最精彩的部分，你还在想什么呢？")]),t._v(" "),s("h2",{attrs:{id:"深入非安全代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入非安全代码"}},[t._v("#")]),t._v(" 深入非安全代码")]),t._v(" "),s("p",[t._v("编写非安全代码需要使用特殊的关键字"),s("code",[t._v("unsafe")]),t._v("与"),s("code",[t._v("fixed")]),t._v("。如果你还记得的话，有三种指针操作符："),s("code",[t._v("*")]),t._v(","),s("code",[t._v("&")]),t._v(","),s("code",[t._v("->")])]),t._v(" "),s("p",[t._v("任何使用了上述任一指针操作符的语句、语句块或者函数都应用"),s("code",[t._v("unsafe")]),t._v("关键字标记为非安全代码，就象这样：")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsafe")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Triple")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pInt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n　  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pInt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pInt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v('上面这个函数只是将传入的参数的值扩大了两倍。但是请注意，传入的是这个参数的指针！因为这个函数使用了"*"操作符直接进行内存操作，因此被标记为 unsafe。')]),t._v(" "),s("p",[t._v("但是这里还是有一个问题。回想一下上面的讨论，非安全代码也是在CLR管理下的受控代码，CLR可以自由地将对象移入内存中。于是一个似是而非的原因可能导致内存泄漏。这样做的结果是，对于编程者可能在自觉不自觉中使这个变量的指针指向内存的其他地方。")]),t._v(" "),s("p",[t._v("因此假设"),s("code",[t._v("*pInt")]),t._v("指向的地址是1001，而CLR的内存重定位过程将会引发内存泄漏。pInt之前指向1001，在重定位后其指向的数据可能被存储在地址2003处。于是大祸临头了！pInt指向的1001处存储的数据在经过重定位过程后无效了。这也许就是.NET很少提及指针的使用的原因吧，你认为呢？")]),t._v(" "),s("h3",{attrs:{id:"固定指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#固定指针"}},[t._v("#")]),t._v(" 固定指针")]),t._v(" "),s("p",[t._v("在语句块前输入关键字"),s("code",[t._v("fixed")]),t._v("，将会告诉CLR块内的对象不能重定位，这样CLR就不会重定位指针指向的数据存储位置。因此在C#中使用指针时，使用关键字fixed将能阻止程序运行时无效指针的产生。让我们看看它是如何工作的：")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CData")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n　　"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CProgram")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n　　"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsafe")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetVal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pInt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n　　"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n　　　　"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pInt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1979")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n　　"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n　　\n　　"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsafe")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n　　"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n　　　　"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CData")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("CData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n　　　　Console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Previous value: {0}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n　　　　"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fixed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n　　　　"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n　　　　　　"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetVal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n　　　　"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n　　　　Console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"New value: {0}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n　　"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("我们在这段代码里通过一个"),s("code",[t._v("fixed")]),t._v("块，将"),s("code",[t._v("CData")]),t._v("对象数据成员(域)"),s("code",[t._v("x")]),t._v("的地址赋给了一个整数型指针"),s("code",[t._v("p")]),t._v("。当"),s("code",[t._v("fixed")]),t._v("块中的语句被执行时，这个指针"),s("code",[t._v("p")]),t._v("将一直指向原来的那块内存区域，因为CLR已被指示暂时冻结这个变量直到该"),s("code",[t._v("fixed")]),t._v("块执行完毕。一旦"),s("code",[t._v("fixed")]),t._v("块执行完毕，这个对象就又能被CLR重新定位了。")]),t._v(" "),s("p",[t._v("以上就是C#中使用指针编程的介绍，关键是要说明语句块是　unsafe　并　fixed　的。希望能因此提高你对C#中指针使用的知识！")])])}),[],!1,null,null,null);s.default=e.exports}}]);