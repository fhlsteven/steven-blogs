(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{426:function(s,t,n){"use strict";n.r(t);var a=n(2),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_1-初探c"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-初探c"}},[s._v("#")]),s._v(" 1 初探C#")]),s._v(" "),t("h2",{attrs:{id:"_1-绪论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-绪论"}},[s._v("#")]),s._v(" 1 绪论")]),s._v(" "),t("p",[s._v("c# 是一种简练，时髦（？），面向对象（object oriented），类型可靠（type-safe）的编程语言。它（发音：C sharp）是从c/c++发展而来的（？俺觉得更象是java），和c/c++ 是一个语系。所以，很容易被c/c++的程序员接受。c#的目标是结合Visual Basic的高产和C++质朴的力量。")]),s._v(" "),t("p",[s._v("c#将会是vs7的一分子。vs7还支持vb,vc和标记语言——VBScript和JScript。所有这些语言都会在Next Generation Windows Services (NWGS) platform 中得到支持（c#就需要一个NWGS SDK包，可以在m$的网站上下载）。有了这个东东（NWGS），c#就不需要自己的类库， 而使用vc或vb这样一些成熟的库。c#也确实没有自己的类库。废话完了")]),s._v(" "),t("p",[s._v("1。1 一个老土的例子（就不能换换吗？")]),s._v(" "),t("div",{staticClass:"language-csharp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* idontlikeHelloworld.cs : such a out sample :(*/")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("idontlikeHelloworld")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i dont like Hello world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ReadLine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n")])])]),t("p",[s._v("如果俺要出书的话，会考虑换个好点的例子。 ^&^")]),s._v(" "),t("p",[s._v("先说说怎样运行。首先，你需要windows2000！（是的，就是它，请各位不要随地丢果皮——整个香蕉丢给俺就可以了。）然后，需要NWGS SDK！（82.4mb，不算很大噢。嘿嘿，好在它没有自己的类库。）安装后，在你的程序所在的目录下键入：")]),s._v(" "),t("p",[t("code",[s._v("csc idontlikeHelloworld.cs (加上一个回车键）")])]),s._v(" "),t("p",[s._v("是不是有点复古的味道？这个操作会在和你的*.cs相同目录下产生一个idontlikeHelloworld.exe文件。双击它，可以看见：")]),s._v(" "),t("p",[t("code",[s._v("i dont like Hello world")])]),s._v(" "),t("p",[s._v("回车就可以结束它，非常简单。不过，也可以这样：把它存成后缀为.c的文件更好（即：idontlikeHelloworld.c）。这样就可以用vc的IDE进行打字，编辑。vc的txt editor是最棒的噢（又要vc，NO!!!）。然后：")]),s._v(" "),t("p",[t("code",[s._v("csc idontlikeHelloworld.c (加上一个回车键）")])]),s._v(" "),t("p",[s._v("最终效果是完全一样的。好，现在分析语法：（c#在语法上完全没有新意）")]),s._v(" "),t("p",[t("code",[s._v("1: using System;")])]),s._v(" "),t("p",[s._v("using 其实是c++的关键字，在c#中的含义也相仿（就是说俺还不敢100%肯定，抱歉）。using 用在另一个关键字namespace之后。还是先看看namespace。")]),s._v(" "),t("p",[s._v("语法（syntax）：（from MSDN）")]),s._v(" "),t("p",[s._v("namespace [identifier] { namespace-body }")]),s._v(" "),t("p",[s._v("俺的理解：")]),s._v(" "),t("p",[s._v("identifier：在这里就是System（请记住：c#和c/c++一样，是区分大小写的！）。System 必须在使用它的范围内是唯一的。即，不能够有第二个"),t("code",[s._v("System")]),s._v("，但可以有"),t("code",[s._v("system")]),s._v("。而“它的范围”，俺不想详细解说，只有在实践中才可能掌握。而且，初学者根本不必知道！俺也是近来才知道还有个"),t("code",[s._v("namespace")]),s._v("和"),t("code",[s._v("using")]),s._v("。")]),s._v(" "),t("p",[s._v("在{ namespace-body }中的是真正有用的东东，包括第五行的“Console.WriteLine”的声明和定义（后面还会提到）。System是由NWGS定义的，咱们只需用（using）它即可。至于System在什么文件里定义，咱就不用管了！交给编译器（就是刚才那个“csc.exe”）去寻找。这就代替了c/c++中的“#include”，可以说是近了一步，避免大量烦人的细节。如果你没学过c/c++，就不用理会。namespace 在后面还会谈到。")]),s._v(" "),t("p",[t("code",[s._v("2: class idontlikeHelloworld")])]),s._v(" "),t("p",[t("code",[s._v("class")]),s._v("：是c语系中另一个关键字“类”。表示一系列的特性（官方说法：属性）和行为方法，有了它你的程序就可以“另类”，创造与别不同的有你特色的东东噢！在这里，俺就定义了“idontlikeHelloworld”。注意：这也是c#强制的，对于每一个可执行的程序都必须有。你想干的事就可以记录在紧跟着你定义的class后面的一对花括号。注意：“{”和“}”一一对应的，“(”和“)”同样。")]),s._v(" "),t("p",[t("code",[s._v("4: static void Main() {")])]),s._v(" "),t("p",[t("code",[s._v("Main()")]),s._v("是本例子第一个动作（行为方法），干的第一件事。它是属于俺定义的idontlikeHelloworld类的方法。并且是c#强制的，是程序的真正开始！在紧跟在它后面的“{}”中的语句顺序，就是程序的运行顺序！本例中只有一行（第六行干嘛用？你可以去掉再编译一次看看），输出一句话。")]),s._v(" "),t("p",[t("code",[s._v('5: Console.WriteLine("i dont like Hello world");')])]),s._v(" "),t("p",[s._v("非常奇怪，Console（再次提醒：注意大小写）不是俺定义的，从何而来？它其实是属于System namespace 的一个class。WriteLine()是Console类中的一个方法，用来显示一句话（字符串）。\n这里只是用了这个方法的1/18！并且是最简单之一！其他的有机会再说。你也可以用 “Console.WriteLine”在“NGWS SDK Documentaion”中搜索“Console.WriteLine”，记住复选 “仅搜索标题”，它会列出19项。好啦，完了！其实，还有“.”没说呢！呵呵...lei si la!!!!")]),s._v(" "),t("p",[s._v("语句不通顺，俺会在以后改进（update），敬请原谅！--“请先用叉子喝汤”")]),s._v(" "),t("p",[s._v("（续前）\n“.”被称为分隔符（separator），用来连接名字，如上面的“Console.WriteLine”，就把类和它的方法连接。通过这种方式，咱们就可以使用现成方法集合。这里再回顾一下俺的例子，看看namespace和“.”是如何连用的，还有为什么要使用namespace这个关键字。把例子稍微改一下：")]),s._v(" "),t("div",{staticClass:"language-csharp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* idontlikeHelloworld.cs */")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//using System; ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("idontlikeHelloworld")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i dont like Hello world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ReadLine")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n")])])]),t("p",[s._v("看见了，当俺注销掉“using System;”后，在第五行和第六行加了“System”。程序的结果不会改变。但是，很明显的这样比较罗嗦，所以引入了“namespace”。其实，class应该可以完成同样的功能。\n不过，设计者可能不想让一个关键字涵盖太多的功能。记得在c向c++发展的时候，引入了“class”，而不是扩展“struct”关键字的功能；又比如“=”只用于赋值，“==”只用于判断相等。这是c/c++和c# 在语法上其中一个重要的特点。这样设计的好处很多。有机会再聊噢。")]),s._v(" "),t("p",[s._v("如果你没学过c/c++，以下的内容可以跳过。c#与c/c++在语法上还是有区别的，比如：")]),s._v(" "),t("ol",[t("li",[s._v("c#根本没有“::”；“->”只在程序中很小的片断中。在c#中应采用“.”。")]),s._v(" "),t("li",[s._v("c#无须先声明定义，再使用。与java相同。")]),s._v(" "),t("li",[s._v("c#取消了用“#include”导入其他的程序文本文件，而采用象征性的句柄引入他人的代码。这样一来，就排除了编程语言间的障碍，方便地使用其它语言编写的库。如“Console”类可以是c#或者是其他任一种语言编写的。")])]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("作者： 王志清[21847847] 2000-10-13 21:38:30  [回复]")]),s._v(" "),t("blockquote",[t("p",[s._v("第一个来这里报到听课，呵呵！我够学习认真吧！！！")]),s._v(" "),t("p",[s._v("可是就不怎么听得懂……")])]),s._v(" "),t("p",[s._v("作者： Burn[5151599] 2000-10-14 09:57:19  [回复]"),t("br"),s._v("\n（Dinosaur_[17731168]在大作中提到:）")]),s._v(" "),t("blockquote",[t("p",[s._v("/* 1 绪论\nc# 是一种简练，时髦（？），面向对象（object oriented），类型可靠（type-safe）的编程语言。它（发音：C sharp）是从c/c++发展而来的（？俺觉得更象是java），和c/c+ ...")]),s._v(" "),t("p",[s._v("大侠高见，俺早就听说c#了，可就是不知道他什么样，望大侠继续，俺还想知道更多。\n顺便一句，俺好喜欢，把他转贴了，大侠一定不会反对吧。谢谢。")]),s._v(" "),t("p",[s._v("我是个盖世英雄，有一天我会驾着七彩降云杀入敌营去救我的情人，我猜对了前头也猜对了这结果。（Zzzz....)")])]),s._v(" "),t("p",[s._v("作者： Dinosaur_[17731168] 2000-10-15 11:43:21  修改  删除       [回复]"),t("br"),s._v("\n（王志清[21847847]在大作中提到:）")]),s._v(" "),t("blockquote",[t("p",[s._v("第一个来这里报到听课，呵呵！我够学习认真吧！！！")]),s._v(" "),t("p",[s._v("可是就不怎么听得懂……\n俺早就说过，请大虾指教噢！俺的脸皮贼厚，直说即可！")]),s._v(" "),t("p",[s._v("俺一定改，还不行吗？  ^-*")]),s._v(" "),t("p",[s._v("赶紧说啊！俺就快要翻译第二篇了。快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快快！！！！！！！！！好心急！！！！！！！！！！！！！")]),s._v(" "),t("p",[s._v("再看了一次俺自己的嬉戏，果然语句极为不顺畅！俺真想把它杀掉！请各位先不要转载噢！俺一定改，还不行吗？  ^-*")])]),s._v(" "),t("p",[s._v("作者： Dinosaur_[17731168] 2000-10-17 17:11:51  修改  删除       [回复]")]),s._v(" "),t("blockquote",[t("p",[s._v("（续前）\n“.”被称为分隔符（separator），用来连接名字，如上面的“Console.WriteLine”，就把类和它的方法连接。通过这种方式，咱们就可以使用现成方法集合。这里再回顾一下俺的例子，看看namespace和“.”是如何连用的，还有为什么要使用namespace这个关键字。把例子稍微改一下:")]),s._v(" "),t("p",[s._v("/* idontlikeHelloworld.cs */")]),s._v(" "),t("p",[s._v("1: //using System;")]),s._v(" "),t("p",[s._v("2: class idontlikeHelloworld")]),s._v(" "),t("p",[s._v("3: {")]),s._v(" "),t("p",[s._v("4: static void Main() {")]),s._v(" "),t("p",[s._v('5: System.Console.WriteLine("i dont like Hello world");')]),s._v(" "),t("p",[s._v("6: System.Console.ReadLine();")]),s._v(" "),t("p",[s._v("7: }")]),s._v(" "),t("p",[s._v("8: }")]),s._v(" "),t("p",[s._v("看见了，当俺注销掉“using System;”后，在第五行和第六行加了“System”。程序的结果不会改变。但是，很明显的这样比较罗嗦，所以引入了“namespace”。其实，class应该可以完成同样的功能。\n不过，设计者可能不想让一个关键字涵盖太多的功能。记得在c向c++发展的时候，引入了“class”，而不是扩展“struct”关键字的功能；又比如“=”只用于赋值，“==”只用于判断相等。这是c/c++和c#在语法上其>中一个重要的特点。这样设计的好处很多。有机会再聊噢。")]),s._v(" "),t("p",[s._v("如果你没学过c/c++，以下的内容可以跳过。c#与c/c++在语法上还是有区别的，比如：")]),s._v(" "),t("ol",[t("li",[s._v("c#根本没有“::”；“->”只在程序中很小的片断中。在c#中应采用“.”。")]),s._v(" "),t("li",[s._v("c#无须先声明定义，再使用。与java相同。")]),s._v(" "),t("li",[s._v("c#取消了用“#include”导入其他的程序文本文件，而采用象征性的句柄引入他人的代码。这样一来，就排除了编程语言间的障碍，方便地使用其它语言编写的库。如“Console”类可以是c#或者是其他任一种语言编写的。")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);