import{_ as n,o as s,c as a,a as t}from"./app-57d1f7b1.js";const p={},o=t(`<h1 id="c-中分割字符串的几种方法" tabindex="-1"><a class="header-anchor" href="#c-中分割字符串的几种方法" aria-hidden="true">#</a> C#中分割字符串的几种方法</h1><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>最近经常看到论坛中许多帖子询问如何使用<code>split</code>来分割字符串，我这里对<code>split</code>做一些简单的总结，希望能够对大家有所帮助。下面介绍几种方法：</p><p>第一种方法：打开vs.net新建一个控制台项目。然后在<code>Main()</code>方法下输入下面的程序。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token operator">=</span><span class="token string">&quot;abcdeabcdeabcde&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sArray<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> i <span class="token keyword">in</span> sArray<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>输出下面的结果:</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>ab
deab
deab
de
</code></pre></div><p>我们看到了结果是以一个指定的字符进行的分割。如果我们希望使用多个字符进行分割如<code>c</code>,<code>d</code>,<code>e</code>如何做呢？好，我们使用另一种构造方法:</p><p>更改为</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token operator">=</span><span class="token string">&quot;abcdeabcdeabcde&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sArray1<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">char</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> i <span class="token keyword">in</span> sArray1<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>可以输出下面的结果：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>ab


ab


ab



</code></pre></div><p>除了以上的这两种方法以外,第三种方法是使用正则表达式。新建一个控制台项目。然后先添加 <code>using System.Text.RegularExpressions;</code></p><p><code>Main()</code> :中更改为</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>RegularExpressions</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> content <span class="token operator">=</span> <span class="token string">&quot;agcsmallmacsmallgggsmallytx&quot;</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> resultString <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">&quot;small&quot;</span><span class="token punctuation">,</span> RegexOptions<span class="token punctuation">.</span>IgnoreCase<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> i <span class="token keyword">in</span> resultString<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>输出下面的结果:</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>agc
mac
ggg
ytx
</code></pre></div><p>使用正则表达式有什么好处呢？ 别着急，后面我们会看到它的独特之处。</p><p>下面介绍第4种方法。比如</p><p><code>string str1=&quot;我*****是*****一*****个*****教*****师&quot;;</code></p><p>如果我希望显示为:我是一个教师， ,如何作呢？ 我们可以使用下面代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> <span class="token string">&quot;我*****是*****一*****个*****教*****师&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> str2<span class="token punctuation">;</span>

str1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;*****&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> i <span class="token keyword">in</span> str2<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这样也可以得到正确结果。但是比如</p><p><code>string str1=&quot;我**是*****一*****个*****教*****师&quot;;</code></p><p>我希望显示的结果为:我是一个教师。</p><p>我如果采用上面的第四种方法来做就会产生下面的错误：我 是一个教师</p><p>中间有空格输出，所以输出结果并不是我希望的结果，如何解决呢？这就又回到了正则表达式了（这里可以看到它的功能强大之处），这时可以采用下面的第五种方法：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> <span class="token string">&quot;我**是*****一*****个*****教*****师&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> str2 <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>RegularExpressions<span class="token punctuation">.</span>Regex<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">@&quot;[*]+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> i <span class="token keyword">in</span> str2<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这里通过<code>&quot;[*]+&quot;</code> 巧妙的完成了我们的目标。</p>`,29),c=[o];function e(u,l){return s(),a("div",null,c)}const k=n(p,[["render",e],["__file","cspdsop16.html.vue"]]);export{k as default};
