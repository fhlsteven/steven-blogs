import{_ as n,o as s,c as a,d as t}from"./app-e911b801.js";const p={},o=t(`<h1 id="用c-做简单的信息过滤" tabindex="-1"><a class="header-anchor" href="#用c-做简单的信息过滤" aria-hidden="true">#</a> 用C#做简单的信息过滤</h1><p>作者： lzhm 发表时间： 2003-7-11 15:39:51</p><p>现在网上比较大型的论坛都得备案，一旦有什么不太合理的信息，都可能受到有关部门的那啥。。。所以在信息过滤显得有点地位了。下面向大家介绍一个简单的信息硬过滤的办法。其实就是自动匹配。代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CheckWords</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//创建一数组，写入要过滤之字符串</span>
    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> BadWords<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    BadWords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">;</span>
    BadWords<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;.net&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>RegularExpressions<span class="token punctuation">.</span>Regex</span> re<span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//一个循环检查是否含有预定的字符串</span>
    <span class="token punctuation">{</span>
        re<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>RegularExpressions<span class="token punctuation">.</span>Regex</span><span class="token punctuation">(</span>BadWords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;捕捉到一预定信息：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>BadWords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre></div><p>在使用时代码为</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token operator">=</span><span class="token string">&quot;C#.net&quot;</span><span class="token punctuation">;</span> 
<span class="token function">CheckWords</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><p>大家可以根据本例，自由发挥，应该可以弄出比较好的信息过滤的东西来。</p><p>在分析信息过滤的同时，我们也可以考虑利用其检索信息，或其他用途。希望大家能有所收获。本人水平有限，欢迎大家批评指正。</p><p>作者：lzhm</p>`,9),c=[o];function e(u,l){return s(),a("div",null,c)}const i=n(p,[["render",e],["__file","cspbase5.html.vue"]]);export{i as default};
