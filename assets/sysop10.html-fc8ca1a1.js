import{_ as n,o as s,c as a,a as t}from"./app-a2b6e588.js";const p={},o=t(`<h1 id="用c-制作字幕显示屏幕保护" tabindex="-1"><a class="header-anchor" href="#用c-制作字幕显示屏幕保护" aria-hidden="true">#</a> 用C＃制作字幕显示屏幕保护</h1><p>本文介绍使用C#制作屏幕保护的方法，这个屏幕保护就是仿效视窗系统自带的字幕屏保。</p><p>屏幕保护程序的扩展名虽然是&quot;scr&quot;，但其实是一个可执行的&quot;exe&quot;文件。但他又是一个比较独特的&quot;exe&quot;文件。下面就来探讨一下，用C＃是如何编写屏幕保护的整个过程。</p><h2 id="一-本文中介绍的程序设计及运行环境" tabindex="-1"><a class="header-anchor" href="#一-本文中介绍的程序设计及运行环境" aria-hidden="true">#</a> 一．本文中介绍的程序设计及运行环境</h2><p>（1）.微软视窗2000 服务器版<br> （2）..Net Framework SDK 正式版</p><h2 id="二-c-编写字幕显示屏保程序的关键步骤以及解决方法" tabindex="-1"><a class="header-anchor" href="#二-c-编写字幕显示屏保程序的关键步骤以及解决方法" aria-hidden="true">#</a> 二．C＃编写字幕显示屏保程序的关键步骤以及解决方法</h2><p>（1）.设定程序的窗体符合屏幕保护的要求：</p><p>由于屏幕保护程序就是一个可执行程序，所以在编写屏幕保护程序的时候，首先按照可执行程序来设计。但屏幕保护有自身的特点。譬如：屏幕保护都是充满整个屏幕的，并且没有无边。屏幕保护运行的时候，不能显示任务栏。在程序设计中实现这些特点，关键就在于对窗体的某些属性的设定上。下面是对窗体属性的设定，就可以满足屏幕保护的要求，具体如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;ScreenSaver&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//窗体运行后无边界</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>FormBorderStyle <span class="token operator">=</span> FormBorderStyle<span class="token punctuation">.</span>None<span class="token punctuation">;</span>
<span class="token comment">//程序运行后不显示在任务栏上</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>ShowInTaskbar <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">//窗体运行后，最大化，充满整个屏幕</span>
</code></pre></div><p>（2）.使得字符在屏幕上不断移动：</p><p>实现字符在屏幕上像字符屏保一样不断移动，是通过一个定时器来完成的。不断移动的字符，其实就是一个Label组件。当设定好Label组件要显示的字符后，也就设定了在屏幕上要移动的字符。定时器每隔一段时间，都把Label组件的横坐标减去一个定值，这样在定时器的驱动下，Label组件的位置就变换了，带来的视觉效果，就是字符不断移动。</p><p>当Label组件的位置已经移动到屏幕的外面以后，这是就有把Label组件的横坐标回复到起始值（即：屏幕的最右边），然后判断Label组件的纵坐标是否位于屏幕的顶部，如果在顶部，则把纵坐标的位置重置在中部；如果在中部，则重置在底部；如果在底部，则重置在顶部。经过了这些判断，字符不仅可以实现从右往左移动，还可以变换字符进入屏幕的位置。从而也丰富了屏幕保护的内容。其实要实现这些判断，首先还必须知道屏幕的工作区域，因为只有先知道屏幕的工作区域，在能够实现对Label组件的横坐标和纵坐标的设定工作。下面就是实现此步骤地具体代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//得到计算机屏幕的工作区域</span>
<span class="token class-name">Rectangle</span> ssWorkArea <span class="token operator">=</span> Screen<span class="token punctuation">.</span><span class="token function">GetWorkingArea</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lblMarquee<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span>ssWorkArea<span class="token punctuation">.</span>Width <span class="token operator">-</span> iDistance<span class="token punctuation">,</span> lblMarquee<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//显示标签</span>
lblMarquee<span class="token punctuation">.</span>Visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">// 增加2个象素点,你可以通过修改speed的值来改变标签的移动速度</span>
iDistance <span class="token operator">+=</span> speed<span class="token punctuation">;</span>
<span class="token comment">// 如果标签已经走出屏幕，则把标签的位置重定位到屏幕的右边</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> lblMarquee<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>X <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token punctuation">(</span> lblMarquee<span class="token punctuation">.</span>Width <span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//Reset the distance to 0.</span>
    iDistance <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token comment">//判断标签的位置是否在顶部，如果在，则重定位到中部</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>lblMarquee<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>Y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        lblMarquee<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span>lblMarquee<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>X <span class="token punctuation">,</span> <span class="token punctuation">(</span>ssWorkArea<span class="token punctuation">.</span>Height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//判断标签的位置是否在中部，如果在，则重定位到底部</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lblMarquee<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>Y <span class="token operator">==</span> ssWorkArea<span class="token punctuation">.</span>Height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
        lblMarquee<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span>lblMarquee<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>X <span class="token punctuation">,</span> ssWorkArea<span class="token punctuation">.</span>Height <span class="token operator">-</span> lblMarquee<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//重定位到顶部</span>
    <span class="token keyword">else</span>
        lblMarquee<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span> <span class="token punctuation">(</span> lblMarquee<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>X <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>（3）.检测键盘、鼠标状态，确定退出屏幕保护程序：</p><p>在屏幕保护运行的时候，当键盘被按动，或者鼠标移动，屏幕保护都会关闭。在实际的程序设计中，检测键盘是否被按动，通过&quot;KeyDown&quot;事件就可以判断。在程序中，判断鼠标是否移动的思路是通过二个全局变量记录下，程序刚刚运行的时候的鼠标的位置（即：X和Y），当鼠标移动的时候，判断移动后的位置和记录的位置是否有出入，如果有出入，就关闭屏保。下面代码功能就是检测鼠标移动，并结束屏幕保护，具体如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 把鼠标刚刚开始移动的位置给记录下来 </span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ixStart <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> iyStart <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ixStart <span class="token operator">=</span> e<span class="token punctuation">.</span>X<span class="token punctuation">;</span>
    iyStart <span class="token operator">=</span> e<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//判断自屏幕保护程序运行后，鼠标的位置是否变动 </span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>X <span class="token operator">!=</span> ixStart <span class="token operator">||</span> e<span class="token punctuation">.</span>Y <span class="token operator">!=</span> iyStart<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Cursor<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    timerSaver<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    Application<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>其中&quot;ixStar&quot;和&quot;iyStart&quot;就是记录程序运行的时候，鼠标的起始位置。</p><p>（4）.对Windows对屏幕保护设定参数的响应：</p><p>当屏幕保护加入到Windows系统后，你就可以通过Windows系统来设定屏幕保护的属性了，由于我们制作的这个屏幕保护，没有可供设置的选项，但也要对Windows的&quot;设置&quot;按钮进行响应。而要完成这种响应，所用的知识就是在Windows系统中按动&quot;设置&quot;按钮，对屏幕保护进行设定时，其实也就对屏保程序传递&quot;/c&quot;字符。而要设定口令，则会传递&quot;/a&quot;字符，据此，可以得到代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">&quot;/c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;此屏幕保护没有可供设置的选项！&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;用C＃制造屏幕保护&quot;</span><span class="token punctuation">,</span>
    MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Application<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;/a&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;此屏幕保护没有可供设定口令的选项！&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;用C＃制造屏幕保护&quot;</span><span class="token punctuation">,</span>
    MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Application<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="三-总结" tabindex="-1"><a class="header-anchor" href="#三-总结" aria-hidden="true">#</a> 三．总结</h2><p>由于屏幕保护都是Windows程序，所以编译的时候，要产生Windows程序，编译的命令如下：</p><p><code>csc /t:winexe screen.cs</code></p><p>在正确编译&quot;Screen.cs&quot;后，可以得到&quot;Screen.exe&quot;文件，把&quot;Screen.exe&quot;改名为&quot;Screen.scr&quot;，并拷贝到Windows的&quot;System32&quot;目录中去。至此这个字符屏保就完成了从编写到配置的全部工作了。</p>`,24),e=[o];function c(u,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","sysop10.html.vue"]]);export{k as default};
