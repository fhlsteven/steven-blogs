import{_ as n,o as s,c as a,a as p}from"./app-f0851ed3.js";const t={},o=p(`<h1 id="编写基于windows窗体的应用软件" tabindex="-1"><a class="header-anchor" href="#编写基于windows窗体的应用软件" aria-hidden="true">#</a> 编写基于Windows窗体的应用软件</h1><blockquote><p>编译：刘彦青 人气：4170</p></blockquote><p>尽管一般的客户机应用软件仍然很普及，但简单的、基于浏览器与网络交互（通常是互联网）的应用软件将日渐成为主流，这就意味着对编程的要求将由编写独立的程序向编写面向对象、模块化的程序发展。</p><p>.NET平台提倡这种变化，尤其是.NET的被称作Windows窗体的用户接口模型。软件开发人员可以使用C#或Visual Basic 7.0来创建Windows窗体，在这篇文章中我将介绍如何使用C#创建.NET平台上基于Windows窗体的用户界面。</p><p>我们首先来看看Windows窗体是怎么回事，然后再讨论如何用C#编写基于Windows窗体的应用程序。在这种方式下，所有的Windows应用程序的工作方式都类似，Windows都需要维护许多Windows类。在早期的Windows程序开发中，软件开发人员最大的任务是保证一个80多行的模板文件能够正确地运行，然后可以逐步地添加事件处理程序。使用MFC，开发人员无需自己编写WinMain()和WndProc()函数，Windows窗体则发展了这一趋势，使得软件开发人员无需在编写枯燥的代码上花费太多的时间。</p><p>用SDK和MFC开发软件，仍然与Windows API非常类似。如果要对开发的软件进行严格的控制，使用C和SDK是最好的选择；如果需要相当的灵活性，使用SDK或MFC仍然可以进行有效地开发，但如果简单、直观的开发环境比控制性或灵活性更为重要时，使用Windows窗体开发基于窗体的应用程序就比较合适了。</p><h2 id="编写客户端代码" tabindex="-1"><a class="header-anchor" href="#编写客户端代码" aria-hidden="true">#</a> 编写客户端代码</h2><p>使用Windows窗体，可以编写.NET平台上的客户端程序。如果你曾经使用过VB，可能会对基于窗体的应用程序比较熟悉，就会发现Windows窗体与VB中的窗体有点类似。使用SDK或SFC编程需要直接与Windows API打交道，即使使用象MFC这样的构架，也只是比使用Windows API有了一点小小的进步。Windows窗体则隐藏了传统的Windows编程方式中的模板文件的许多细节，而以一种带有菜单和标题的窗口的方式出现，它可以对鼠标运动、菜单选择等一般的计算机的事件作出反应，还可以在客户机程序区中显示各种对象，实现这些功能的代码将比采用SDK甚至MFC时所需的代码抽象得多。</p><p>在应用程序中我们可以将Windows窗体显示为标准的窗口、MDI窗口、对话框、图形程序界面。与使用VB编程一样，定义Windows窗体用户界面也是在窗体的客户机程序区中放置各种控制，但Windows窗体可以更好的显示在界面上定义的各种对象。</p><p>除显示各种对象和管理标准控制外，Windows窗体还可以通过属性定义它们的外表。例如，如果要通过编程的方法在屏幕上移动Windows窗体，就可以通过设置它的X属性来实现。Windows窗体通过方法来实现各种操作，它还对各种事件作出反应，实现与用户之间的交互。</p><p>Windows窗体是在.NET构架或通用语言运行库（CLR）中运行的类的实例。编写一个基于Windows窗体的应用程序通常也就是对WinForm类的一个实例进行初始化、设置其属性，并建立相关的事件处理程序。由于Windows窗体是一个普通的基于CLR的类，完全支持对象的继承，因此可以在编程中使用标准的、面向对象的方法实现对基于Windows窗体的类的继承。</p><h2 id="从tic-tac-toe游戏学起" tabindex="-1"><a class="header-anchor" href="#从tic-tac-toe游戏学起" aria-hidden="true">#</a> 从Tic-Tac-Toe游戏学起</h2><p>一个基于Windows窗体的应用软件在开始处都需要通过一系列的using语句导入必要的描述（程序所要求的类型定义）：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">CSharpTicTacToe</span> <span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>WinForms</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>第一个namespace关健字是可选的，但对定义函数的作用域非常有用；后面的每个using关健字都通知C#编译器程序正在使用哪能个系统工具。因为tic-tac-toe游戏是一个Windows窗体，源代码文件使用了System中的WinForms名字空间；由于游戏还使用了图形，源代码文件还使用了URT工具。</p><p>在调用名字空间后，就通过继承系统提供的Form类得到了一个C#语言中的Windows窗体：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CSharpTicTacToe</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里是Windows窗体的代码，包括数据、构造器和一些事件处理程序</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在定义变量类型时，C#提倡使用枚举方式。tic-tac-toe游戏使用了三个枚举类型的变量：玩家类型、分数类型和位置名字类型，下面是这些枚举数据类型的定义：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>
    XPlayer<span class="token punctuation">,</span>
    OPlayer
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Mark</span> <span class="token punctuation">{</span>
    XMark<span class="token punctuation">,</span>
    OMark<span class="token punctuation">,</span>
    Blank
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Positions</span> <span class="token punctuation">{</span>
    TopLeft<span class="token punctuation">,</span>
    TopCenter<span class="token punctuation">,</span>
    TopRight<span class="token punctuation">,</span>
    MiddleLeft<span class="token punctuation">,</span>
    MiddleCenter<span class="token punctuation">,</span>
    MiddleRight<span class="token punctuation">,</span>
    BottomLeft<span class="token punctuation">,</span>
    BottomCenter<span class="token punctuation">,</span>
    BottomRight<span class="token punctuation">,</span>
    Unknown
<span class="token punctuation">}</span>
</code></pre></div><p>定义窗体时，它还需要一些数据、一个构造器和一些事件处理程序，我们将依次讨论这些问题。首先来看看窗体所需要的数据，tic-tac-toe游戏所需要的数据包括一个描述游戏中棋盘所需要的3X3的数组。（如图1所示）这个游戏使用的是一个简单的棋盘，每一个方格都需要维护它在屏幕上的位置以及是否已经有玩家占领了它，此外，根据是哪个玩家占领了它，还要在方格中显示“X”或“0”。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">BoardSpace</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">BoardSpace</span><span class="token punctuation">(</span><span class="token class-name">Mark</span> mark<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> left<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> top<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> right<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetMark</span><span class="token punctuation">(</span><span class="token class-name">Player</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果方格是空的，在其中填上玩家的代号 </span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Render</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Pen</span> pen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pen</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token function">FromARGB</span><span class="token punctuation">(</span><span class="token number">170</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>m_mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> Mark<span class="token punctuation">.</span>XMark<span class="token punctuation">:</span>
                g<span class="token punctuation">.</span><span class="token function">DrawLine</span><span class="token punctuation">(</span>pen<span class="token punctuation">,</span> m_left<span class="token punctuation">,</span> m_top<span class="token punctuation">,</span> m_right<span class="token punctuation">,</span>
                m_bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>
                g<span class="token punctuation">.</span><span class="token function">DrawLine</span><span class="token punctuation">(</span>pen<span class="token punctuation">,</span> m_left<span class="token punctuation">,</span> m_bottom<span class="token punctuation">,</span> m_right<span class="token punctuation">,</span>
                m_top<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> Mark<span class="token punctuation">.</span>OMark<span class="token punctuation">:</span>
                <span class="token class-name"><span class="token keyword">int</span></span> cx <span class="token operator">=</span> m_right <span class="token operator">-</span> m_left<span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">int</span></span> cy <span class="token operator">=</span> m_bottom <span class="token operator">-</span> m_top<span class="token punctuation">;</span>
                g<span class="token punctuation">.</span><span class="token function">DrawEllipse</span><span class="token punctuation">(</span>pen<span class="token punctuation">,</span> m_left<span class="token punctuation">,</span> m_top<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Mark</span> m_mark<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> m_top<span class="token punctuation">,</span> m_left<span class="token punctuation">,</span> m_right<span class="token punctuation">,</span> m_bottom<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>tic-tac-toe游戏需要管理3X3的方格数组（如图2所示），同时还管理一个3X3的BoardSpace对象组，刷新划分tic-tac-toe方格的线条，并要求每个方格刷新自己。由于这个游戏的逻辑主要与棋盘有关，因此这个游戏主要就是随着数据、鼠标的活动创建这个棋盘的一种形式。图3中包括了基于Windows窗体的程序所需要的初始化代码。需要注意的是，游戏初始化了棋盘、创建了一个Reset按键和事件处理程序，而且还可以截获MouseDown和Paint事件。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">TicTacToeBoard</span> <span class="token punctuation">{</span>
    <span class="token class-name">BoardSpace<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> m_BoardSpaces<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m_BoardSpaces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BoardSpace</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 初始化每个方格在屏幕上的位置，并把方格的状态初始化为空  </span>
        <span class="token comment">// 第一个方格： </span>
        m_BoardSpaces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BoardSpace</span><span class="token punctuation">(</span>Mark<span class="token punctuation">.</span>Blank<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 其余的以此类推 </span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ClearBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 清空所有的方格 </span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Player</span> <span class="token function">EvaluateGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查邻近的方格并检查是哪个玩家占着它  </span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Positions</span> <span class="token function">HitTest</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span> <span class="token class-name">Player</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查得到的坐标，并用玩家的代码对正确的方格进行标识 </span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Render</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Pen</span> pen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pen</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token function">FromARGB</span><span class="token punctuation">(</span><span class="token number">170</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">DrawLine</span><span class="token punctuation">(</span>pen<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">DrawLine</span><span class="token punctuation">(</span>pen<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">DrawLine</span><span class="token punctuation">(</span>pen<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">DrawLine</span><span class="token punctuation">(</span>pen<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                m_BoardSpaces<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Render</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CSharpTicTacToe</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Player</span> m_Player <span class="token operator">=</span> Player<span class="token punctuation">.</span>XPlayer<span class="token punctuation">;</span>
    <span class="token class-name">TicTacToeBoard</span> m_board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TicTacToeBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CSharpTicTacToe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">SetStyle</span><span class="token punctuation">(</span>ControlStyles<span class="token punctuation">.</span>Opaque<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Size</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Text <span class="token operator">=</span> <span class="token string">&quot;CSharp Tic Tac Toe&quot;</span><span class="token punctuation">;</span>
        m_board<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Finally add a button so that we can render to a bitmap </span>
        <span class="token class-name">Button</span> buttonRestart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buttonRestart<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Size</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buttonRestart<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buttonRestart<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;Restart&quot;</span><span class="token punctuation">;</span>
        buttonRestart<span class="token punctuation">.</span><span class="token function">AddOnClick</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>Restart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>buttonRestart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Restart</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m_Player <span class="token operator">=</span> Player<span class="token punctuation">.</span>XPlayer<span class="token punctuation">;</span>
        m_board<span class="token punctuation">.</span><span class="token function">ClearBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnMouseDown</span><span class="token punctuation">(</span><span class="token class-name">MouseEventArgs</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnMouseDown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Positions</span> position <span class="token operator">=</span> m_board<span class="token punctuation">.</span><span class="token function">HitTest</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>X<span class="token punctuation">,</span> e<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> m_Player<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">==</span> Positions<span class="token punctuation">.</span>Unknown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Player <span class="token operator">==</span> Player<span class="token punctuation">.</span>XPlayer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            m_Player <span class="token operator">=</span> Player<span class="token punctuation">.</span>OPlayer<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            m_Player <span class="token operator">=</span> Player<span class="token punctuation">.</span>XPlayer<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPaint</span><span class="token punctuation">(</span><span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span>
        e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span>SmoothingMode <span class="token operator">=</span> SmoothingMode<span class="token punctuation">.</span>AntiAlias<span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">FillRectangle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolidBrush</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token function">FromARGB</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>White<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ClientRectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_board<span class="token punctuation">.</span><span class="token function">Render</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CSharpTicTacToe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在大多数时间，对事件作出反应就是覆盖相应的函数。例如，该游戏对MouseDown和Paint事件作出反应，在系统产生事件后，就会自动地调用相应的函数。我们需要人工在系统中挂上nonsystem以及按下鼠标键等事件的处理函数，此外它还创建了一个清除棋盘的函数的按钮。</p><p>Windows窗体的编程是基于UI的，要求对屏幕进行刷新。Windows窗体可以很好地处理WM_PAINT消息。Form类中包括一个可以覆盖的名字为OnPaint()的函数，通过覆盖这个函数，就可以截获绘图事件，在屏幕上显示相应的内容。仔细看一下例子中的源代码，就会发现Paint事件处理程序的参数中包括一个图像对象，图像对象中包括绘制线条和图形、填充区域和你希望的在屏幕上显示图形的功能。</p><p>tic-tac-toe游戏通过要求棋盘重新进行刷新作为对Paint事件的响应。如果仔细地研究一下例子程序中的TicTacToeBoard类和BoardSpace类，就会发现它们都有一个使用Graphics对象的DrawLine()和DrawEllipse()方法在屏幕上显示图形的Render()函数。Windows窗体和C#最为方便之处是开发人员无需关心GDI类的资源，这些工作都由.NET Framework来完成。</p><p>Windows窗体还具有许多别的功能，包括在窗体上添加菜单和图标，显示对话框，截取Paint和MouseDown之外的其他事件，在以后的文章中，我们将逐步地介绍这方面的知识。</p>`,27),c=[o];function e(u,l){return s(),a("div",null,c)}const i=n(t,[["render",e],["__file","sysctr6.html.vue"]]);export{i as default};
