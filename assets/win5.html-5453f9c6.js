import{_ as t,r as p,o,c as e,b as n,d as s,e as c,a as l}from"./app-a2b6e588.js";const u="/steven-blogs/assets/win5_1-1a835fee.png",i="/steven-blogs/assets/win5_2-222debf2.png",r="/steven-blogs/assets/win5_3-385259d2.png",k="/steven-blogs/assets/win5_4-e0f3d288.png",d={},m=l('<h1 id="用c-net轻松制作不规则窗体-附源码" tabindex="-1"><a class="header-anchor" href="#用c-net轻松制作不规则窗体-附源码" aria-hidden="true">#</a> 用C#.net轻松制作不规则窗体(附源码)</h1><p>以前，作不规则窗体涉及到API的调用和大量的编程，不是谁都能作的。很多程序员都望而却步。<br> 现在我们可以使用C#.net轻松的创建不规则窗体，下面我就用一个简单的例子来讲述其制作过程。</p><ol><li>绘制不规则窗体位图</li><li>设置窗体基本属性</li><li>编写窗体相关代码 （要实现窗口的关闭，移动等操作）</li></ol><h2 id="_1-绘制不规则窗体位图" tabindex="-1"><a class="header-anchor" href="#_1-绘制不规则窗体位图" aria-hidden="true">#</a> 1.绘制不规则窗体位图</h2><p>可以使用任意一种你喜欢的作图工具，制作一个有形状的位图，背景使用一种其他的颜色。这个颜色在编程中用得着，所以最好使用一种容易记忆的颜色。 如图下图，本例中使用的背景色为黄色（#ffff00/yellow）,文件名为bk.bmp</p><p><img src="'+u+'" alt="img_1"><br></p><h2 id="_2-创建windows窗体并设置窗体基本属性" tabindex="-1"><a class="header-anchor" href="#_2-创建windows窗体并设置窗体基本属性" aria-hidden="true">#</a> 2.创建windows窗体并设置窗体基本属性</h2><p>1&gt;新建windows应用程序</p><p><img src="'+i+'" alt="img_2"></p><p>2&gt;选中新建的窗体，设置其相应属性：</p><p>（1）。将 FormBorderStyle 属性设置为 None。<br> （2）。将窗体的 BackgroundImage 属性设置为先前创建的位图文件。不必将文件添加到项目系统中；这将在指定该文件作为背景图像时自动完成。<br> （3）。将 TransparencyKey 属性设置为位图文件的背景色，本例中为黄色。（此属性告诉应用程序窗体中的哪些部分需要设置为透明。 ）</p><p>这时你就可以按F5测试你的程序，可以看到如图所示的窗体。现在窗体还不能拖动，只能通过结束程序，或者alt+F4关闭。下面我们编写相应的代码来实现标题栏的相应功能。</p><p><img src="'+r+`" alt="img_3"></p><h2 id="_3-编写窗体相关代码" tabindex="-1"><a class="header-anchor" href="#_3-编写窗体相关代码" aria-hidden="true">#</a> 3.编写窗体相关代码</h2><p>（要实现窗口的关闭，移动等操作）</p><p>（1）。实现窗口关闭</p><p>从工具栏中拖进一个按钮，设置其按钮文字为“×”，设置其大小为合适大小。双击该按钮进入其触发时间函数。<br> 写入如下代码：</p><p><code>this.Close(); //关闭本窗体</code></p><p>（2）。设置窗体的移动操作，我们要用到两个全局的变量</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name">Point</span> mouseOffset<span class="token punctuation">;</span>        <span class="token comment">//记录鼠标指针的坐标</span>
<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> isMouseDown <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//记录鼠标按键是否按下</span>
</code></pre></div><p>创建该窗体 MouseDown事件的相应处理程序。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_MouseDown</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MouseEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">int</span></span> xOffset<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> yOffset<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Button <span class="token operator">==</span> MouseButtons<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        xOffset <span class="token operator">=</span> <span class="token operator">-</span>e<span class="token punctuation">.</span>X <span class="token operator">-</span> SystemInformation<span class="token punctuation">.</span>FrameBorderSize<span class="token punctuation">.</span>Width<span class="token punctuation">;</span>
        yOffset <span class="token operator">=</span> <span class="token operator">-</span>e<span class="token punctuation">.</span>Y <span class="token operator">-</span> SystemInformation<span class="token punctuation">.</span>CaptionHeight <span class="token operator">-</span> SystemInformation<span class="token punctuation">.</span>FrameBorderSize<span class="token punctuation">.</span>Height<span class="token punctuation">;</span>
        mouseOffset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span>xOffset<span class="token punctuation">,</span> yOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        isMouseDown <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>创建该窗体的 MouseMove事件的相应处理程序</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_MouseMove</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MouseEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isMouseDown<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Point</span> mousePos <span class="token operator">=</span> Control<span class="token punctuation">.</span>MousePosition<span class="token punctuation">;</span>
        mousePos<span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span>mouseOffset<span class="token punctuation">.</span>X<span class="token punctuation">,</span> mouseOffset<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Location <span class="token operator">=</span> mousePos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>创建该窗体的MouseUp事件的相应处理程序</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_MouseUp</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MouseEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 修改鼠标状态isMouseDown的值</span>
    <span class="token comment">// 确保只有鼠标左键按下并移动时，才移动窗体</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Button <span class="token operator">==</span> MouseButtons<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        isMouseDown <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>（3）。加入相应的其他的控件</p><p>其他的就是看你自己的需要，来添加控件，实现自己想要实现的功能。<br> 本例中添加了一文本框，设置其背景为黄色，所以显示时也成了透明的。</p><p>现在，我们就可以生成程序，看一下最后的效果了。</p><p><img src="`+k+'" alt="img_4"></p><p>注意：如果监视器的颜色深度设置大于 24 位，则不管 TransparencyKey 属性是如何设置的，窗体的非透明部分都会产生显示问题。若要避免出现这种问题，请确保“显示”控制面板中的监视器颜色深度的设置小于 24 位。当开发具有这种透明功能的应用程序时，请牢记应使您的用户意识到此问题。</p>',31),f={href:"http://www.lzhm.net/Download.aspx?AttachId=18",target:"_blank",rel:"noopener noreferrer"};function w(h,_){const a=p("ExternalLinkIcon");return o(),e("div",null,[m,n("p",null,[s("附源代码下载："),n("a",f,[s("创建不规则窗体工程文件.rar"),c(a)])])])}const y=t(d,[["render",w],["__file","win5.html.vue"]]);export{y as default};
