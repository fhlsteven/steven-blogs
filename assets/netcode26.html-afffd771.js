import{_ as n,o as s,c as a,a as t}from"./app-382facc7.js";const p={},e=t(`<h1 id="net-remoting编程简介" tabindex="-1"><a class="header-anchor" href="#net-remoting编程简介" aria-hidden="true">#</a> NET Remoting编程简介</h1><p>.NET Remoting提供了一个功能强大、高效的处理远程对象的方法，从结构上而言，.NET Remote对象非常适合通过网络访问资源，而又无需处理由基于SOAP的WebServices所带来的难题。.NET Remoting使用起来比Java的RMI简单，但要比创建Web Service难度大一些。</p><p>在本篇文章中，我们将创建一个从数据库读入内容的远程对象。文中还包括了一个忽略数据库功能的替补对象，以使没有数据库可以使用的读者仍然能够使用.NET Remoting。</p><h2 id="第一步-创建共享库" tabindex="-1"><a class="header-anchor" href="#第一步-创建共享库" aria-hidden="true">#</a> 第一步：创建共享库</h2><p>依次点击“文件”-&gt;“新创建”-&gt;“工程”，选择创建一个C# Library，并将其命名为ResumeServerLibrary，然后点击OK按钮。这将创建一个我们的.NET Remote客户端和服务器端用来通讯的“共享命令集”。</p><p>正面是完整的代码，如果要跳过数据库访问部分，可以使用下面的代码替换<code>ResumeLoader</code>对象：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResumeLoader</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>MarshalByRefObject</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ResumeLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;New Referance Added!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Resume</span> <span class="token function">GetResumeByUserID</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">decimal</span></span> userID<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Resume</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>名字空间是对象所需要的。请记住，如果得到System.Runtime.Remoting.Channels.Tcp名字空间不存在的信息，请检查是否象上面的代码那样添加了对System.Runtime.Remoting.dll的引用。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>SqlClient</span><span class="token punctuation">;</span>
</code></pre></div><p>我们为对象使用的名字空间是DotNetRemoteTest，下面的对象是MarshalByRefObject，在其中我们创建了一个引用和包括服务器端数据库操作全部完成所需要的所有工作。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">DotNetRemoteTest</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResumeLoader</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>MarshalByRefObject</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">SqlConnection</span> dbConnection<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">ResumeLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>dbConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>SqlClient<span class="token punctuation">.</span>SqlConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>dbConnection<span class="token punctuation">.</span>ConnectionString <span class="token operator">=</span>
                <span class="token string">&quot;data source=GRIMSAADO2K;initial catalog=underground;integrated security=SSPI;pers&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;ist security info=True;workstation id=GRIMSAADO2K;packet size=4096&quot;</span><span class="token punctuation">;</span>
            <span class="token comment">/*具体的连接字符串会有所不同，这超出了本篇文章的范围。如果不清楚如何创建一个数据库连接，请使用这一对象的另一个版本。*/</span>
            System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;New Referance Added!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">Resume</span> <span class="token function">GetResumeByUserID</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">decimal</span></span> userID<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Resume</span> resume <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                dbConnection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SqlCommand</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;SELECT ResumeID, UserID, Title, Body FROM Resume as theResume WHERE theResume.UserID=&quot;</span> <span class="token operator">+</span> userID <span class="token operator">+</span> <span class="token string">&quot;&quot;</span>
                    <span class="token punctuation">,</span> dbConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SqlDataReader</span> aReader <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>aReader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    resume<span class="token punctuation">.</span>ResumeID <span class="token operator">=</span> aReader<span class="token punctuation">.</span><span class="token function">GetDecimal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    resume<span class="token punctuation">.</span>UserID <span class="token operator">=</span> aReader<span class="token punctuation">.</span><span class="token function">GetDecimal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    resume<span class="token punctuation">.</span>Title <span class="token operator">=</span> aReader<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    resume<span class="token punctuation">.</span>Body <span class="token operator">=</span> aReader<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                aReader<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dbConnection<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> resume<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">&quot;Error:&quot;</span> <span class="token operator">+</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">return</span> resume<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>Resume需要能够被串行化，以便能作为被远程调用的.NET Remote对象的返回类型，原因是该对象将被转换为通过网络传输的原始数据，然后在网络的另一端再被装配成一个对象。</p><p>该对象非常简单，为了使本篇文章看起来更简单，其中的构造器甚至使用缺省的内容初始化其中的一些域。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resume</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">decimal</span></span> resumeID<span class="token punctuation">,</span> userID<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> body<span class="token punctuation">,</span> title<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">decimal</span></span> resumeID<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ResumeID <span class="token operator">=</span> resumeID<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>UserID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Body <span class="token operator">=</span> <span class="token string">&quot;This is the default body of the resume&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">&quot;This is the default Title&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> ResumeID
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> resumeID<span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resumeID <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> UserID
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> userID<span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userID <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">String</span> Body
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> body<span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">set</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">String</span> Title
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> title<span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">set</span>
        <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token comment">//RESUME对象结束 </span>
   
<span class="token punctuation">}</span><span class="token comment">//DotNetRemoteTest名字空间结束 </span>
</code></pre></div><p>编译创建的工程，就会得到一个DLL文件，并可以在其他的工程中使用它。</p><h2 id="第二步-创建server对象" tabindex="-1"><a class="header-anchor" href="#第二步-创建server对象" aria-hidden="true">#</a> 第二步：创建Server对象</h2><p>有几种方法可以创建Server对象，最直观的方法是下面的方法：在Visual Studio.NET中，依次点击“文件”-&gt;“新创建”-&gt;“工程”，选择创建一个“Command Line Application”（命令行应用程序），并将它命名为ResumeSuperServer。</p><p>最最重要的是，我们需要添加对刚才在第一步中所创建的DLL文件的应用，该应用程序才能正确地运行。依次点击“工程”-&gt;“添加引用”，然后通过点击“浏览”按钮添加一个对在第一步中所创建的DLL文件的引用。</p><p>为了使用.NET remote功能，必须通过选择“工程”-&gt;“添加引用”，添加对DLL文件的引用。在.NET标签中选择System.Runtime.Remoting.DLL，然后点击“OK”按钮。然后，需要象我们在第一步中那样添加对System.Runtime.Remoting.dll的引用。</p><p>下面的对象相当的简单和直观，我将就真正与.NET remoting相关的3行代码中的每一行进行解释。</p><p><code>TcpServerChannel</code>是.NET remoting支持的二种信道类型中的一种，它将设置我们希望我们的对象对来自哪一个端口的请求进行回应，ChannelServices.RegisterChannel将把该端口号与操作系统中的TCP/IP栈绑定。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">TcpServerChannel</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TcpServerChannel</span><span class="token punctuation">(</span><span class="token number">9932</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ChannelServices<span class="token punctuation">.</span><span class="token function">RegisterChannel</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>另一种可以设置的信道类型是HTTP，只要简单地使用System.Runtime.Remoting.Channels.Http名字空间中的HttpServerChannel对象即可搞定。使用HTTP和TCP信道之间的区别可以简单的归结为：如果应用程序是在局域网上运行，则最好使用TCP信道，因为它的性能要好于HTTP信道；如果应用程序是在互联网上运行，则有时候根据防火墙的配置，HTTP是唯一的选择。需要记住的是，如果使用了防火墙软件，则防火墙应该配置成允许TCP数据流量通过你为对象选择的端口。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>RemotingConfiguration<span class="token punctuation">.</span><span class="token function">RegisterWellKnownServiceType</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ResumeLoader</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&quot;ResumeLoader&quot;</span><span class="token punctuation">,</span> WellKnownObjectMode<span class="token punctuation">.</span>SingleCall<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这行代码设置了服务中的一些参数和把欲使用的对象名字与远程对象进行绑定，第一个参数是绑定的对象，第二个参数是TCP或HTTP信道中远程对象名字的字符串，第三个参数让容器知道，当有对对象的请求传来时，应该如何处理对象。尽管WellKnownObjectMode.Single对所有的调用者使用一个对象的实例，但它为每个客户生成这个对象的一个实例。</p><p>完整的对象代码如下所示：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>Remoting</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>Remoting<span class="token punctuation">.</span>Channels</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>Remoting<span class="token punctuation">.</span>Channels<span class="token punctuation">.</span>Tcp</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>SqlClient</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">DotNetRemoteTest</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">ResumeServerServer</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResumeSuperServer</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name">String<span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">TcpServerChannel</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TcpServerChannel</span><span class="token punctuation">(</span><span class="token number">9932</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ChannelServices<span class="token punctuation">.</span><span class="token function">RegisterChannel</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            RemotingConfiguration<span class="token punctuation">.</span><span class="token function">RegisterWellKnownServiceType</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ResumeLoader</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">&quot;ResumeLoader&quot;</span><span class="token punctuation">,</span> WellKnownObjectMode<span class="token punctuation">.</span>SingleCall<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Press Any Key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>编译这一程序并注意生成的.EXE文件的位置。</p><h2 id="第三步-创建remote客户端程序" tabindex="-1"><a class="header-anchor" href="#第三步-创建remote客户端程序" aria-hidden="true">#</a> 第三步：创建Remote客户端程序</h2><p>ResumeClinet是我们为对在上面创建的<code>ResumeSuperServer</code>远和对象进行测试而创建的。要创建这一工程，可以依次点击“文件”-&gt;“创建”-&gt;“工程”，然后选择创建一个Console Application类型、名字为<code>ResumeClient</code>的工程名。象在第二步中那样，我们需要添加对在第一步中创建的DLL文件和<code>System.Runtime.Remoting</code> DLL的引用。</p><p>下面的代码中有二行对于.NET remoting而言是特别重要的。第一行创建了一个TCP客户端信道，该信道并不是绑定在一个端口上的；第二行获取了一个对远程的ResumeLoader对象的引用。<code>Activator.GetObject</code>方法返回一个对象类型的值，我们随后会将它返回的值赋予ResumeLoader。我们传给它的参数与在服务器工程中传递给RemotingConfiguration的参数非常地相似，第一个参数是对象类型的，第二个参数是远程对象的URI。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>ChannelServices<span class="token punctuation">.</span><span class="token function">RegisterChannel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TcpClientChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ResumeLoader</span> loader <span class="token operator">=</span> <span class="token punctuation">(</span>ResumeLoader<span class="token punctuation">)</span>Activator<span class="token punctuation">.</span><span class="token function">GetObject</span><span class="token punctuation">(</span>
        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ResumeLoader</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;tcp://localhost:9932/ResumeLoader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>ResumeClient的全部代码如下所示：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span> 
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>Remoting</span><span class="token punctuation">;</span> 
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>Remoting<span class="token punctuation">.</span>Channels</span><span class="token punctuation">;</span> 
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>Remoting<span class="token punctuation">.</span>Channels<span class="token punctuation">.</span>Tcp</span><span class="token punctuation">;</span> 
<span class="token keyword">using</span> <span class="token namespace">DotNetRemoteTest</span><span class="token punctuation">;</span> 
   
<span class="token keyword">namespace</span> <span class="token namespace">ResumeClient</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResumeClient</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ChannelServices<span class="token punctuation">.</span><span class="token function">RegisterChannel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TcpClientChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ResumeLoader</span> loader <span class="token operator">=</span> <span class="token punctuation">(</span>ResumeLoader<span class="token punctuation">)</span>Activator<span class="token punctuation">.</span><span class="token function">GetObject</span><span class="token punctuation">(</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ResumeServer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;tcp://localhost:9932/ResumeLoader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to get remote referance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">Resume</span> resume <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">GetResumeByUserID</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;ResumeID:&quot;</span> <span class="token operator">+</span> resume<span class="token punctuation">.</span>ResumeID<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;UserID:&quot;</span> <span class="token operator">+</span> resume<span class="token punctuation">.</span>UserID<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Title:&quot;</span> <span class="token operator">+</span> resume<span class="token punctuation">.</span>Title<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Body:&quot;</span> <span class="token operator">+</span> resume<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在能够看到结果前不让窗口关闭 </span>
        <span class="token punctuation">}</span><span class="token comment">//END OF MAIN METHOD </span>
    <span class="token punctuation">}</span><span class="token comment">//END OF ResumeClient Object </span>
<span class="token punctuation">}</span><span class="token comment">//END OF ResumeClientNamespace </span>
</code></pre></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>在数据库中创建一个具有如下结构的表：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Table</span> Name<span class="token operator">-</span>Resume
ResumeID<span class="token punctuation">,</span> <span class="token keyword">numeric</span> <span class="token punctuation">(</span>autonumber<span class="token punctuation">)</span>
UserID<span class="token punctuation">,</span> <span class="token keyword">numeric</span>
Title<span class="token punctuation">,</span> <span class="token keyword">Char</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
Body<span class="token punctuation">,</span> Tex
</code></pre></div><p>双击我们在第二步中创建的Server.exe，然后双击在第三步中创建的Client可执行文件。如果一切正常的话，我们应该能够看到数据库中ResumeID的值为1的记录行。</p><p>总之，.NET Remoting使用起来很简单，而且为处理局域网甚至互联网范围内的资源提供了一个绝佳的方法。</p>`,39),o=[e];function c(u,l){return s(),a("div",null,o)}const i=n(p,[["render",c],["__file","netcode26.html.vue"]]);export{i as default};
