import{_ as a,o as s,c as n,a as t}from"./app-a2b6e588.js";const e="/steven-blogs/assets/toolbox19_1-d9ddf7aa.png",p={},o=t(`<h1 id="microsoft-application-blocks-for-net" tabindex="-1"><a class="header-anchor" href="#microsoft-application-blocks-for-net" aria-hidden="true">#</a> Microsoft Application Blocks for .NET</h1><p>Data Access Application Block 概述</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>Chris Brooks、Graeme Malcolm、Alex Mackman、Edward Jezierski
Microsoft Corporation
<span class="token number">2002</span> 年 <span class="token number">4</span> 月
</code></pre></div><p><strong>摘要</strong>：Data Access Application Block 是一个 .NET 组件，包含优化的数据访问代码，可以帮助用户调用存储过程以及向 SQL Server 数据库发出 SQL 文本命令。它返回 SqlDataReader、DataSet 和 XmlReader 对象。您可以在自己的 .NET 应用程序中将其作为构造块来使用，以减少需要创建、测试和维护的自定义代码的数量。您可以下载完整的 C# 和 Visual Basic .NET 源代码以及综合文档。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>您是否正在从事 .NET 应用程序数据访问代码的设计和开发？您是否觉得自己总是在反复编写相同的数据访问代码？您是否曾经将数据访问代码包装在 Helper 函数中，以便能够在一行中调用存储过程？如果是，那么 Microsoft? Data Access Application Block for .NET 正是为您设计的。</p><p>Data Access Application Block 将访问 Microsoft SQL Server? 数据库的性能和资源管理方面的最佳经验封装在一起。您可以很方便地在自己的 .NET 应用程序中将其作为构造块使用，从页减少了需要创建、测试和维护的自定义代码的数量。</p><p>尤其是，Data Access Application Block 可以帮助您：</p><ul><li>调用存储过程或 SQL 文本命令。</li><li>指定参数详细信息。</li><li>返回 SqlDataReader、DataSet 或 XmlReader 对象。</li></ul><p>例如，在引用了 Data Access Application Block 的应用程序中，您可以简单地在一行代码中调用存储过程并生成 DataSet，如下所示：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39;[Visual Basic]</span>
<span class="token keyword">Dim</span> ds <span class="token keyword">As</span> DataSet <span class="token operator">=</span> SqlHelper<span class="token punctuation">.</span>ExecuteDataset<span class="token punctuation">(</span> <span class="token operator">_</span>
      connectionString<span class="token punctuation">,</span> <span class="token operator">_</span>
      CommandType<span class="token punctuation">.</span>StoredProcedure<span class="token punctuation">,</span> <span class="token operator">_</span>
      <span class="token string">&quot;getProductsByCategory&quot;</span><span class="token punctuation">,</span> <span class="token operator">_</span>
      <span class="token keyword">new</span> SqlParameter<span class="token punctuation">(</span><span class="token string">&quot;@CategoryID&quot;</span><span class="token punctuation">,</span> categoryID<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//[C#]</span>
<span class="token class-name">DataSet</span> ds <span class="token operator">=</span> SqlHelper<span class="token punctuation">.</span><span class="token function">ExecuteDataset</span><span class="token punctuation">(</span>
      connectionString<span class="token punctuation">,</span>
      CommandType<span class="token punctuation">.</span>StoredProcedure<span class="token punctuation">,</span>
      <span class="token string">&quot;getProductsByCategory&quot;</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@CategoryID&quot;</span><span class="token punctuation">,</span> categoryID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>注意</strong>： Application Block for .NET（用于 .NET 的应用程序块）是基于对成功的 .NET 应用程序进行详细研究而设计的。它以源代码的形式提供，您可以原样使用，也可以针对自己的应用程序进行自定义。该应用程序块并不代表未来 Microsoft ADO.NET 程序库的发展方向。Microsoft ADO.NET 程序库是为在各种使用情况下实现对数据访问行为的精确控制而建立的。将来的 ADO.NET 版本可能会使用不同的模型来实现这个方案。</p><p>本概述的其余部分包括以下内容：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>Data Access Application Block 包括哪些内容？
下载和安装 Data Access Application Block
使用 Data Access Application Block
内部设计
常见问题
反馈和支持
合作者
</code></pre></div><h2 id="data-access-application-block-包括哪些内容" tabindex="-1"><a class="header-anchor" href="#data-access-application-block-包括哪些内容" aria-hidden="true">#</a> Data Access Application Block 包括哪些内容？</h2><p>提供了 Data Access Application Block 的源代码以及快速入门示例应用程序，您可以使用这些应用程序测试其功能。Data Access Application Block 还包括综合文档，可以帮助您使用和了解所提供的代码。</p><h3 id="visual-studio-net-项目" tabindex="-1"><a class="header-anchor" href="#visual-studio-net-项目" aria-hidden="true">#</a> Visual Studio .NET 项目</h3><p>提供了 Data Access Application Block 的 Microsoft Visual Basic? .NET 和 Microsoft Visual C#? 源代码，以及每种语言的快速入门示例客户端应用程序，您可以使用这些应用程序测试常见的方案。这有助于加深您对 Data Access Application Block 的工作原理的了解。您还可以自定义源代码以满足自己的需要。</p><p>您可以编译 Visual Basic 和 C# Microsoft.ApplicationBlocks.Data 项目，以生成一个名为 Microsoft.ApplicationBlocks.Data.dll 的程序集。该程序集包括一个 SqlHelper 类（其中包含用于执行数据库命令的核心功能）和一个 SqlhelperParameterCache 类（提供参数发现和缓存功能）。</p><h3 id="文档" tabindex="-1"><a class="header-anchor" href="#文档" aria-hidden="true">#</a> 文档</h3><p>Data Access Application Block 的文档主要包括以下内容：</p><ul><li><strong>使用 Data Access Application Block 开发应用程序</strong>。本部分包括快速入门示例，其中包含多种常见的使用情况，可以帮助您快速轻松地掌握 Data Access Application Block（数据访问应用程序块）的使用。</li><li><strong>Data Access Application Block 的设计与实现</strong>。本部分包括背景设计原理信息，以便用户深入了解 Data Access Application Block 的设计与实现。</li><li><strong>部署和运行</strong>。本部分包括安装信息，其中包含部署和更新选项以及与安全性有关的信息。</li><li><strong>参考</strong>。本部分包含综合的 API 参考，其中详细介绍了构成 Data Access Application Block 的类和接口。</li></ul><h3 id="系统要求" tabindex="-1"><a class="header-anchor" href="#系统要求" aria-hidden="true">#</a> 系统要求</h3><p>要运行 Data Access Application Block，需要满足以下要求：</p><ul><li>Microsoft Windows? 2000、Windows XP Professional</li><li>.NET Framework SDK（英文）的 RTM 版本</li><li>Visual Studio? .NET 的 RTM 版本（推荐，但不必需）</li><li>SQL Server 7.0 或更高版本的数据库服务器</li></ul><h2 id="下载并安装-data-access-application-block" tabindex="-1"><a class="header-anchor" href="#下载并安装-data-access-application-block" aria-hidden="true">#</a> 下载并安装 Data Access Application Block</h2><p>您可以获取一个包含已签名的 Data Access Application Block 程序集和综合文档的 Windows 安装程序文件。</p><p>安装进程将在您的“程序”菜单中创建一个 <strong>Microsoft Application Blocks for .NET</strong>（用于 .NET 的 Microsoft 应用程序块）子菜单。该子菜单中有一个 Data Access（数据访问）子菜单，其中包括用于启动文档的选项和用于启动 Data Access Application Block Visual Studio .NET 解决方案的选项。</p><p>请转到 MSDN Downloads（英文）进行下载。</p><h2 id="使用-data-access-application-block" tabindex="-1"><a class="header-anchor" href="#使用-data-access-application-block" aria-hidden="true">#</a> 使用 Data Access Application Block</h2><p>本节讨论如何使用 Data Access Application Block 来执行数据库命令和管理参数。图 1 显示了 Data Access Application Block 的主要元素。</p><p><img src="`+e+`" alt="img_1"><br> 图 1：Data Access Application Block</p><p>SqlHelper 类提供了一组静态方法，可以用来向 SQL Server 数据库发出许多各种不同类型的命令。</p><p>SqlHelperParameterCache 类提供命令参数缓存功能，可以用来提高性能。该类由许多 Execute 方法（尤其是那些只运行存储过程的重写方法）在内部使用。数据访问客户端也可以直接使用它来缓存特定命令的特定参数集。</p><h3 id="使用-sqlhelper-类执行命令" tabindex="-1"><a class="header-anchor" href="#使用-sqlhelper-类执行命令" aria-hidden="true">#</a> 使用 SqlHelper 类执行命令</h3><p>SqlHelper 类提供了五种 Shared (Visual Basic) 或 static (C#) 方法，它们是：ExecuteNonQuery、ExecuteDataset、ExecuteReader、ExecuteScalar 和 ExecuteXmlReader。实现的每种方法都提供一组一致的重载。这提供了一种很好的使用 SqlHelper 类来执行命令的模式，同时为开发人员选择访问数据的方式提供了必要的灵活性。每种方法的重载都支持不同的方法参数，因此开发人员可以确定传递连接、事务和参数信息的方式。类中实现的所有方法都支持以下重载：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; [Visual Basic]</span>
Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> connection <span class="token keyword">As</span> SqlConnection<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> commandType <span class="token keyword">As</span> CommandType<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> CommandText <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> connection <span class="token keyword">As</span> SqlConnection<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> commandType <span class="token keyword">As</span> CommandType<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> commandText <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> <span class="token keyword">ParamArray</span> commandParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">As</span> SqlParameter<span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> connection <span class="token keyword">As</span> SqlConnection<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> spName <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> <span class="token keyword">ParamArray</span> parameterValues<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token keyword">Object</span><span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> transaction <span class="token keyword">As</span> SqlTransaction<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> commandType <span class="token keyword">As</span> CommandType<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> commandText <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> transaction <span class="token keyword">As</span> SqlTransaction<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> commandType <span class="token keyword">As</span> CommandType<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> commandText <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> <span class="token keyword">ParamArray</span> commandParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">As</span> SqlParameter<span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> transaction <span class="token keyword">As</span> SqlTransaction<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> spName <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> <span class="token keyword">ParamArray</span> parameterValues<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token keyword">Object</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// [C#]</span>
Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> connection<span class="token punctuation">,</span> <span class="token class-name">CommandType</span> commandType<span class="token punctuation">,</span>
          <span class="token class-name"><span class="token keyword">string</span></span> commandText<span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> connection<span class="token punctuation">,</span> <span class="token class-name">CommandType</span> commandType<span class="token punctuation">,</span>
          <span class="token class-name"><span class="token keyword">string</span></span> commandText<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> commandParameters<span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> connection<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> spName<span class="token punctuation">,</span>
          <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> parameterValues<span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> connection<span class="token punctuation">,</span>
          <span class="token class-name">CommandType</span> commandType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> commandText<span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> connection<span class="token punctuation">,</span>
          <span class="token class-name">CommandType</span> commandType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> commandText<span class="token punctuation">,</span>
          <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> commandParameters<span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> connection<span class="token punctuation">,</span>
          <span class="token class-name"><span class="token keyword">string</span></span> spName<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> parameterValues<span class="token punctuation">)</span>
</code></pre></div><p>除这些重载以外，除 ExecuteXmlReader 之外的其他方法还提供了另一种重载：允许将连接信息作为连接字符串而不是连接对象来传递，如下面的方法签名所示：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; [Visual Basic]</span>
Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> connectionString <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> commandType <span class="token keyword">As</span> CommandType<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> commandText <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> connectionString <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> commandType <span class="token keyword">As</span> CommandType<span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> commandText <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> <span class="token keyword">ParamArray</span> commandParameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">As</span> SqlParameter<span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">ByVal</span> connectionString <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> spName <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> <span class="token operator">_</span>
          <span class="token keyword">ByVal</span> <span class="token keyword">ParamArray</span> parameterValues<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token keyword">Object</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// [C#]</span>
Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> connectionString<span class="token punctuation">,</span> <span class="token class-name">CommandType</span> commandType<span class="token punctuation">,</span>
          <span class="token class-name"><span class="token keyword">string</span></span> commandText<span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> connectionString<span class="token punctuation">,</span> <span class="token class-name">CommandType</span> commandType<span class="token punctuation">,</span>
          <span class="token class-name"><span class="token keyword">string</span></span> commandText<span class="token punctuation">,</span> 
          <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> commandParameters<span class="token punctuation">)</span>

Execute<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> connectionString<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> spName<span class="token punctuation">,</span>
          <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> parameterValues<span class="token punctuation">)</span>
</code></pre></div><p><strong>注意</strong>： ExecuteXmlReader 不支持连接字符串，因为：与 SqlDataReader 对象不同，XmlReader 对象在 XmlReader 关闭时没有提供自动关闭连接的方法。如果客户端传递了连接字符串，那么当客户端完成对 XmlReader 的操作后，将无法关闭与 XmlReader 相关联的连接对象。</p><p>通过参考 Data Access Application Block 程序集并导入 Microsoft.ApplicationBlocks.Data 命名空间，您可以轻松编写使用任何一种 SqlHelper 类方法的代码，如下面的代码示例所示：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; [Visual Basic]</span>
<span class="token keyword">Imports</span> Microsoft<span class="token punctuation">.</span>ApplicationBlocks<span class="token punctuation">.</span>Data
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// [C#]</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>ApplicationBlocks<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span>
</code></pre></div><p>导入命名空间后，您可以调用任何 Execute* 方法，如下面的代码示例所示：</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; [Visual Basic]</span>
<span class="token keyword">Dim</span> ds <span class="token keyword">As</span> DataSet <span class="token operator">=</span> SqlHelper<span class="token punctuation">.</span>ExecuteDataset<span class="token punctuation">(</span> <span class="token operator">_</span>
   <span class="token string">&quot;SERVER=(local);DATABASE=Northwind;INTEGRATED SECURITY=True;&quot;</span><span class="token punctuation">,</span>
     <span class="token operator">_</span>
   CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token string">&quot;SELECT * FROM Products&quot;</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// [C#]</span>
<span class="token class-name">DataSet</span> ds <span class="token operator">=</span> SqlHelper<span class="token punctuation">.</span><span class="token function">ExecuteDataset</span><span class="token punctuation">(</span><span class="token string">&quot;SERVER=DataServer;DATABASE=Northwind;INTEGRATED SECURITY=sspi;&quot;</span><span class="token punctuation">,</span> _CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token string">&quot;SELECT * FROM Products&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="使用-sqlhelperparametercache-类管理参数" tabindex="-1"><a class="header-anchor" href="#使用-sqlhelperparametercache-类管理参数" aria-hidden="true">#</a> 使用 SqlHelperParameterCache 类管理参数</h3><p>SqlHelperParameterCache 类提供了三种可以用来管理参数的公共共享方法。它们是：</p><ul><li><code>CacheParameterSet</code>。用于将 SqlParameters 数组存储到缓存中。</li><li><code>GetCachedParameterSet</code>。用于检索缓存的参数数组的副本。</li><li><code>GetSpParameterSet</code>。一种重载方法，用于检索指定存储过程的相应参数（首先查询一次数据库，然后缓存结果以便将来查询）。</li></ul><h3 id="缓存和检索参数" tabindex="-1"><a class="header-anchor" href="#缓存和检索参数" aria-hidden="true">#</a> 缓存和检索参数</h3><p>通过使用 CacheParameterSet 方法，可以缓存 SqlParameter 对象数组。此方法通过将连接字符串和命令文本连接起来创建一个键，然后将参数数组存储在 Hashtable 中。</p><p>要从缓存中检索参数，请使用 GetCachedParameterSet 方法。此方法将返回一个 SqlParameter 对象数组，这些对象已使用缓存（与传递给该方法的连接字符串和命令文本相对应）中的参数的名称、值、方向和数据类型等进行了初始化。</p><p><strong>注意</strong>： 用作参数集的键的连接字符串通过简单的字符串比较进行匹配。用于从 GetCachedParameterSet 中检索参数的连接字符串必须与用来通过 CacheParameterSet 来存储这些参数的连接字符串完全相同。语法不同的连接字符串即使语义相同，也不会被认为是匹配的。</p><p>以下代码显示了如何使用 SqlHelperParameterCache 类来缓存和检索 Transact-SQL 语句的参数。</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; [Visual Basic]</span>
<span class="token comment">&#39; 初始化连接字符串和命令文本</span>
<span class="token comment">&#39; 它们将构成用来存储和检索参数的键</span>
<span class="token keyword">Const</span> CONN_STRING <span class="token keyword">As</span> <span class="token keyword">String</span> <span class="token operator">=</span> <span class="token operator">_</span>
  <span class="token string">&quot;SERVER=(local); DATABASE=Northwind; INTEGRATED SECURITY=True;&quot;</span>
<span class="token keyword">Dim</span> sql <span class="token keyword">As</span> <span class="token keyword">String</span> <span class="token operator">=</span> <span class="token operator">_</span>
       <span class="token string">&quot;SELECT ProductName FROM Products &quot;</span> <span class="token operator">+</span> <span class="token operator">_</span>
       <span class="token string">&quot;WHERE Category=@Cat AND SupplierID = @Sup&quot;</span>

<span class="token comment">&#39; 缓存参数</span>
<span class="token keyword">Dim</span> paramsToStore<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">As</span> SqlParameter
paramsToStore<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">New</span> SqlParameter<span class="token punctuation">(</span><span class="token string">&quot;@Cat&quot;</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">)</span>
paramsToStore<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">New</span> SqlParameter<span class="token punctuation">(</span><span class="token string">&quot;@Sup&quot;</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">)</span>
SqlHelperParameterCache<span class="token punctuation">.</span>CacheParameterSet<span class="token punctuation">(</span>CONN_STRING<span class="token punctuation">,</span> <span class="token operator">_</span>
                                          sql<span class="token punctuation">,</span> <span class="token operator">_</span>
                                          paramsToStore<span class="token punctuation">)</span>

<span class="token comment">&#39; 从缓存中检索参数</span>
<span class="token keyword">Dim</span> storedParams<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">As</span> SqlParameter
storedParams <span class="token operator">=</span> SqlHelperParameterCache<span class="token punctuation">.</span>GetCachedParameterSet<span class="token punctuation">(</span> <span class="token operator">_</span>
                                                 CONN_STRING<span class="token punctuation">,</span> sql<span class="token punctuation">)</span>
storedParams<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token number">2</span>
storedParams<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token number">3</span>

<span class="token comment">&#39; 在命令中使用参数</span>
<span class="token keyword">Dim</span> ds <span class="token keyword">As</span> DataSet
ds <span class="token operator">=</span> SqlHelper<span class="token punctuation">.</span>ExecuteDataset<span class="token punctuation">(</span>CONN_STRING<span class="token punctuation">,</span> <span class="token operator">_</span>
                              CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token operator">_</span>
                              sql<span class="token punctuation">,</span> storedParams<span class="token punctuation">)</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// [C#]</span>
<span class="token comment">// 初始化连接字符串和命令文本</span>
<span class="token comment">// 它们将构成用来存储和检索参数的键</span>
<span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> CONN_STRING <span class="token operator">=</span> <span class="token string">&quot;SERVER=(local); DATABASE=Northwind; INTEGRATED SECURITY=True;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> spName <span class="token operator">=</span> <span class="token string">&quot;SELECT ProductName FROM Products &quot;</span> <span class="token operator">+</span> 
                <span class="token string">&quot;WHERE Category=@Cat AND SupplierID = @Sup&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 缓存参数</span>
<span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> paramsToStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
paramsToStore<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token return-type class-name">New</span> <span class="token function">SqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@Cat&quot;</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">;</span>
paramsToStore<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token return-type class-name">New</span> <span class="token function">SqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@Sup&quot;</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">;</span>
SqlHelperParameterCache<span class="token punctuation">.</span><span class="token function">CacheParameterSet</span><span class="token punctuation">(</span>CONN_STRING<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> paramsToStore<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从缓存中检索参数</span>
<span class="token class-name">SqlParameter</span> storedParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
storedParams <span class="token operator">=</span> SqlHelperParameterCache<span class="token punctuation">.</span><span class="token function">GetCachedParameterSet</span><span class="token punctuation">(</span>CONN_STRING<span class="token punctuation">,</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">storedParams</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">storedParams</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">// 在命令中使用参数</span>
<span class="token class-name">DataSet</span> ds<span class="token punctuation">;</span>
ds <span class="token operator">=</span> SqlHelper<span class="token punctuation">.</span><span class="token function">ExecuteDataset</span><span class="token punctuation">(</span>CONN_STRING<span class="token punctuation">,</span> CommandType<span class="token punctuation">.</span>StoredProcedure<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> storedParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="检索存储过程参数" tabindex="-1"><a class="header-anchor" href="#检索存储过程参数" aria-hidden="true">#</a> 检索存储过程参数</h3><p>SqlHelperParameterCache 还提供了针对特定存储过程检索参数数组的方法。一种名为 GetSpParameterSet 的重载方法提供了此功能，它包含两种实现。该方法尝试从缓存中检索特定存储过程的参数。如果这些参数尚未被缓存，则使用 .NET 的 SqlCommandBuilder 类从内部检索，并将它们添加到缓存中，以便用于后续的检索请求。然后，为每个参数指定相应的参数设置，最后将这些参数以数组形式返回给客户端。以下代码显示了如何检索 Northwind 数据库中 SalesByCategory 存储过程的参数。</p><div class="language-vb" data-ext="vb"><pre class="language-vb"><code><span class="token comment">&#39; [Visual Basic]</span>
<span class="token comment">&#39; 初始化连接字符串和命令文本</span>
<span class="token comment">&#39; 它们将构成用来存储和检索参数的键</span>
<span class="token keyword">Const</span> CONN_STRING <span class="token keyword">As</span> <span class="token keyword">String</span> <span class="token operator">=</span> <span class="token operator">_</span>
  <span class="token string">&quot;SERVER=(local); DATABASE=Northwind; INTEGRATED SECURITY=True;&quot;</span>
<span class="token keyword">Dim</span> spName <span class="token keyword">As</span> <span class="token keyword">String</span> <span class="token operator">=</span> <span class="token string">&quot;SalesByCategory&quot;</span>

<span class="token comment">&#39; 检索参数</span>
<span class="token keyword">Dim</span> storedParams<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">As</span> SqlParameter
storedParams <span class="token operator">=</span> SqlHelperParameterCache<span class="token punctuation">.</span>GetSpParameterSet<span class="token punctuation">(</span> <span class="token operator">_</span>
                                          CONN_STRING<span class="token punctuation">,</span> spName<span class="token punctuation">)</span>
storedParams<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token string">&quot;Beverages&quot;</span>
storedParams<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token string">&quot;1997&quot;</span>

<span class="token comment">&#39; 在命令中使用参数</span>
<span class="token keyword">Dim</span> ds <span class="token keyword">As</span> DataSet
ds <span class="token operator">=</span> SqlHelper<span class="token punctuation">.</span>ExecuteDataset<span class="token punctuation">(</span>CONN_STRING<span class="token punctuation">,</span> <span class="token operator">_</span>
                              CommandType<span class="token punctuation">.</span>StoredProcedure<span class="token punctuation">,</span> <span class="token operator">_</span>
                              spName<span class="token punctuation">,</span> storedParams<span class="token punctuation">)</span>
</code></pre></div><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// [C#]</span>
<span class="token comment">// 初始化连接字符串和命令文本</span>
<span class="token comment">// 它们将构成用来存储和检索参数的键</span>
<span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> CONN_STRING <span class="token operator">=</span>
  <span class="token string">&quot;SERVER=(local); DATABASE=Northwind; INTEGRATED SECURITY=True;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> spName <span class="token operator">=</span> <span class="token string">&quot;SalesByCategory&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 检索参数</span>
<span class="token class-name">SqlParameter</span> storedParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
storedParams <span class="token operator">=</span> SqlHelperParameterCache<span class="token punctuation">.</span><span class="token function">GetSpParameterSet</span><span class="token punctuation">(</span>CONN_STRING<span class="token punctuation">,</span> spName<span class="token punctuation">)</span><span class="token punctuation">;</span>
storedParams<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token string">&quot;Beverages&quot;</span><span class="token punctuation">;</span>
storedParams<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token string">&quot;1997&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 在命令中使用参数</span>
<span class="token class-name">DataSet</span> ds<span class="token punctuation">;</span>
ds <span class="token operator">=</span> SqlHelper<span class="token punctuation">.</span><span class="token function">ExecuteDataset</span><span class="token punctuation">(</span>CONN_STRING<span class="token punctuation">,</span> 
                              CommandType<span class="token punctuation">.</span>StoredProcedure<span class="token punctuation">,</span>
                              spName<span class="token punctuation">,</span> storedParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="内部设计" tabindex="-1"><a class="header-anchor" href="#内部设计" aria-hidden="true">#</a> 内部设计</h2><p>Data Access Application Block 包含了完整的源代码和有关其设计的综合指南。本节介绍有关主要实现的详细信息。</p><h3 id="sqlhelper-类实现详细信息" tabindex="-1"><a class="header-anchor" href="#sqlhelper-类实现详细信息" aria-hidden="true">#</a> SqlHelper 类实现详细信息</h3><p>SqlHelper 类用于通过一组静态方法来封装数据访问功能。该类不能被继承或实例化，因此将其声明为包含专用构造函数的不可继承类。</p><p>在 SqlHelper 类中实现的每种方法都提供了一组一致的重载。这提供了一种很好的使用 SqlHelper 类来执行命令的模式，同时为开发人员选择访问数据的方式提供了必要的灵活性。每种方法的重载都支持不同的方法参数，因此开发人员可以确定传递连接、事务和参数信息的方式。在 SqlHelper 类中实现的方法包括：</p><ul><li>ExecuteNonQuery。此方法用于执行不返回任何行或值的命令。这些命令通常用于执行数据库更新，但也可用于返回存储过程的输出参数。</li><li>ExecuteReader。此方法用于返回 SqlDataReader 对象，该对象包含由某一命令返回的结果集。</li><li>ExecuteDataset。此方法返回 DataSet 对象，该对象包含由某一命令返回的结果集。</li><li>ExecuteScalar。此方法返回一个值。该值始终是该命令返回的第一行的第一列。</li><li>ExecuteXmlReader。此方法返回 FOR XML 查询的 XML 片段。</li></ul><p>除了这些公共方法外，SqlHelper 类还包含一些专用函数，用于管理参数和准备要执行的命令。不管客户端调用什么样的方法实现，所有命令都通过 SqlCommand 对象来执行。在 SqlCommand 对象能够被执行之前，所有参数都必须添加到 Parameters 集合中，并且必须正确设置 Connection、CommandType、CommandText 和 Transaction 属性。SqlHelper 类中的专用函数主要用于提供一种一致的方式，以便向 SQL Server 数据库发出命令，而不考虑客户端应用程序调用的重载方法实现。SqlHelper 类中的专用实用程序函数包括：</p><ul><li>AttachParameters：该函数用于将所有必要的 SqlParameter 对象连接到正在运行的 SqlCommand。</li><li>AssignParameterValues：该函数用于为 SqlParameter 对象赋值。</li><li>PrepareCommand：该函数用于对命令的属性（如连接、事务环境等）进行初始化。</li><li>ExecuteReader：此专用 ExecuteReader 实现用于通过适当的 CommandBehavior 打开 SqlDataReader 对象，以便最有效地管理与阅读器关联的连接的有效期。</li></ul><h3 id="sqlhelperparametercache-类实现详细信息" tabindex="-1"><a class="header-anchor" href="#sqlhelperparametercache-类实现详细信息" aria-hidden="true">#</a> SqlHelperParameterCache 类实现详细信息</h3><p>参数数组缓存在专用 Hashtable 中。从缓存中检索的参数进行内部复制，这样客户端应用程序能够更改参数值以及进行其他操作，而不会影响缓存的参数数组。专用共享函数 CloneParameters 可以实现此目的。</p><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="此版本包含哪些新增功能" tabindex="-1"><a class="header-anchor" href="#此版本包含哪些新增功能" aria-hidden="true">#</a> 此版本包含哪些新增功能？</h3><p>与 Data Access Application Block Beta 2.0 版本相比，该 RTM 版本包含以下新增功能和变化：</p><ul><li>SqlHelper 类方法的事务型重载不再需要 SqlConnection 参数。在此版本中，连接信息从 SqlTransaction 对象中派生，因此不必在方法签名中包含 SqlConnection 对象参数。</li><li>现在，GetSpParameterSet 方法使用 ADO.NET CommandBuilder 类的 DeriveParameters 方法来确定存储过程所需要的参数。这比 Beta 2.0 版本中直接通过查询数据库来检索信息的效率更高。</li></ul><h3 id="可以使用-xcopy-部署方法来部署-data-access-application-block-程序集吗" tabindex="-1"><a class="header-anchor" href="#可以使用-xcopy-部署方法来部署-data-access-application-block-程序集吗" aria-hidden="true">#</a> 可以使用 XCOPY 部署方法来部署 Data Access Application Block 程序集吗？</h3><p>可以。Microsoft.ApplicationBlocks.Data.dll 程序集在编译后可以使用 XCOPY 进行部署。</p><h3 id="什么时候应该使用-executedataset-方法-什么时候应该使用-executereader-方法" tabindex="-1"><a class="header-anchor" href="#什么时候应该使用-executedataset-方法-什么时候应该使用-executereader-方法" aria-hidden="true">#</a> 什么时候应该使用 ExecuteDataset 方法，什么时候应该使用 ExecuteReader 方法？</h3><p>这个问题实际上是什么时候应该返回 DataSet 对象中的多个数据行，什么时候应该使用 DataReader。答案取决于您的应用程序的特定需要，以及您在灵活性和原始性能之间的取舍。DataSet 为您提供数据的灵活的且断开连接的关系视图，而 DataReader 为您提供性能卓越的、只读的、仅向前光标。有关 DataSet 和 DataReader 的全面比较，请参阅 Data Access Architecture Guide（英文）。</p><h3 id="如何使用-executedataset-返回包含多个表的数据集" tabindex="-1"><a class="header-anchor" href="#如何使用-executedataset-返回包含多个表的数据集" aria-hidden="true">#</a> 如何使用 ExecuteDataset 返回包含多个表的数据集？</h3><p>通过创建一个可以返回多个行集的存储过程（通过执行多个 SELECT 语句或者对其他存储过程进行嵌套调用），并使用 ExecuteDataset 方法执行该过程，您可以检索包含多个表的数据集。</p><p>例如，假设您的数据库包含以下存储过程。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> GetCategories
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Categories
GO
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> GetProducts
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Products
</code></pre></div><p>您可以创建一个主存储过程来对这些过程进行嵌套调用，如下面的代码示例所示。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> GetCategoriesAndProducts
<span class="token keyword">AS</span>
<span class="token keyword">BEGIN</span>
  <span class="token keyword">EXEC</span> GetCategories
  <span class="token keyword">EXEC</span> GetProducts
<span class="token keyword">END</span>
</code></pre></div><p>使用 ExecuteDataset 方法执行此主存储过程将返回一个 DateSet，其中包含两个表：一个表包含分类数据，另一个表包含产品数据。</p><p><strong>注意</strong>： ExecuteDataset 方法不提供为返回的表指定自定义名称的方法。第一个表的编号始终为 0，名称为 Table，第二个表的编号为 1，名称为 Table1，依此类推。</p><h3 id="还有其他的应用程序块吗" tabindex="-1"><a class="header-anchor" href="#还有其他的应用程序块吗" aria-hidden="true">#</a> 还有其他的应用程序块吗？</h3><p>Data Access Application Block 是即将发布的几个应用程序块之一。这些应用程序块可以解决开发人员在不同项目中遇到的共同问题。它们可以快速方便地插入到 .NET 应用程序中。</p><h2 id="反馈和支持" tabindex="-1"><a class="header-anchor" href="#反馈和支持" aria-hidden="true">#</a> 反馈和支持</h2><p>如果您对 Data Access Application Block 有任何问题、意见和建议，请向 <code>devfdbck@microsoft.com</code> 发送电子邮件，我们将及时提供反馈。</p><p>Application Blocks for .NET 旨在协助开发 .NET 分布式应用程序。示例代码和文档都按原样提供。尽管已经过测试并被认为是稳定的代码集，但我们并不象传统的 Microsoft 产品那样对其提供支持。</p><p>我们还创建了一个新闻组，可以帮助您使用 Application Blocks for .NET（.NET 应用程序块）。您可以通过新闻组在联机的开放论坛中向同行、同事和 Microsoft 支持专家咨询。</p><p>其他人也可以从您的问题和评论中获益，我们的开发小组将每天查看新闻组：<br> 新闻组：基于 Web 的读者<br> http://msdn.microsoft.com/newsgroups/loadframes.asp?icp=msdn&amp;slcid=us&amp;newsgroup=microsoft.public.dotnet.distributed_apps（英文）</p><p>新闻组：NNTP 读者<br> news://msnews.microsoft.com/microsoft.public.dotnet.distributed_apps（英文）</p><p>您想学习和利用 .NET 的功能吗？欢迎您与 Microsoft Technology Centers 的技术专家并肩工作，您将学到最好的开发经验。有关详细信息，请访问 http://www.microsoft.com/business/services/mtc.asp（英文）。</p><p>您需要更多的帮助吗？请访问新增的客户支持服务 Advisory Services，该解决方案可以满足您小规模的咨询需要。有关 Advisory Services 的详细信息，请访问 http://support.microsoft.com/default.aspx?id=fh;EN-US;advisoryservice（英文）。</p><h2 id="更多信息" tabindex="-1"><a class="header-anchor" href="#更多信息" aria-hidden="true">#</a> 更多信息</h2><p>Data Access Application Block 的设计和开发是建立在 Data Access in .NET Architecture Guide（英文）中讨论的最佳开发经验和通用设计原则基础之上的。请阅读该指南，以了解有关数据访问的详细信息。</p><h2 id="合作者" tabindex="-1"><a class="header-anchor" href="#合作者" aria-hidden="true">#</a> 合作者</h2><p>衷心感谢以下投稿人和审阅人：Susan Warren、Brad Abrams、Andy Dunn、Michael Day、Mark Ashton、Gregory Leake、Steve Busby、Kenny Jones、David Schleifer、Andrew Roubin (Vorsite Corp.)、Jeffrey Richter (Wintellect)、Bernard Chen (Sapient) 和 Matt Drucker (Turner Broadcasting)。</p><p>同时感谢内容组的以下成员：Tina Burden (Entirenet)、Shylender Ramamurthy (Infosys Technologies Ltd) 和 Filiberto Selvas Patino。</p>`,104),c=[o];function l(r,k){return s(),n("div",null,c)}const i=a(p,[["render",l],["__file","toolbox19.html.vue"]]);export{i as default};
