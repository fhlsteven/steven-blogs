import{_ as n,o as s,c as a,d as o}from"./app-3696c600.js";const p={},t=o(`<h1 id="关于使用for循环" tabindex="-1"><a class="header-anchor" href="#关于使用for循环" aria-hidden="true">#</a> 关于使用for循环</h1><p>有人喜欢使用<code>for</code>作类似<code>while</code>的循环：</p><p><code>for(;;) { }</code></p><p>评论：这是一种风格，有一部分人使用，我个人觉得不如<code>while</code>来得直观。</p><p><strong>究竟是<code>++i</code>，还是<code>i++</code></strong></p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayA<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayA<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><p>以前我使用<code>i++</code>的写法，后来，看到一些优秀的代码中，大多使用<code>++i</code>，我就改用<code>++i</code>了。为什么使用<code>++i</code>，看到过一些理由，但觉得那些理由，不值一提。</p><p><strong>使用<code>i</code>, <code>j</code>, <code>k</code>作多层循环</strong></p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayA<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token class-name">Object<span class="token punctuation">[</span><span class="token punctuation">]</span></span> arrayB <span class="token operator">=</span> arrayA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arrayB<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> b <span class="token operator">=</span> arrayB<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//此处需要多加注意，一不留神就会写成Object b = arrayB[i];</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre></div><p>使用<code>i</code>, <code>j</code>, <code>k</code>做多层循环时，很容易犯错误，如上述代码中的注释缩写的那样。我参加的代码评审（Code Review）中，或者开发过程中，经常有同事遇到这种BUG。我也曾经吃过亏，每次编写<code>i</code>, <code>j</code>, <code>k</code>多层<code>for</code>循环时，就会提醒自己，小心，别犯错误！</p><p>使用<code>for</code>的习惯，除了<code>++i</code>和<code>i++</code>的写法不同外，还有和<code>if</code>、<code>while</code>等语句一样的不同写法，如下：</p><p>第一种写法</p><p>a、关键字<code>for</code>后面有空格<br> b、二元表达式左右有空格<br> c、每个大括号，单独占一行<br> d、<code>else</code>关键字单独占一行</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><p>第二种写法：</p><p>a、关键字<code>if</code>后面有空格<br> b、二元表达式左右有空格<br> c、大括号放在上一句的右边</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><p>需要优化是，可能你也会采用这种写法：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> listCount <span class="token operator">=</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listCount<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><p>如果<code>for</code>循环中，不会添加或者删除<code>list</code>的元素，使用这种方式优化，可能得到一丁点（可能不值一提）的性能提升。</p><p>需要从<code>list</code>中删除元素时，可能你会使用反序的遍历。如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> listCount <span class="token operator">=</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> listCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果<code>list</code>的实现是<code>ArrayList</code>，反序遍历可能比正序删除的性能更高一些。</p><p>此外，<code>for</code>还有一些其他的使用方式，如：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">incement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><hr><p>1楼</p><blockquote><p>个人感觉<code>for</code>比<code>while</code>灵活,<code>while</code>比<code>for</code>清晰。<br> 2004-07-23 05:53 | 正红花油</p></blockquote><p>2楼</p><blockquote><p>看过一些温少的post，感觉得出温少的功力很深哦<br> 但有些时候，有一种意犹未尽的感觉，似乎对“为什么”讲的不够深入<br> 2004-07-23 09:30 | kwklover</p></blockquote><p>3楼</p><blockquote><p>@kwklover<br> 谢谢你的夸奖，我希望我的工作对大家有所帮助！<br> 你谈到，有时候，我的post对“为什么”讲的不够深入，原因可能是：<br> 1、技术水平有限，无法阐述清楚。<br> 2、文笔不够好，写得不清楚。<br> 3、对公司内技术保密，与工作关系比较密切的内容，尽量避免讨论深入。<br> 4、法律纠纷问题。如我共享的ASP .NET的资料，讨论到相关问题，尽量避免把事情说白了，大家意会就好了。<br> 2004-07-23 19:11 | 温少</p></blockquote><p>4楼</p><blockquote><p>觉得温少写的内容不算深，但还有点意思 偏向研究代码、算法，而不是界面控件<br> 2004-07-23 22:28 | JohnnyHu</p></blockquote><p>5楼</p><blockquote><p>以前用C养下的习惯喜欢使用 <code>for(;;)</code><br><code>for</code>语句的使用比较频繁，干脆就都<code>for</code>了<br><code>for(;;) </code>这种 无限循环的模式很容易识别<br> 很多编译器都能优化这种循环 <code>while(True)</code>就不一定了<br> 2004-07-23 22:29 | Meyer</p></blockquote><p>6楼</p><blockquote><p>我还是看不出 前后有什么不同<br><code>Object b = arrayB[j]; //此处需要多加注意，一不留神就会写成Object b = arrayB[j];</code><br> 2004-07-23 22:31 | JohnnyHu</p></blockquote><p>7楼</p><blockquote><p>@JohnnyHu ，这是原文的笔误，已经修改过来了。<br> 应该是：<br><code>Object b = arrayB[j]; //此处需要多加注意，一不留神就会写成Object b = arrayB[i];</code></p><p>谢谢JohnnyHu，帮我找到了一个BUG。<br> 2004-07-23 23:46 | 温少</p></blockquote><p>8楼</p><blockquote><p>@JohnnyHu 说的很对，我这里的文章其实都比较明明白白，没有太多底层的内容。我已经大约两年没怎么写界面了，都是写一些后台运行的代码。<br> 2004-07-24 03:20 | 温少</p></blockquote><p>9楼</p><blockquote><p>对于<code>int</code>来说<code>i++</code>和<code>++i</code>可以认为是没有差别的．<br> 但是如果是对象<code>obj++</code>与<code>++obj</code>是不一样，因为<code>obj++</code>会生成一个临时对象．<br> 2004-07-24 17:01 | dumbo</p></blockquote><p>10楼</p><blockquote><p>自增运算符对操作数加1，因此<br><code>x = x + 1;</code><br> 与下面一样：<code>x++;</code><br> 自增运算符既可以放在操作数前面（前缀），也可以放在操作数的后面（后缀）。例如，<code>x = x + 1;</code><br> 可以写成：<code>++x</code> 或者是 <code>x++</code>;<br> 在上面示例中，自增运算符作为前缀或后缀是没有区别的。<br> 然而，当自增运算符作为一个较大表达式的一部分时，情况就大相径庭了。当自增运算符在操作数之前，Java会先将操作数的值用于表达式，然后再进行自增运算。你看下面的例子<br><code>x = 10;</code><br><code>y = ++x;</code><br></p><p>值为11</p><p>然而如果代码是下面这样<br><code>x = 10;</code><br><code>y = x++;</code></p><p>y值将会是10</p><p>这两个例子中，x的值都为11。不同之处在于何时进行自增运算。<br> 这样可以十分便利地控制自增操作发生的时间<br> 2005-04-18 20:26 | 复活的幽灵</p></blockquote>`,46),c=[t];function e(l,u){return s(),a("div",null,c)}const k=n(p,[["render",e],["__file","cspbase33.html.vue"]]);export{k as default};
