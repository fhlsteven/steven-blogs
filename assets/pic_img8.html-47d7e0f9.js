import{_ as n,o as s,c as a,a as t}from"./app-a2b6e588.js";const p={},o=t(`<h1 id="用制作c-作屏幕捕获程序" tabindex="-1"><a class="header-anchor" href="#用制作c-作屏幕捕获程序" aria-hidden="true">#</a> 用制作C＃作屏幕捕获程序</h1><p>我们已经了解了Visual Basic或者Delphi等语言是如何来实现对屏幕图象捕获的。那么对于C＃来说，是如何实现这种功能的？本文就来探讨一下这个问题。</p><h2 id="一-程序设计开发及运行环境" tabindex="-1"><a class="header-anchor" href="#一-程序设计开发及运行环境" aria-hidden="true">#</a> 一． 程序设计开发及运行环境</h2><p>（1）.微软视窗2000服务器版</p><p>（2）.Net FrameWork SDK Beta 2</p><h2 id="二-程序设计的关键步骤以及具体的实现方法" tabindex="-1"><a class="header-anchor" href="#二-程序设计的关键步骤以及具体的实现方法" aria-hidden="true">#</a> 二． 程序设计的关键步骤以及具体的实现方法</h2><p>（1）.首先要创建一个和当前屏幕大小相同的<code>Bitmap</code>对象：</p><p>要实现此操作，首先就要现获得当前显示器的DC，然后根据此DC来创建Graphic对象，再由此Graphic对象产生此位图对象。这样产生的位图对象才是和当前屏幕大小相一致的。由于要获得显示器的DC，利用.Net的类库是无法实现的，这需要调用一个Windows的API函数。我们知道视窗所有API都封装在&quot;Kernel&quot;、&quot;User &quot;和&quot;GDI&quot;三个库中文件中：其中&quot;Kernel&quot;，他的库名为 &quot;KERNEL32.DLL&quot;。&quot;User &quot;这个类库在Win32中名叫 &quot;USER32.DLL&quot;。 它主要管理全部的用户接口。譬如：窗口 、菜单 、对话框 、图标等等。&quot;GDI&quot;(图象设备接口)，它在Win32中的库名为：&quot;GDI32.dll&quot;，要获得显示器的DC，所调用的API函数<code>--CreateDC()</code>，就被封装在此类库中。而要在C＃中声明视窗的API函数需要使用.Net FrameWork SDK中的名字空间&quot;<code>System.Runtime.InteropServices</code>&quot;，此名字空间提供了一系列的类来访问COM对象，和调用本地的API函数。下面是在C＃中声明此函数：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices<span class="token punctuation">.</span>DllImportAttribute</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;gdi32.dll&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">CreateDC</span><span class="token punctuation">(</span>
    <span class="token class-name"><span class="token keyword">string</span></span> lpszDriver<span class="token punctuation">,</span> <span class="token comment">// 驱动名称</span>
    <span class="token class-name"><span class="token keyword">string</span></span> lpszDevice<span class="token punctuation">,</span> <span class="token comment">// 设备名称</span>
    <span class="token class-name"><span class="token keyword">string</span></span> lpszOutput<span class="token punctuation">,</span> <span class="token comment">// 无用，可以设定位&quot;NULL&quot;</span>
    IntPtr lpInitData  <span class="token comment">// 任意的打印机数据</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>在C＃中声明过此API函数，就可以创建和显示器大小一致的位图对象，具体实现语句如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IntPtr</span> dc1 <span class="token operator">=</span> <span class="token function">CreateDC</span><span class="token punctuation">(</span><span class="token string">&quot;DISPLAY&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建显示器的DC</span>
<span class="token class-name">Graphics</span> g1 <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromHdc</span><span class="token punctuation">(</span>dc1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//由一个指定设备的句柄创建一个新的Graphics对象</span>
MyImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span>Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> g1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//根据屏幕大小创建一个与之相同大小的Bitmap对象</span>
</code></pre></div><p>（2）.根据此位图创建一个和其一样的Graphic对象：</p><p>通过下面代码就可以实现此功能：</p><p><code>Graphics g2 = Graphics.FromImage(MyImage);</code></p><p>（3）.获得当前屏幕和位图的句柄：</p><p>获得此二个对象的句柄是为了下一步实现对当前屏幕图象的捕获，程序中实现的具体捕获的方法是把当前屏幕捕获到已经创建的位图对象中。具体实现代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 获得屏幕的句柄</span>
<span class="token class-name">IntPtr</span> dc3 <span class="token operator">=</span> g1<span class="token punctuation">.</span><span class="token function">GetHdc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获得位图的句柄</span>
<span class="token class-name">IntPtr</span> dc2 <span class="token operator">=</span> g2<span class="token punctuation">.</span><span class="token function">GetHdc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 把当前屏幕捕获到位图对象中</span>
</code></pre></div><p>（4）.捕获当前屏幕：</p><p>我们是通过当前屏幕保存到创建的位图对象中来实现的，具体的实现过程中是通过Windows的一个API函数--Bitblt。我想大多数程序员对此API函数一定不陌生，因为在Windows的图象编程中，会在很多地方使用到此函数。这个API函数和上面介绍的那个API函数一样，也是被封装在&quot;GDI32.dll&quot;中的，下面是此函数在C＃中的声明：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices<span class="token punctuation">.</span>DllImportAttribute</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;gdi32.dll&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">BitBlt</span><span class="token punctuation">(</span>
    <span class="token class-name">IntPtr</span> hdcDest<span class="token punctuation">,</span> <span class="token comment">// 目标设备的句柄</span>
    <span class="token class-name"><span class="token keyword">int</span></span> nXDest<span class="token punctuation">,</span>     <span class="token comment">// 目标对象的左上角的X坐标</span>
    <span class="token class-name"><span class="token keyword">int</span></span> nYDest<span class="token punctuation">,</span>     <span class="token comment">// 目标对象的左上角的X坐标</span>
    <span class="token class-name"><span class="token keyword">int</span></span> nWidth<span class="token punctuation">,</span>     <span class="token comment">// 目标对象的矩形的宽度</span>
    <span class="token class-name"><span class="token keyword">int</span></span> nHeight<span class="token punctuation">,</span>    <span class="token comment">// 目标对象的矩形的长度</span>
    <span class="token class-name">IntPtr</span> hdcSrc<span class="token punctuation">,</span>  <span class="token comment">// 源设备的句柄</span>
    <span class="token class-name"><span class="token keyword">int</span></span> nXSrc<span class="token punctuation">,</span>      <span class="token comment">// 源对象的左上角的X坐标</span>
    <span class="token class-name"><span class="token keyword">int</span></span> nYSrc<span class="token punctuation">,</span>      <span class="token comment">// 源对象的左上角的X坐标</span>
    System<span class="token punctuation">.</span>Int32 dwRop <span class="token comment">// 光栅的操作值</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>知道了此声明就可以实现对当前屏幕的保存了，具体如下：</p><p><code>BitBlt(dc2, 0, 0, Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height, dc3, 0, 0, 13369376);</code></p><p>（5）.把当前屏幕保存到硬盘，并释放句柄：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>g1<span class="token punctuation">.</span><span class="token function">ReleaseHdc</span><span class="token punctuation">(</span>dc3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//释放屏幕句柄</span>
g2<span class="token punctuation">.</span><span class="token function">ReleaseHdc</span><span class="token punctuation">(</span>dc2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//释放位图句柄</span>
MyImage<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token string">&quot;c:\\\\MyJpeg.jpg&quot;</span><span class="token punctuation">,</span> ImageFormat<span class="token punctuation">.</span>Jpeg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>我们可以根据自己的要求把当前屏幕以不同的文件格式来保存，在本文中介绍的程序是以&quot;jpg&quot;文件来保存的，你可以通过修改&quot;Save&quot;方法的第二个参数来改变保存到硬盘的文件类型，譬如，如果第二个参数为&quot;ImageFormat.Gif&quot;，那么你保存到硬盘的文件就为&quot;GIF&quot;文件了。对于其他文件格式可以参考.Net FrameWork SDK，里面有详细的介绍。</p><h2 id="三-用c-做screen-capture程序的代码和运行节目" tabindex="-1"><a class="header-anchor" href="#三-用c-做screen-capture程序的代码和运行节目" aria-hidden="true">#</a> 三． 用C＃做Screen Capture程序的代码和运行节目</h2><p>在掌握了上面这些重要步骤后，可以得到用C＃做Screen Capture程序的源代码（Capture.cs），具体如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Imaging</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span>

<span class="token comment">//导入在程序中使用到的名称空间</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Capture</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">System<span class="token punctuation">.</span>ComponentModel<span class="token punctuation">.</span>Container</span> components <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Icon</span> mNetTrayIcon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Icon</span><span class="token punctuation">(</span><span class="token string">&quot;Tray.ico&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Bitmap</span> MyImage <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">NotifyIcon</span> TrayIcon<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ContextMenu</span> notifyiconMnu<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//初始化窗体中使用到的组件</span>
        <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActivated</span><span class="token punctuation">(</span><span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices<span class="token punctuation">.</span>DllImportAttribute</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;gdi32.dll&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">BitBlt</span><span class="token punctuation">(</span>
        <span class="token class-name">IntPtr</span> hdcDest<span class="token punctuation">,</span> <span class="token comment">// 目标设备的句柄</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nXDest<span class="token punctuation">,</span>     <span class="token comment">// 目标对象的左上角的X坐标</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nYDest<span class="token punctuation">,</span>     <span class="token comment">// 目标对象的左上角的X坐标</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nWidth<span class="token punctuation">,</span>     <span class="token comment">// 目标对象的矩形的宽度</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nHeight<span class="token punctuation">,</span>    <span class="token comment">// 目标对象的矩形的长度</span>
        <span class="token class-name">IntPtr</span> hdcSrc<span class="token punctuation">,</span>  <span class="token comment">// 源设备的句柄</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nXSrc<span class="token punctuation">,</span>      <span class="token comment">// 源对象的左上角的X坐标</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nYSrc<span class="token punctuation">,</span>      <span class="token comment">// 源对象的左上角的X坐标</span>
        System<span class="token punctuation">.</span>Int32 dwRop <span class="token comment">// 光栅的操作值</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices<span class="token punctuation">.</span>DllImportAttribute</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;gdi32.dll&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">CreateDC</span><span class="token punctuation">(</span>
        <span class="token class-name"><span class="token keyword">string</span></span> lpszDriver<span class="token punctuation">,</span> <span class="token comment">// 驱动名称</span>
        <span class="token class-name"><span class="token keyword">string</span></span> lpszDevice<span class="token punctuation">,</span> <span class="token comment">// 设备名称</span>
        <span class="token class-name"><span class="token keyword">string</span></span> lpszOutput<span class="token punctuation">,</span> <span class="token comment">// 无用，可以设定位&quot;NULL&quot;</span>
        IntPtr lpInitData <span class="token comment">// 任意的打印机数据</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">capture</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">IntPtr</span> dc1 <span class="token operator">=</span> <span class="token function">CreateDC</span><span class="token punctuation">(</span><span class="token string">&quot;DISPLAY&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建显示器的DC</span>
        <span class="token class-name">Graphics</span> g1 <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromHdc</span><span class="token punctuation">(</span>dc1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//由一个指定设备的句柄创建一个新的Graphics对象</span>
        MyImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span>Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> g1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据屏幕大小创建一个与之相同大小的Bitmap对象</span>
        <span class="token class-name">Graphics</span> g2 <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>MyImage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获得屏幕的句柄</span>
        <span class="token class-name">IntPtr</span> dc3 <span class="token operator">=</span> g1<span class="token punctuation">.</span><span class="token function">GetHdc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获得位图的句柄</span>
        <span class="token class-name">IntPtr</span> dc2 <span class="token operator">=</span> g2<span class="token punctuation">.</span><span class="token function">GetHdc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//把当前屏幕捕获到位图对象中</span>
        <span class="token function">BitBlt</span><span class="token punctuation">(</span>dc2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> dc3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13369376</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//把当前屏幕拷贝到位图中</span>
        g1<span class="token punctuation">.</span><span class="token function">ReleaseHdc</span><span class="token punctuation">(</span>dc3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//释放屏幕句柄</span>
        g2<span class="token punctuation">.</span><span class="token function">ReleaseHdc</span><span class="token punctuation">(</span>dc2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//释放位图句柄</span>
        MyImage<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token string">&quot;c:\\\\MyJpeg.jpg&quot;</span><span class="token punctuation">,</span> ImageFormat<span class="token punctuation">.</span>Jpeg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;已经把当前屏幕保存到C:\\\\MyJpeg.jpg文件中！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ExitSelect</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//隐藏托盘程序中的图标</span>
        TrayIcon<span class="token punctuation">.</span>Visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">//关闭系统</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//清除程序中使用过的资源</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>components <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            components<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//设定托盘程序的各个属性</span>
        TrayIcon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotifyIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TrayIcon<span class="token punctuation">.</span>Icon <span class="token operator">=</span> mNetTrayIcon<span class="token punctuation">;</span>
        TrayIcon<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;用C#做Screen Capture程序&quot;</span><span class="token punctuation">;</span>
        TrayIcon<span class="token punctuation">.</span>Visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">//定义一个MenuItem数组，并把此数组同时赋值给ContextMenu对象</span>
        <span class="token class-name">MenuItem<span class="token punctuation">[</span><span class="token punctuation">]</span></span> mnuItms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        mnuItms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mnuItms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;捕获当前屏幕！&quot;</span><span class="token punctuation">;</span>
        mnuItms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>capture<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mnuItms<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mnuItms<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mnuItms<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;退出系统&quot;</span><span class="token punctuation">;</span>
        mnuItms<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ExitSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mnuItms<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>DefaultItem <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        notifyiconMnu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ContextMenu</span><span class="token punctuation">(</span>mnuItms<span class="token punctuation">)</span><span class="token punctuation">;</span>
        TrayIcon<span class="token punctuation">.</span>ContextMenu <span class="token operator">=</span> notifyiconMnu<span class="token punctuation">;</span>
        <span class="token comment">//为托盘程序加入设定好的ContextMenu对象</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SuspendLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>AutoScaleBaseSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ClientSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ControlBox <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>MaximizeBox <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>MinimizeBox <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>WindowState <span class="token operator">=</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>FormWindowState<span class="token punctuation">.</span>Minimized<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;capture&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ShowInTaskbar <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;用C#做Screen Capture程序！&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ResumeLayout</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>下图是此代码编译后的运行界面：</p><p>图01：用C＃做Screen Capture程序的源代码</p><h2 id="四-总结" tabindex="-1"><a class="header-anchor" href="#四-总结" aria-hidden="true">#</a> 四． 总结</h2><p>虽然.Net FrameWork SDK的内容十分丰富，借助他所能够实现的功能也非常强大，但对于一些底层的操作，有时还是需要借助Windows的API函数才可以实现，而实现Screen Capture的关键也就在于掌握C＃中调用API函数的方法。希望通过本文，能够对你掌握在C＃中的API编程有所帮助。</p>`,32),c=[o];function e(u,l){return s(),a("div",null,c)}const i=n(p,[["render",e],["__file","pic_img8.html.vue"]]);export{i as default};
