import{_ as n,o as s,c as a,a as t}from"./app-a2b6e588.js";const p="/steven-blogs/assets/sysinfo20_1-9e997af4.png",o="/steven-blogs/assets/sysinfo20_2-dbd7b7d4.png",e={},c=t(`<h1 id="运用api函数获取系统信息" tabindex="-1"><a class="header-anchor" href="#运用api函数获取系统信息" aria-hidden="true">#</a> 运用API函数获取系统信息</h1><p>API函数是构筑Windows应用程序的基石，是Windows编程的必备利器。每一种Windows应用程序开发工具都提供了间接或直接调用了Windows API函数的方法，或者是调用Windows API函数的接口，也就是说具备调用动态连接库的能力。Visual C#和其它开发工具一样也能够调用动态链接库的API函数。本文中笔者就结合实例向大家介绍在Visual C#中如何调用各种返回值的API，该实例就是一个通过API函数调用获取系统信息的程序。</p><h2 id="在visual-c-中调用api的基本过程" tabindex="-1"><a class="header-anchor" href="#在visual-c-中调用api的基本过程" aria-hidden="true">#</a> 在Visual C#中调用API的基本过程</h2><p>首先，在调用API之前，你必须先导入System.Runtime.InteropServices这个名称空间。该名称空间包含了在Visual C#中调用API的一些必要集合，具体的方法如下：</p><p><code>using System.Runtime.InteropServices;</code></p><p>在导入了名称空间后，我们要声明在程序中所要用到的API函数。我们的程序主要是获取系统的相关信息，所以用到的API函数都是返回系统信息的。先给出在Visual C#中声明API的方法：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetWindowsDirectory</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> WinDir<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>其中，&quot;DllImport&quot;属性用来从不可控代码中调用一个方法，它指定了DLL的位置，该DLL中包含调用的外部方法；&quot;kernel32&quot;设定了类库名；&quot;public&quot;指明函数的访问类型为公有的；&quot;static&quot;修饰符声明一个静态元素，而该元素属于类型本身而不是指定的对象；&quot;extern&quot;表示该方法将在工程外部执行，同时使用DllImport导入的方法必须使用&quot;extern&quot;修饰符；最后GetWindowsDirectory函数包含了两个参数，一个为StringBuilder类型的，另一个为int类型的，该方法返回的内容存在于StringBuilder类型的参数中。同时，因为我们在这里使用到了StringBuilder类，所以在程序的开始处，我们还得添加System.Text这个名称空间，方法同上。</p><p>其他几个API函数的声明如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> SysDir<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetSystemInfo</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">CPU_INFO</span> cpuinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GlobalMemoryStatus</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">MEMORY_INFO</span> meminfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetSystemTime</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">SYSTEMTIME_INFO</span> stinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>以上几个API的作用分别是获取系统路径，获得CPU相关信息，获得内存的相关信息，获得系统时间等。</p><p>在声明完所有的API函数后，我们发现后三个函数分别用到了CPU_INFO、MEMORY_INFO、SYSTEMTIME_INFO等结构，这些结构并非是.Net内部的，它们从何而来？其实，我们在用到以上API调用时均需用到以上结构，我们将函数调用获得的信息存放在以上的结构体中，最后返回给程序输出。这些结构体比较复杂，但是如果开发者能够熟练运用，那么整个API世界将尽在开发者的掌握之中。以下就是上述结构体的声明：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//定义以下各结构</span>
<span class="token comment">//定义CPU的信息结构</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StructLayout</span><span class="token attribute-arguments"><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">CPU_INFO</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwOemId<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwPageSize<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> lpMinimumApplicationAddress<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> lpMaximumApplicationAddress<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwActiveProcessorMask<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwNumberOfProcessors<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwProcessorType<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwAllocationGranularity<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwProcessorLevel<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwProcessorRevision<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//定义内存的信息结构</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StructLayout</span><span class="token attribute-arguments"><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">MEMORY_INFO</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwLength<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwMemoryLoad<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwTotalPhys<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwAvailPhys<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwTotalPageFile<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwAvailPageFile<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwTotalVirtual<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwAvailVirtual<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//定义系统时间的信息结构</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StructLayout</span><span class="token attribute-arguments"><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">SYSTEMTIME_INFO</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wYear<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wMonth<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wDayOfWeek<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wDay<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wHour<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wMinute<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wSecond<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">ushort</span></span> wMilliseconds<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>结构体定义的主体部分和C++中的没多大差别，具体每个结构体内部成员的定义可参考联机帮助中的SDK文档。同时，我们还发现在每个结构体定义的上面都有一句用中括号括起来的说明性文字。这些说明都是有关结构体成员的布局的，共有三种选项，分别说明如下：</p><p><code>LayoutKind.Automatic</code>：为了提高效率允许运行态对类型成员重新排序。</p><p>注意：永远不要使用这个选项来调用不受管辖的动态链接库函数。</p><p><code>LayoutKind.Explicit</code>：对每个域按照FieldOffset属性对类型成员排序<br><code>LayoutKind.Sequential</code>：对出现在受管辖类型定义地方的不受管辖内存中的类型成员进行排序。</p><p>在上面的程序中，为了方便起见我们都用到了第三种方式所有的API函数以及相关的结构体声明完毕后，我们就运用这些API来实现我们的程序功能――获取系统的相关信息。</p><p>界面可按如下方式布置，不过有兴趣的读者自然可以发挥自己的想象，将界面布局做得更好。</p><p><img src="`+p+`" alt="img_1"></p><p>简单的界面布置好后，我们添加一个按钮（&quot;获取信息&quot;按钮）的消息处理函数如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetInfo_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//调用GetWindowsDirectory和GetSystemDirectory函数分别取得Windows路径和系统路径</span>
    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> nChars <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> Buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span>nChars<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetWindowsDirectory</span><span class="token punctuation">(</span>Buff<span class="token punctuation">,</span> nChars<span class="token punctuation">)</span><span class="token punctuation">;</span>
    WindowsDirectory<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;Windows路径：&quot;</span> <span class="token operator">+</span> Buff<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetSystemDirectory</span><span class="token punctuation">(</span>Buff<span class="token punctuation">,</span> nChars<span class="token punctuation">)</span><span class="token punctuation">;</span>
    SystemDirectory<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;系统路径：&quot;</span> <span class="token operator">+</span> Buff<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//调用GetSystemInfo函数获取CPU的相关信息</span>
    <span class="token class-name">CPU_INFO</span> CpuInfo<span class="token punctuation">;</span>
    CpuInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CPU_INFO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetSystemInfo</span><span class="token punctuation">(</span><span class="token keyword">ref</span> CpuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    NumberOfProcessors<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;本计算机中有&quot;</span> <span class="token operator">+</span> CpuInfo<span class="token punctuation">.</span>dwNumberOfProcessors<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;个CPU&quot;</span><span class="token punctuation">;</span>
    ProcessorType<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;CPU的类型为&quot;</span> <span class="token operator">+</span> CpuInfo<span class="token punctuation">.</span>dwProcessorType<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ProcessorLevel<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;CPU等级为&quot;</span> <span class="token operator">+</span> CpuInfo<span class="token punctuation">.</span>dwProcessorLevel<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    OemId<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;CPU的OEM ID为&quot;</span> <span class="token operator">+</span> CpuInfo<span class="token punctuation">.</span>dwOemId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PageSize<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;CPU中的页面大小为&quot;</span> <span class="token operator">+</span> CpuInfo<span class="token punctuation">.</span>dwPageSize<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//调用GlobalMemoryStatus函数获取内存的相关信息</span>
    <span class="token class-name">MEMORY_INFO</span> MemInfo<span class="token punctuation">;</span>
    MemInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MEMORY_INFO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GlobalMemoryStatus</span><span class="token punctuation">(</span><span class="token keyword">ref</span> MemInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    MemoryLoad<span class="token punctuation">.</span>Text <span class="token operator">=</span> MemInfo<span class="token punctuation">.</span>dwMemoryLoad<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;%的内存正在使用&quot;</span><span class="token punctuation">;</span>
    TotalPhys<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;物理内存共有&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwTotalPhys<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>
    AvailPhys<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;可使用的物理内存有&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwAvailPhys<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>
    TotalPageFile<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;交换文件总大小为&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwTotalPageFile<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>
    AvailPageFile<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;尚可交换文件大小为&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwAvailPageFile<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>
    TotalVirtual<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;总虚拟内存有&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwTotalVirtual<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>
    AvailVirtual<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;未用虚拟内存有&quot;</span> <span class="token operator">+</span> MemInfo<span class="token punctuation">.</span>dwAvailVirtual<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//调用GetSystemTime函数获取系统时间信息</span>
    <span class="token class-name">SYSTEMTIME_INFO</span> StInfo<span class="token punctuation">;</span>
    StInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SYSTEMTIME_INFO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetSystemTime</span><span class="token punctuation">(</span><span class="token keyword">ref</span> StInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Date<span class="token punctuation">.</span>Text <span class="token operator">=</span> StInfo<span class="token punctuation">.</span>wYear<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;年&quot;</span> <span class="token operator">+</span> StInfo<span class="token punctuation">.</span>wMonth<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;月&quot;</span> <span class="token operator">+</span> StInfo<span class="token punctuation">.</span>wDay<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;日&quot;</span><span class="token punctuation">;</span>
    Time<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token punctuation">(</span>StInfo<span class="token punctuation">.</span>wHour <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;点&quot;</span> <span class="token operator">+</span> StInfo<span class="token punctuation">.</span>wMinute<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;分&quot;</span> <span class="token operator">+</span> StInfo<span class="token punctuation">.</span>wSecond<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;秒&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在上面的消息处理函数中，我们运用了在程序开始处声明的各个API函数获取了系统的相关信息，并最终在界面上以文本标签的方式显示结果。各个文本标签的命名方式可以参见文后附带的源代码，此处暂略。</p><p>最后，运行程序如下：</p><p><img src="`+o+'" alt="img_2"></p><h2 id="结束语" tabindex="-1"><a class="header-anchor" href="#结束语" aria-hidden="true">#</a> 结束语</h2><p>通过本文的学习，我相信稍有API使用基础的开发者可以马上触类旁通，很快掌握Visual C#中对API的操作。上面给出的实例仅仅是一个非常简单的示例程序，不过有兴趣的读者可以进一步完善其功能，做出更完美的系统信息检测程序。</p>',27),u=[c];function l(k,i){return s(),a("div",null,u)}const d=n(e,[["render",l],["__file","sysinfo20.html.vue"]]);export{d as default};
