import{_ as n,o as s,c as a,a as t}from"./app-f0851ed3.js";const p="/steven-blogs/assets/sysmsg3_1-e10fd810.png",o="/steven-blogs/assets/sysmsg3_2-daaac059.png",e={},c=t(`<h1 id="c-处理鼠标和键盘事件" tabindex="-1"><a class="header-anchor" href="#c-处理鼠标和键盘事件" aria-hidden="true">#</a> C#处理鼠标和键盘事件</h1><blockquote><p>2002-03-28· ·马金虎··yesky</p></blockquote><p>在程序运行中，产生事件的主体有很多，其中尤其以键盘和鼠标为最多。本文就来探讨一下在C＃中和这二个主体相关的事件的处理过程。</p><h2 id="一-本文介绍的程序设计和运行的软件环境" tabindex="-1"><a class="header-anchor" href="#一-本文介绍的程序设计和运行的软件环境" aria-hidden="true">#</a> 一．本文介绍的程序设计和运行的软件环境</h2><p>（1）.微软公司视窗2000服务器版<br> （2）..Net FrameWork SDK Beta 2</p><h2 id="二-c-中处理鼠标相关的事件" tabindex="-1"><a class="header-anchor" href="#二-c-中处理鼠标相关的事件" aria-hidden="true">#</a> 二．C＃中处理鼠标相关的事件</h2><p>鼠标相关的事件大致有六种，分别是 ：</p><p>&quot;MouseHover&quot;、&quot;MouseLeave&quot;、&quot;MouseEnter&quot;、&quot;MouseMove&quot;、&quot;MouseDown&quot;和&quot;MouseUp&quot;。</p><p>（1）.如何在C＃程序中定义这些事件：</p><p>在C＃中是通过不同的Delegate来描述上述事件，其中描述&quot;MouseHover&quot;、&quot;MouseLeave&quot;、&quot;MouseEnter&quot;事件的Delegate是&quot;EventHandler&quot;，而描述后面的三个事件的Delegate是&quot;MouseEventHandler&quot;来描述。这二个Delegate分别被封装在不同的命名空间，其中&quot;EventHandler&quot;被封装在&quot;System&quot;命名空间；&quot;MouseEventHandler&quot;被封装在&quot;Syetem.Windows.Froms&quot;命名空间中的。在为&quot;MouseHover&quot;、&quot;MouseLeave&quot;、&quot;MouseEnter&quot;事件通过数据的类是&quot;EventArgs&quot;，他也被封装在&quot;System&quot;命名空间中；而为后面的三个事件提供数据的类是&quot;MouseEventArgs&quot;，他却被封装在&quot;Syetem.Windows.Froms&quot;命名空间。以上这些就决定了在C＃中定义这些事件和响应这些事件有着不同的处理办法。下面就来介绍这些不同点。</p><p>对于上述的前三个事件，是用以下语法来定义的：</p><p><code>&quot;组件名称&quot;.&quot;事件名称&quot;+= new System.EventHandler(&quot;事件名称&quot;);</code></p><p>下面是程序中具体实现代码：</p><p><code>button1.MouseLeave += new Syetem.EvenHandler(button1_MLeave);</code></p><p>在完成了事件的定义以后，就要在程序中加入响应此事件的代码，否则程序编译的时候会报错。下面是响应上面事件的基本结构。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> button1_MLeave <span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">object</span></span> sender <span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    此处加入响应此事件的代码
<span class="token punctuation">}</span>
</code></pre></div><p>定义&quot;MouseMove&quot;、&quot;MouseDown&quot;和&quot;MouseUp&quot;事件的语法和前面介绍的三个事件大致相同，具体如下：</p><p><code>&quot;组件名称&quot;.&quot;事件名称&quot;+= new System.Windows.Forms.MouseEventHandler(&quot;事件名称&quot;);</code></p><p>下面是程序中具体实现代码：</p><p><code>button1.MouseMove += new System.Windows.Forms.MouseEventHandler(button1_MMove);</code></p><p>下面是响应上面事件的基本结构：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> button1_MMove <span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">object</span></span> sender <span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MouseEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    此处加入响应此事件的代码
<span class="token punctuation">}</span>
</code></pre></div><p>注释：在上述程序中的&quot;button1&quot;是定义的一个按钮组件。</p><p>（2）.鼠标相关事件中的典型问题处理办法：</p><p>在掌握了C＃中定义和鼠标相关的事件，我们就来探讨一下和鼠标相关事件的典型问题。其一是读取鼠标的当前位置；其二是判定到底是那个鼠标按键按动。</p><p>判定鼠标的位置可以通过事件&quot;MouseMove&quot;来处理，在&quot;MouseEventArgs&quot;类中提供了二个属性&quot;X&quot;和&quot;Y&quot;，来判定当前鼠标纵坐标和横坐标。而判定鼠标按键的按动情况，可以通过事件&quot;MouseDown&quot;来处理，并且在&quot;MouseEventArgs&quot;类中也提供了一个属性&quot;Button&quot;来判定鼠标按键情况。根据这些知识，可以得到用C＃编写的读取鼠标当前位置和判定鼠标按键情况的程序代码。下面就是此代码（mouse.cs）和此代码编译后运行界面：</p><p><img src="`+p+`" alt="img"><br> 图01：用C＃读取鼠标位置和鼠标按键的程序运行界面</p><p><strong>mouse.cs的源程序代码如下</strong>：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">System<span class="token punctuation">.</span>ComponentModel<span class="token punctuation">.</span>Container</span> components <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>初始化窗体中的各个组件
        <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>清除程序中使用过的资源
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> disposing<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>disposing<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>components <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                components<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span>disposing<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>AutoScaleBaseSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ClientSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">292</span><span class="token punctuation">,</span> <span class="token number">273</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Form1&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;C＃处理鼠标按动事件！&quot;</span><span class="token punctuation">;</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>为鼠标按动定义一个事件处理过程<span class="token string">&quot;Form1_MouseDown&quot;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>MouseDown <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MouseEventHandler</span><span class="token punctuation">(</span>Form1_MouseDown<span class="token punctuation">)</span><span class="token punctuation">;</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>为鼠标移动定义一个事件处理过程<span class="token string">&quot;Form1_MouseMove&quot;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>MouseMove <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MouseEventHandler</span><span class="token punctuation">(</span>Form1_OnMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_OnMouseMove</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">MouseEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;当前鼠标的位置为：( &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>X <span class="token operator">+</span> <span class="token string">&quot; , &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>Y <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_MouseDown</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">MouseEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>响应鼠标的不同按键
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Button <span class="token operator">==</span> MouseButtons<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;按动鼠标左键！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Button <span class="token operator">==</span> MouseButtons<span class="token punctuation">.</span>Middle<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;按动鼠标中键！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Button <span class="token operator">==</span> MouseButtons<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;按动鼠标右键！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="三-c-中处理和键盘相关的事件" tabindex="-1"><a class="header-anchor" href="#三-c-中处理和键盘相关的事件" aria-hidden="true">#</a> 三．C＃中处理和键盘相关的事件</h2><p>在C＃中和键盘相关的事件相对比较少，大致就三种：&quot;KeyDown&quot;、&quot;KeyUp&quot;和&quot;KeyPress&quot;。</p><p>（1）.如何在C＃程序中定义这些事件： 　 C＃中描述&quot;KeyDown&quot;、&quot;KeyUp&quot;的事件的Delegate是&quot;KeyEventHandler&quot;。而描述&quot;KeyPress&quot;所用的Delegate是&quot;KeyPressEventHandler&quot;。这二个Delegate都被封装在命名空间&quot;Syetem.Windows.Froms&quot;中。为&quot;KeyDown&quot;、&quot;KeyUp&quot;的事件提供数据的类是&quot;KeyEventArgs&quot;。而为&quot;KeyPress&quot;事件提供数据的类是&quot;KeyPressEventArgs&quot;。同样这二者也被封装在命名空间&quot;Syetem.Windows.Froms&quot;中。</p><p>在C＃程序定义&quot;KeyDown&quot;、&quot;KeyUp&quot;事件的语法如下：</p><p><code>&quot;组件名称&quot;.&quot;事件名称&quot;+= new Syetem.Windows.Froms.KeyEventHandler(&quot;事件名称&quot;);</code></p><p>下面是程序中具体实现代码：</p><p><code>button1.KeyUp += new Syetem.Windows.Froms.KeyEventHandler(button1_KUp);</code></p><p>下面是响应上面事件的基本结构。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_KUp</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">Syetem<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Froms<span class="token punctuation">.</span>KeyEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    此处加入响应此事件的代码
<span class="token punctuation">}</span>
</code></pre></div><p>在C＃程序定义&quot;KeyPress&quot;事件的语法如下：</p><p><code>&quot;组件名称&quot;.&quot;事件名称&quot;+= new Syetem.Windows.Froms.KeyPressEventHandler(&quot;事件名称&quot;);</code></p><p>下面是程序中具体实现代码：</p><p><code>button1.KeyPress += new Syetem.Windows.Froms.KeyPressEventArgs(button1_KPress);</code></p><p>在完成了事件的定义以后，就要在程序中加入响应此事件的代码，否则程序编译的时候会报错。下面是响应上面事件的基本结构。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_KPress</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender <span class="token punctuation">,</span> <span class="token class-name">Syetem<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Froms<span class="token punctuation">.</span>KeyPressEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    此处加入响应此事件的代码
<span class="token punctuation">}</span>
</code></pre></div><p>注释：程序中出现的&quot;button1&quot;是定义的一个按钮组件。</p><p>（2）.和键盘相关事件中的典型问题处理办法：</p><p>和键盘相关的典型问题无非就是判定到底是哪个按键被按动。通过上面的三个事件都可以完成。并且在&quot;KeyEventArgs&quot;类中通过了一个属性&quot;KeyCode&quot;，可以用他来读取当前按键。所以就在&quot;KeyUp&quot;或者&quot;KeyDown&quot;事件中处理这个问题。根据上面这些知识，可以得到用C＃编写读取读取按键的程序代码，下面就是此代码（key.cs）和此代码运行后的界面：</p><p><img src="`+o+`" alt="img_2"><br> 图02：用C＃读取键盘按键的程序运行界面</p><p>key.cs的代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">System<span class="token punctuation">.</span>ComponentModel<span class="token punctuation">.</span>Container</span> components <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>初始化窗体中的各个组件
        <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> disposing<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>清除程序中使用过的资源
        <span class="token keyword">if</span> <span class="token punctuation">(</span>disposing<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>components <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                components<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span>disposing<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>AutoScaleBaseSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ClientSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">292</span><span class="token punctuation">,</span> <span class="token number">273</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Form1&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;C＃处理键盘事件！&quot;</span><span class="token punctuation">;</span>
    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>为按键的按动定义一个事件处理过程<span class="token string">&quot;Form1_KeyUp&quot;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>KeyUp <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyEventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Form1_KeyUp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>显示你所按动的按键名称
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_KeyUp</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>KeyCode<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;您所按动的健为：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="四-总结" tabindex="-1"><a class="header-anchor" href="#四-总结" aria-hidden="true">#</a> 四．总结</h2><p>本文介绍了在C＃中如何定义和鼠标和键盘相关的事件和在这些事件中一些典型问题的处理办法。虽然这些知识最为基本，但也最为重要，因为在程序设计中，这些问题和我们打交道的机会最多。当然和鼠标和键盘相关的事件和问题还有许多，可以参照根据上面的解决办法加以解决。</p>`,52),u=[c];function l(k,i){return s(),a("div",null,u)}const d=n(e,[["render",l],["__file","sysmsg3.html.vue"]]);export{d as default};
