import{_ as n,o as s,c as a,a as t}from"./app-d9da1b6d.js";const p={},o=t(`<h1 id="socket文件传输总结" tabindex="-1"><a class="header-anchor" href="#socket文件传输总结" aria-hidden="true">#</a> Socket文件传输总结</h1><h2 id="客户端发送" tabindex="-1"><a class="header-anchor" href="#客户端发送" aria-hidden="true">#</a> 客户端发送</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Sockets</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token class-name">FileStream</span> SentFile<span class="token punctuation">;</span>
<span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>
<span class="token class-name">Thread</span> mythread<span class="token punctuation">;</span>

<span class="token comment">//选择文件</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>openFileDialog1<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
        txtFileName<span class="token punctuation">.</span>Text <span class="token operator">=</span> openFileDialog1<span class="token punctuation">.</span>FileName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//发送文件大小信息</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button2_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> ip <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>txtRemoIP<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> port <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>txtRemoport<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>

    <span class="token class-name">IPAddress</span> serverIp <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> serverPort <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IPEndPoint</span> iep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>serverIp<span class="token punctuation">,</span> serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IPHostEntry</span> host <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">GetHostByAddress</span><span class="token punctuation">(</span>iep<span class="token punctuation">.</span>Address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> HostName <span class="token operator">=</span> host<span class="token punctuation">.</span>HostName<span class="token punctuation">;</span>

    socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    socket<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>iep<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">string</span></span> filename <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>txtFileName<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>
    SentFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> nPos <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        filename <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span>nPos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找不含路径的文件名</span>
    <span class="token class-name"><span class="token keyword">string</span></span> fileinfo <span class="token operator">=</span> <span class="token string">&quot;\\x01\\x53&quot;</span> <span class="token operator">+</span> SentFile<span class="token punctuation">.</span>Length<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\x03&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> byteData <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>fileinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Send</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> byteData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//发送文件数据 </span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button4_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> ip <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>txtRemoIP<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> port <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>txtRemoport<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>

    <span class="token class-name">IPAddress</span> serverIp <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> serverPort <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IPEndPoint</span> iep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>serverIp<span class="token punctuation">,</span> serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IPHostEntry</span> host <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">GetHostByAddress</span><span class="token punctuation">(</span>iep<span class="token punctuation">.</span>Address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> HostName <span class="token operator">=</span> host<span class="token punctuation">.</span>HostName<span class="token punctuation">;</span>

    socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    socket<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>iep<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>label3<span class="token punctuation">.</span>Text <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">long</span></span> filesize <span class="token operator">=</span> SentFile<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>filesize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> len <span class="token operator">=</span> SentFile<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Send</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//异步发送</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> handler<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> byteData<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// byte[] byteData = Encoding.ASCII.GetBytes(data);             </span>
    handler<span class="token punctuation">.</span><span class="token function">BeginSend</span><span class="token punctuation">(</span>byteData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> byteData<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
         <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span>SendCallback<span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendCallback</span><span class="token punctuation">(</span><span class="token class-name">IAsyncResult</span> ar<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Socket</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>ar<span class="token punctuation">.</span>AsyncState<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> bytesSent <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">EndSend</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        handler<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span>SocketShutdown<span class="token punctuation">.</span>Both<span class="token punctuation">)</span><span class="token punctuation">;</span>
        handler<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="服务端接收" tabindex="-1"><a class="header-anchor" href="#服务端接收" aria-hidden="true">#</a> 服务端接收</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ManualResetEvent</span> allDone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManualResetEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">Thread</span> th<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> listenerRun <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token class-name">Socket</span> listener<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> MAX_SOCKET <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">long</span></span> filesize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> filerby <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">FileStream</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span><span class="token string">&quot;data.txt&quot;</span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IPAddress</span> <span class="token function">GetServerIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">IPHostEntry</span> ieh <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">GetHostByName</span><span class="token punctuation">(</span>Dns<span class="token punctuation">.</span><span class="token function">GetHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ieh<span class="token punctuation">.</span>AddressList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//侦听方法</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nPort <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>txtLocalPort<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IPAddress</span> ServerIp <span class="token operator">=</span> <span class="token function">GetServerIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IPEndPoint</span> iep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>ServerIp<span class="token punctuation">,</span> nPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
        listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        listener<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>iep<span class="token punctuation">)</span><span class="token punctuation">;</span>
        listener<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>listenerRun<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            allDone<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            listener<span class="token punctuation">.</span><span class="token function">BeginAccept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span>AcceptCallback<span class="token punctuation">)</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
            allDone<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>SecurityException</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;防火墙安全错误！&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;错误&quot;</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Exclamation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AcceptCallback</span><span class="token punctuation">(</span><span class="token class-name">IAsyncResult</span> ar<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Socket</span> listener <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>ar<span class="token punctuation">.</span>AsyncState<span class="token punctuation">;</span>
    <span class="token class-name">Socket</span> client <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">EndAccept</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    allDone<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StateObject</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    state<span class="token punctuation">.</span>workSocket <span class="token operator">=</span> client<span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>statusBar1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;已经连接！&quot;</span><span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">BeginReceive</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> StateObject<span class="token punctuation">.</span>BufferSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
         <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span>readCallback<span class="token punctuation">)</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">readCallback</span><span class="token punctuation">(</span><span class="token class-name">IAsyncResult</span> ar<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">StateObject</span> state <span class="token operator">=</span> <span class="token punctuation">(</span>StateObject<span class="token punctuation">)</span>ar<span class="token punctuation">.</span>AsyncState<span class="token punctuation">;</span>
    <span class="token class-name">Socket</span> handler <span class="token operator">=</span> state<span class="token punctuation">.</span>workSocket<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> bytesRead <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">EndReceive</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytesRead <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> strmsg <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>strmsg<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;\\x01\\x53&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//文件大小信息</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">int</span></span> s <span class="token operator">=</span> strmsg<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;\\x01\\x53&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">int</span></span> e <span class="token operator">=</span> strmsg<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;\\x03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> strsize <span class="token operator">=</span> strmsg<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> e <span class="token operator">-</span> s <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            filesize <span class="token operator">=</span> <span class="token keyword">long</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>strsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;该文件大小:&quot;</span> <span class="token operator">+</span> strsize<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token comment">//文件数据</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;正在接收文件....&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>filerby <span class="token operator">+</span> bytesRead<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> filesize<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//接收到完整的信息     </span>
                fs<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
                fs<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                fs<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;接收完毕!&quot;</span> <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                fs<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
                filerby <span class="token operator">+=</span> bytesRead<span class="token punctuation">;</span>
                handler<span class="token punctuation">.</span><span class="token function">BeginReceive</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> StateObject<span class="token punctuation">.</span>BufferSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                     <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncCallback</span><span class="token punctuation">(</span>readCallback<span class="token punctuation">)</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btnListen_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    th <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>Listen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以Listen过程来初始化线程实例       </span>
    th<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启动此线程 </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>btnListen<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//异步传递的状态对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateObject</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Socket</span> workSocket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> BufferSize <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>BufferSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,5),e=[o];function c(u,l){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","netsoc12.html.vue"]]);export{i as default};
