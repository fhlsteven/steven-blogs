import{_ as n,o as s,c as a,a as p}from"./app-d9da1b6d.js";const t={},o=p(`<h1 id="浅析c-中图形编程" tabindex="-1"><a class="header-anchor" href="#浅析c-中图形编程" aria-hidden="true">#</a> 浅析C#中图形编程</h1><h2 id="浅析c-中图形编程-一" tabindex="-1"><a class="header-anchor" href="#浅析c-中图形编程-一" aria-hidden="true">#</a> 浅析C#中图形编程（一）</h2><p>像Java一样，C＃提供了一整套相当丰富的类库、方法以及事件以供开发者使用。C＃还引入了GDI+，它是由GDI演变而来的，具有比GDI更强大的功能而且简化了程序员的编程工作。所以开发者运用这些，就可以很方便的开发出具有强大图形图像功能的应用程序了。本文，笔者就通过一些实例像读者介绍一下C＃中的图形编程的基本知识。</p><p>简单实例：</p><p>首先，让我们从例子开始，以下是一个最简单的实例：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Form</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Paint <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PaintEventHandler</span><span class="token punctuation">(</span>f1_paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">f1_paint</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span><span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span><span class="token string">&quot;你好，C#！&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Font</span><span class="token punctuation">(</span><span class="token string">&quot;Verdana&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolidBrush</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Tomato<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">DrawRectangle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pen</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Pink<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre></div><p>在上面的实例中，我们用到了一个方法：DrawString()，它带有5个参数。同时，我们发现在运用DrawString()方法以前，我们先创建了一个Graphics类型的对象g=e.Graphics，这就说明了在运用任何图形类的方法以前我们必须先创建该类的一个实例化对象。在DrawString()方法后，我们用到了DrawRectangle()方法，其实我们还可以运用其他的方法来画椭圆或是多边形等等。第一个实例还是相当简单易懂的，不是吗？</p><p>变换图形的度量单位：</p><p>在图形编程中，默认的图形度量单位是象素。不过，你可以通过修改PageUnit属性来修改图形的度量单位，可以是英寸或是毫米等。实现方法如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Graphics</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span>
g<span class="token punctuation">.</span>PageUnit <span class="token operator">=</span> GraphicsUnit<span class="token punctuation">.</span>Inch  
</code></pre></div><p>操作颜色选择对话框：</p><p>在实际运用特别是图形图像编程过程中，我们可能会经常碰到颜色选择对话框（以及下面要提到的字体选择对话框）。使用颜色选择对话框，我们可以让用户来选择系统预定的颜色以及用户自定义的颜色。在使用颜色选择对话框之前，我们必须先创建一个ColorDialog类型的对象：</p><p><code>ColorDialog cd = new ColorDialog();</code></p><p>然后，我们就可以用<code>ShowDialog()</code>方法来显示颜色选择对话框了。之后，就可以通过调用用户的颜色选择进行相关的图形操作了。</p><p>以下，我给大家一个实例。该实例中有一个按钮和一个文本框，通过点击按钮可以调出颜色选择对话框，根据用户的颜色选择就可以设置文本框的背景颜色了。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Clr</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token class-name">Button</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TextBox</span> tb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ColorDialog</span> clg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ColorDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        b1<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>b1_click<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;选择颜色&quot;</span><span class="token punctuation">;</span>
        tb<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">b1_click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        clg<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tb<span class="token punctuation">.</span>BackColor <span class="token operator">=</span> clg<span class="token punctuation">.</span>Color<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>操作字体选择对话框：</p><p>字体是图形编程的一个重要组成部分，通过设置不同的字体，你可以在程序中达到不同的视觉效果。和以上的颜色选择对话框的创建差不多，你可以很方便地创建一个字体选择对话框，并通过它来让用户选择其所需的字体。</p><p>下面同样给出一个实例，这个实例和上面的实例差不多，只是用来字体选择对话框代替了原来的颜色选择对话框，最后是根据用户的字体选择来设置文本框的字体。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fonts</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token class-name">Button</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TextBox</span> tb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FontDialog</span> flg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FontDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Fonts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        b1<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>b1_click<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;选择字体&quot;</span><span class="token punctuation">;</span>
        tb<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">b1_click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        clg<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tb<span class="token punctuation">.</span>FontName <span class="token operator">=</span> flg<span class="token punctuation">.</span>Font<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Fonts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用System.Drawing.Drawing2D名字空间：</p><p>如果你有一些图形图像编程的经验，那么你一定知道画笔和画刷的概念。它们在图形编程有非常广泛的运用。System.Drawing.Drawing2D名字空间提供了相当强大的功能，能让开发者很容易地操作画笔以及画刷对象。比如，你可以通过设置画笔的DashStyle属性（有Dash、DashDot、Solid等风格）来确定直线的风格。同样，通过运用SolidBrush、HatchBrush、GradientBrush等画笔你可以很轻易地修改被填充区域的外观。比如，你可以用SolidBrush将一个矩形区域用许许多多不同粗细的直线来填充。那么，我们在什么时候运用画笔和画刷呢？就像上面的例子中那样，通常一个图形轮廓（运用DrawXXX()方法）是用画笔对象来实现的，而一个填充区域（运用FillXXX()方法）则是用画刷对象来实现的。</p><p>使用画笔对象：</p><p>在下面的实例中，我们用到了System.Drawing.Drawing2D名字空间。实例中我们用画笔以不同的风格画了直线、椭圆、馅饼图形、多边形等图形。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Drawgra</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Drawgra</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;运用画笔示例&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Size</span><span class="token punctuation">(</span><span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Paint <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PaintEventHandler</span><span class="token punctuation">(</span>Draw_Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Draw_Graphics</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span>
        <span class="token class-name">Pen</span> penline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pen</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Pen</span> penellipse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pen</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Blue<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Pen</span> penpie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pen</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Tomato<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Pen</span> penpolygon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pen</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Maroon<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/*DashStyle有Dash、DashDot、DashDotDot、Dot、Solid等风格*/</span>
        <span class="token comment">//以Dash风格画一条直线</span>
        penline<span class="token punctuation">.</span>DashStyle <span class="token operator">=</span> DashStyle<span class="token punctuation">.</span>Dash<span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">DrawLine</span><span class="token punctuation">(</span>penline<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//以DashDotDot风格画一个椭圆</span>
        penellipse<span class="token punctuation">.</span>DashStyle <span class="token operator">=</span> DashStyle<span class="token punctuation">.</span>DashDotDot<span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">DrawEllipse</span><span class="token punctuation">(</span>penellipse<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//以Dot风格画一个馅饼图形 </span>
        penpie<span class="token punctuation">.</span>DashStyle <span class="token operator">=</span> DashStyle<span class="token punctuation">.</span>Dot<span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">DrawPie</span><span class="token punctuation">(</span>penpie<span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//以Solid风格画一个多边形 </span>
        g<span class="token punctuation">.</span><span class="token function">DrawPolygon</span><span class="token punctuation">(</span>penpolygon<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Drawgra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="浅析c-中图形编程-二" tabindex="-1"><a class="header-anchor" href="#浅析c-中图形编程-二" aria-hidden="true">#</a> 浅析C#中图形编程（二）</h2><p>使用画刷对象：</p><p>画刷对象是用特定的颜色、模式或是图像来填充一块区域的。总共有四种类型的画刷：SolidBrush（默认的画刷）、HatchBrush、GradientBrush以及TexturedBrush。下面，我们分别给出实例来进行介绍。</p><p>1、运用SolidBrush：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solidbru</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Solidbru</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;运用SolidBrush示例&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Paint <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PaintEventHandler</span><span class="token punctuation">(</span>Fill_Graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill_Graph</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span>
        <span class="token comment">//创建一把SolidBrush并用它来填充一个矩形区域 </span>
        <span class="token class-name">SolidBrush</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolidBrush</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Pink<span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">FillRectangle</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Solidbru</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>2、运用HatchBrush：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hatchbru</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Hatchbru</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;运用HatchBrush示例&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Paint <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PaintEventHandler</span><span class="token punctuation">(</span>Fill_Graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill_Graph</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span>
        <span class="token comment">//创建一把HatchBrush并用它来填充一个矩形区域 </span>
        <span class="token comment">/*该画刷的HatchStyle有DiagonalCross、 
        ForwardDiagonal、Horizontal、 Vertical、 Solid等不同风格 */</span>
        <span class="token class-name">HatchStyle</span> hs <span class="token operator">=</span> HatchStyle<span class="token punctuation">.</span>Cross<span class="token punctuation">;</span>
        <span class="token class-name">HatchBrush</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HatchBrush</span><span class="token punctuation">(</span>hs<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Blue<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">FillRectangle</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hatchbru</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>3、运用GradientBrush：</p><p>GradientBrush又可分为LinearGradientBrush和PathGradientBrush两种，从它们的名称我们可以知道前者是线性渐变的，而后者则是路径渐变的，因而能创造出更复杂和完美的效果。下面我就给大家分别举例：</p><p>1）、运用LinearGradientBrush：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinearGradientbru</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">LinearGradientbru</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;运用LinearGradientBrush示例&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Paint <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PaintEventHandler</span><span class="token punctuation">(</span>Fill_Graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill_Graph</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LinearGradientBrush</span> lb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LinearGradientBrush</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Yellow<span class="token punctuation">,</span>
        LinearGradientMode<span class="token punctuation">.</span>BackwardDiagonal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">FillRectangle</span><span class="token punctuation">(</span>lb<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LinearGradientbru</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>所得图形如下：</p><p>2）、运用PathGradientBrush：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathGradientbru</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">PathGradientbru</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;运用PathGradientBrush示例&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Paint <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PaintEventHandler</span><span class="token punctuation">(</span>Fill_Graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill_Graph</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span>TextRenderingHint <span class="token operator">=</span> TextRenderingHint<span class="token punctuation">.</span>AntiAliased<span class="token punctuation">;</span>
        e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">FillRectangle</span><span class="token punctuation">(</span>backgroundBrush<span class="token punctuation">,</span> ClientRectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">FillRectangle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolidBrush</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token function">FromArgb</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>White<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ClientRectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//先设置好一个路径 </span>
        <span class="token class-name">GraphicsPath</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphicsPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">275</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>

            <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>PathPointType<span class="token punctuation">.</span>Start<span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>PathPointType<span class="token punctuation">.</span>Bezier<span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>PathPointType<span class="token punctuation">.</span>Bezier<span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>PathPointType<span class="token punctuation">.</span>Bezier<span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>PathPointType<span class="token punctuation">.</span>Line<span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>PathPointType<span class="token punctuation">.</span>Line<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//创建一把PathGradientBrush</span>
        <span class="token class-name">PathGradientBrush</span> pgb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PathGradientBrush</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//设置画刷的周围颜色</span>
        pgb<span class="token punctuation">.</span>SurroundColors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Color<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
            Color<span class="token punctuation">.</span>Green<span class="token punctuation">,</span>
            Color<span class="token punctuation">.</span>Yellow<span class="token punctuation">,</span>
            Color<span class="token punctuation">.</span>Red<span class="token punctuation">,</span>
            Color<span class="token punctuation">.</span>Blue<span class="token punctuation">,</span>
            Color<span class="token punctuation">.</span>Orange<span class="token punctuation">,</span>
            Color<span class="token punctuation">.</span>White<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">//用画刷进行填充 </span>
        e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">FillPath</span><span class="token punctuation">(</span>pgb<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PathGradientbru</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>所得图形如下：</p><p>4、运用TexturedBrush：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Drawing2D</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Texturedbru</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token class-name">Brush</span> bgbrush<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Texturedbru</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//创建一幅图像以供填充椭圆的背景用 </span>
        <span class="token class-name">Image</span> bgimage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span><span class="token string">&quot;dotnet.gif&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bgbrush <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextureBrush</span><span class="token punctuation">(</span>bgimage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Paint <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PaintEventHandler</span><span class="token punctuation">(</span>Text_bru<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Text_bru</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">FillEllipse</span><span class="token punctuation">(</span>bgbrush<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Texturedbru</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用图像：</p><p>图像在图形编程中经常要用到的，其对用户界面的作用也是非常明显的。在以前的编程过程中，对图像的操作细节是相当繁琐的而且很容易出错。现在，在GDI+下面，你可以用C＃语言很容易的完成你所希望的图像编程。</p><p>很简单，你只要通过以下步骤就可以实现图像的编程。</p><p>1、 创建一个位图类对象如下：</p><p><code>Image img = new Bitmap(&quot;image.bmp&quot;);</code></p><p>2、 在DrawImage（）方法中运用上述对象：</p><p><code>g.DrawImage(img,20,20,100,90);</code></p><p>至于使用图像的实例，限于篇幅，我就不再这里介绍了。相信大家能很容易地完成一个运用图像的实例的。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>在这篇文章中，我主要用到了两个非常核心的名字空间：一个是System.Drawing、一个是System.Drawing.Drawing2D。有了它们，我们就可以很方便的调用其中的方法、属性来实现以往进行图形编程需要付出很大代价才能完成的任务，这不能不说是GDI+给我们带来的优点。所以，掌握好GDI+，我相信你的图形编程能力会更上一层楼的。</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>Powered by DvNews.net
来源：网络
阅读：334 次
日期：2003-7-12
</code></pre></div>`,53),c=[o];function e(u,l){return s(),a("div",null,c)}const i=n(t,[["render",e],["__file","pic_img9.html.vue"]]);export{i as default};
