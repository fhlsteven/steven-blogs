import{_ as n,o as s,c as a,a as t}from"./app-d9da1b6d.js";const p={},o=t(`<h1 id="c-教程第五课-方法" tabindex="-1"><a class="header-anchor" href="#c-教程第五课-方法" aria-hidden="true">#</a> C＃教程第五课:方法</h1><p>（Joe Mayo　2001年06月08日 11:32）</p><p>本节课向你介绍C#的方法，其目的是：</p><ol><li>了解方法的结构格式</li><li>了解静态和实例方法之间的区别</li><li>学会实例对象的使用</li><li>学会如何调用实例化的对象</li><li>学会方法的四种参数类型的使用</li><li>学会使用&quot;this&quot;引用</li></ol><p>以往，对于每个程序来说，所有的工作都在Main()方法中实现。这对于功能简单的程序是合适的，因为仅仅用来学习一些概念。有个更好的方法来组织你的程序，那就是使用方法。方法是很有用的，因为方法可以让你在不同的单元中分开设计你的逻辑模块。</p><p>方法的结构格式如下：</p><p><code>属性 修饰符 返回值类型 方法名（参数） { 语句 }</code></p><p>我们将在后面的课程中，讨论属性和修饰符。方法的返回值可以是任何一种C#的数据类型，该返回值可以赋给变量，以便在程序的后面部分使用。方法名是唯一，可以被程序调用。为使得你的代码变得更容易理解和记忆，方法的取名可以同所要进行的操作联系起来。你可以传递数据给方法，也可以从方法中返回数据。它们由大括号包围起来。大括号中的语句实现了方法的功能。</p><p>1.清单5-1. 一个简单的方法： OneMethod.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">OneMethod</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> myChoice<span class="token punctuation">;</span>
        <span class="token class-name">OneMethod</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OneMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            myChoice <span class="token operator">=</span> om<span class="token punctuation">.</span><span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Make a decision based on the user&#39;s choice</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>myChoice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You wish to add an address.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You wish to delete an address.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You wish to modify an address.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">&quot;V&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">&quot;v&quot;</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You wish to view the address list.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">&quot;Q&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">&quot;q&quot;</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Bye.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0} is not a valid choice&quot;</span><span class="token punctuation">,</span> myChoice<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Pause to allow the user to see the results</span>
            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Press any key to continue...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>myChoice <span class="token operator">!=</span> <span class="token string">&quot;Q&quot;</span> <span class="token operator">&amp;&amp;</span> myChoice <span class="token operator">!=</span> <span class="token string">&quot;q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Keep going until the user wants to quit</span>
    <span class="token punctuation">}</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> myChoice<span class="token punctuation">;</span>
        <span class="token comment">// Print A Menu</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;My Address Book\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A - Add New Address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;D - Delete Address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;M - Modify Address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;V - View Addresses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Q - Quit\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Choice (A,D,M,V,or Q): &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Retrieve the user&#39;s choice</span>
        myChoice <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> myChoice<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><ol><li><p>清单5-1中的程序类似于第四课中的DoLoop程序。</p><p>区别在于：前一课中的程序打印出菜单内容，并在Main()方法中接受用户的输入，而本课中，该功能用一个名为getChoice()的方法实现，该方法的返回值类型是个字符串类型。在main方法中，在switch语句中用到了该串。方法&quot;getChoice&quot;实现了调用时所完成的工作。方法名后面的括号内是空的，因为调用getChoice()方法时，不需要传递任何数据。</p></li><li><p>在方法块中，我们首先定义了变量&quot;myChoice&quot;。</p><p>虽然它与 Main()方法中的&quot;myChoice&quot;变量同名同类型, 但它们是不同的两个变量，因为局部变量仅仅在其定义的块内可见。换句话说， getChoice()方法中的&quot;myChoice&quot; 同Main()方法中的&quot;myChoice&quot;变量没有丝毫联系。getChoice()方法打印出一个菜单到控制台，并读取用户的输入。&quot;return&quot; 语句把&quot;myChoice&quot;变量值返回给Main()方法中的调用者getChoice()。注意： &quot;return&quot;语句返回类型同该方法中定义的返回值类型相同，本例中，该返回值是个字符串。</p></li><li><p>在Main()方法中，在使用getChoice()之前，实例化了一个新的&quot;OneMethod&quot;对象。</p><p>这是因为：我们没有指明一个&quot;静态&quot;修饰符。(注意：Main()函数带有&quot;静态&quot;修饰符)，getChoice()就成为一个实例的方法。 实例方法和静态方法的区别是：前者可以创建多个类的实例，每个实例有自己的单独的getChoice()方法。而一旦方法是静态的，就不存在方法的实例，你只能调用该静态方法的一个实现。</p></li></ol><p>所以，正如前面所讲的，因为getChoice()并不是静态的，所以，我们必须实例化一个新对象来使用它。这是通过定义&quot;OneMethod om = new OneMethod()&quot;来进行的。在等号的左边，是对象引用&quot;om&quot;，其类型是OneMethod。&quot;om&quot;是个对象的引用，这点很重要，&quot;om&quot;并不是对象自身，它是个引用OneMethod类型对象的变量。 在等号的右边，把新创建的OneMethod对象赋给引用&quot;om&quot;。 关键字&quot;new&quot;是个在堆上创建对象的新实例的C#运算符。此处完成的工作是： 在堆上创建一个新的OneMethod实例，并把它赋给om引用。一旦有了om引用的OneMethod对象实例，就可以通过om引用来对实例进行处理。</p><p>方法，域和其他类成员可以通过&quot;.&quot; (点)运算符进行访问，标识和操纵。一旦需要调用方法getChoice()，就通过om引用，并使用点运算符&quot;om.getChoice()&quot;来进行。 getChoice() 块中的语句执行完毕之后即返回。为了捕捉到getChoice()的返回值，我们使用了赋值运算符&quot;=&quot;。 返回串放到了Main()函数的局部变量 myChoice中，从那里，程序的其余部分按照前面课程中介绍的方式正常执行。</p><p>2.清单5-2. 方法参数：MethodParams.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">MethodParams</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> myChoice<span class="token punctuation">;</span>
        <span class="token class-name">MethodParams</span> mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MethodParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token comment">// show menu and get input from user</span>
            myChoice <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Make a decision based on the user&#39;s choice</span>
            mp<span class="token punctuation">.</span><span class="token function">makeDecision</span><span class="token punctuation">(</span>myChoice<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Pause to allow the user to see the results</span>
            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Press any key to continue...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>myChoice <span class="token operator">!=</span> <span class="token string">&quot;Q&quot;</span> <span class="token operator">&amp;&amp;</span> myChoice <span class="token operator">!=</span> <span class="token string">&quot;q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Keep going until the user wants to quit</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// show menu and get user&#39;s choice</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> myChoice<span class="token punctuation">;</span>
        <span class="token comment">// Print A Menu</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;My Address Book\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A - Add New Address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;D - Delete Address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;M - Modify Address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;V - View Addresses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Q - Quit\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Choice (A,D,M,V,or Q): &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Retrieve the user&#39;s choice</span>
        myChoice <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> myChoice<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// make decision</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">makeDecision</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> myChoice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Address</span> addr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>myChoice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">case</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span>
                addr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Joe&quot;</span><span class="token punctuation">;</span>
                addr<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">&quot;C# Station&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addAddress</span><span class="token punctuation">(</span><span class="token keyword">ref</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">case</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">:</span>
                addr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Robert&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteAddress</span><span class="token punctuation">(</span>addr<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">case</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">:</span>
                addr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Matt&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">modifyAddress</span><span class="token punctuation">(</span><span class="token keyword">out</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Name is now {0}.&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;V&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">case</span> <span class="token string">&quot;v&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">viewAddresses</span><span class="token punctuation">(</span><span class="token string">&quot;Cheryl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Joe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Matt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Robert&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;Q&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">case</span> <span class="token string">&quot;q&quot;</span><span class="token punctuation">:</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Bye.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0} is not a valid choice&quot;</span><span class="token punctuation">,</span> myChoice<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// insert an address</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">addAddress</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">Address</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Name: {0}, Address: {1} added.&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">.</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// remove an address</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">deleteAddress</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You wish to delete {0}&#39;s address.&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// change an address</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">modifyAddress</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name">Address</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//Console.WriteLine(&quot;Name: {0}.&quot;, addr.name); // causes error!</span>
        addr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Joe&quot;</span><span class="token punctuation">;</span>
        addr<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">&quot;C# Station&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// show addresses</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">viewAddresses</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name <span class="token keyword">in</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Name: {0}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><ol><li><p>清单5-2是清单5-1的修改，主要是对程序进行了模块化，并添加了更多的实现，以便阐述参数传递的用法。</p><p>C#可以处理四种类型的参数：out（输出），ref（引用），params（数组）和value（值）。为了说明参数的用法，我们用两个字符串域创建地址类。</p></li><li><p>在Main()方法中，我们调用getChoice()来读取用户的输入，并且把字符串放到myChoice变量中。</p><p>之后，把myChoice变量作为makeDecision()函数的实在参数。在实现makeDecision()方法时，注意其形式参数为字符串myChoice。需要再次说明的是：这是个新的myChoice变量，不同于调用者的实在参数，仅仅是适用于本方法的局部变量。 因为makeDecision()方法的myChoice参数没有任何其他修饰符，故认为它是&quot;值&quot;参，即实在参数的值被拷贝到栈中，故作为值参的变量是局部的，任何对局部变量值的改变并不影响到调用者的实在参数的值。换句话说，值参仅仅是来自调用者的输入。</p></li><li><p>makeDecision()方法中的switch语句完成如下功能：</p><p>在每种情形下，都调用相应的方法。这些方法的调用不同于Main()方法。除了使用&quot;mp&quot; 引用，它们还使用了&quot;this&quot;关键字。&quot;this&quot;是对当前对象的引用。由于makeDecision()方法不是静态方法，当前对象已经被实例化，所以可以使用&quot;this&quot;引用来调用同一实例中的方法。</p></li><li><p>addAddress()方法用到了&quot;ref&quot;参数，即引用可作为参数来传递，即该引用被拷贝到栈中，其引用的对象同调用者的实参所引用的对象是同一个。</p><p>这意味着：任何对局部引用的对象的改变也就是对调用者所引用的对象的改变。你可以想象一下，这就相当于输入/输出参数。</p></li><li><p>modifyAddress()中有一个输出参数。</p><p>输出参数仅仅传递给被调用函数。一旦调用该方法时，在栈中的仅有的一个引用未被赋值，因为根据赋值的确定性原则，在该变量没有被赋值之前，就不能使用该变量。modifyAddress()方法的第一行作为注释，说明了这一点。你可以试着去掉注释符，编译一下程序，看看结果如何。一旦该变量被赋了值，在程序返回之后，输出参数就被拷贝到调用者的参数中。所以，在方法返回之前，必须给输出参数赋值。</p></li></ol><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>C# 语言的一个很有用途的参数类型是数组参数，它须是一维或多维的数组。在makeDecision()方法中，我们传递了用四个逗号隔开的字符串参数。参数的个数是变量。在viewAddresses()方法中，使用了foreach循环，逐一输出这些字符串。数组参数仅是一种输入性质的参数，任何对数组参数值的改变仅仅影响到局部的副本值。</p><p>概括地讲，你现在已经理解了方法的组织结构。你还了解了方法的实现可以采用的四种参数类型及其格式。 一旦你使用实例方法，就必须实例化该对象，静态方法则不同，后者可以在任何时候被调用。另外，你也了解了&quot;this&quot;引用是如何调用实例方法的。</p>`,21),e=[o];function c(u,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","cspcls4_5.html.vue"]]);export{k as default};
