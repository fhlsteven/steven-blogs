import{_ as n,o as s,c as a,a as t}from"./app-57d1f7b1.js";const p="/steven-blogs/assets/netcode43_1-4e7a00e4.png",o="/steven-blogs/assets/netcode43_2-b27a5d5e.png",c={},e=t(`<h1 id="全面掌握visualc-实现udp协议-一" tabindex="-1"><a class="header-anchor" href="#全面掌握visualc-实现udp协议-一" aria-hidden="true">#</a> 全面掌握VisualC＃实现UDP协议(一)</h1><h2 id="一-走进udp协议" tabindex="-1"><a class="header-anchor" href="#一-走进udp协议" aria-hidden="true">#</a> 一.走进UDP协议</h2><p>UDP（User Datagram Protocol）协议就是“用户数据报协议”，它是一种无连接的协议，无连接主要是和TCP协议相比较的。我们知道当利用TCP协议传送数据的时候，首先必须先建立连接（也就是所谓的握手）才可以传输数据。而当计算机利用UDP协议进行数据传输的时候，发送方只需要知道对方的IP地址和端口号就可以发送数据，而并不需要进行连接。当然如果你非要进行连接，通过Visual C＃也是可以实现的，但前提是要确定连接的远程主机的端口号处于监听状态，否则程序会出现不必要的错误，但这是种画蛇添足的做法，不仅丢失了UDP协议的无连接传送数据的特点和优点，而且还给程序运行带来了不安定的因素。所以这种方法并不值得提倡。</p><p>由于UDP协议并不需要进行确定的连接，所以编写基于UDP协议的应用程序比起编写基于TCP协议的应用程序要简单些（程序中可以不需要考虑连接和一些异常的捕获工作）。但同时也给基于UDP协议编写的程序带来了一个致命的缺点，UDP由于不提供可靠数据的传输，当计算机之间利用UDP协议传送数据的时候，发送方只管发送数据，而并不确认数据是否被对方接收。这样就会导致某些UDP协议数据包在传送的过程中丢失，尤其网络质量不令人满意的情况下，丢失数据包的现象会更严重。这就是为什么在网络上传输重要数据不采用UDP协议的原因。</p><p>但是我们也不能因为这一个缺点就全面否定UDP协议，这是因为虽然利用UDP协议来传送安全性要求高的数据是不适合的，但对于那些不重要的数据，或者即使丢失若干数据包也不影响整体性的数据，如音频数据，视频数据等，采用UDP协议就是一个非常不错的选择。如目前网络流行的很多即时聊天程序，如OICQ和ICQ等，采用的就是UDP协议。同时虽然UDP协议无法保证数据可靠性，但具有对网络资源开销较小，数据处理速度快的优点，所以在有些对数据安全性要求不是很高的情况下，采用UDP协议也是一个非常不错的选择。</p><p>总结一下上面的内容，可见UDP是一种不面向连接的网络协议，既有其优点，也有其不足，具体如下：</p><ol><li><p>基于UDP协议的网络应用程序，实现起来比较简单，并且基于UDP协议的网络应用程序在运行时，由于受到环境影响较小，所以不容易出错。</p></li><li><p>UDP协议占用网络资源较少，数据处理较快，所以在网络中传送对安全性要求不是十分高数据时，其优点比较明显。所谓对安全性要求不高的数据，是指那些不重要的数据，或者是即使丢失若干数据，也不影响其整体的数据，如音频数据等。目前很多流行的网络应用程序都是基于UDP协议的，如OICQ、ICQ等。</p></li><li><p>由于其不是面向连接的网络协议，其缺点也是非常明显的，有些时候甚至是致命的。因为使用UDP协议来传送数据，在数据发送后，在发送方并不确认对方是否接收到。这样就可能导致传送的数据在网络中丢失，尤其在网络条件并不很好的情况下，丢失数据包的现象就更多。所以传送重要数据一般不采用UDP协议。</p></li></ol><h2 id="二-简介visual-c-发送、接收udp数据包使用的主要类及其用法" tabindex="-1"><a class="header-anchor" href="#二-简介visual-c-发送、接收udp数据包使用的主要类及其用法" aria-hidden="true">#</a> 二．简介Visual C＃发送、接收UDP数据包使用的主要类及其用法</h2><p>用Visual C＃实现UDP协议，最为常用，也是最为关键的类就是UdpClient，UdpClient位于命名空间System.Net.Sockets中，Visual C＃发送、接收UDP数据包都是通过UdpClient类的。表01和表02是UdpClient类中常用方法和属性及其简要说明。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Close</td><td>关闭 UDP 连接</td></tr><tr><td>Connect</td><td>建立与远程主机的连接</td></tr><tr><td>DropMulticastGroup</td><td>退出多路广播组</td></tr><tr><td>JoinMulticastGroup</td><td>将 UdpClient 添加到多路广播组</td></tr><tr><td>Receive</td><td>返回已由远程主机发送的 UDP 数据文报</td></tr><tr><td>Send</td><td>将 UDP 数据文报发送到远程主机</td></tr></tbody></table><p>表01：UdpClient类中常用方法及其说明。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>Active</td><td>获取或设置一个值，该值指示是否已建立了与远程主机的连接</td></tr><tr><td>Client</td><td>获取或设置基础网络套接字</td></tr></tbody></table><p>表02：UdpClient类中常用方法及其说明。</p><p>1.Visual C＃使用UdpClient类发送UDP数据包：</p><p>在具体使用中，一般分成二种情况：</p><p>（1）. 知道远程计算机IP地址：</p><p>&quot;Send&quot;方法的调用语法如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Send</span><span class="token punctuation">(</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> dgram <span class="token punctuation">,</span>
    <span class="token class-name"><span class="token keyword">int</span></span> bytes <span class="token punctuation">,</span>
    <span class="token class-name">IPEndPoint</span> endPoint
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>参数说明：</p><p><code>dgram</code> 要发送的 UDP 数据文报（以字节数组表示）。<br><code>bytes</code> 数据文报中的字节数。<br><code>endPoint</code> 一个 <code>IPEndPoint</code>，它表示要将数据文报发送到的主机和端口。<br> 返回值 已发送的字节数。</p><p>下面使用UdpClient发送UDP数据包的具体的调用例子：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IPAddress</span> HostIP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPAddress<span class="token punctuation">.</span>Parse</span><span class="token punctuation">(</span><span class="token string">&quot;远程计算机IP地址&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IPEndPoint</span> host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>HostIP<span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
UdpClient<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token string">&quot;发送的字节&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;发送的字节长度&quot;</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>（2）. 知道远程计算机名称:：</p><p>知道远程计算机名称后，利用&quot;Send&quot;方法直接把UDP数据包发送到远程主机的指定端口号上了，这种调用方式也是最容易的，语法如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Send</span><span class="token punctuation">(</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> dgram <span class="token punctuation">,</span>
    <span class="token class-name"><span class="token keyword">int</span></span> bytes <span class="token punctuation">,</span>
    <span class="token class-name"><span class="token keyword">string</span></span> hostname <span class="token punctuation">,</span>
    <span class="token class-name"><span class="token keyword">int</span></span> port
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>参数说明：</p><p><code>dgram</code> 要发送的 UDP 数据文报（以字节数组表示）。<br><code>bytes</code> 数据文报中的字节数。<br><code>hostname</code> 要连接到的远程主机的名称。<br><code>port</code> 要与其通讯的远程端口号。<br> 返回值 已发送的字节数。</p><p>2.Visual C＃使用UdpClient类接收UDP数据包：</p><p>接收UDP数据包使用的是UdpClient中的“Receive”方法。此方法的调用语法如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">Receive</span><span class="token punctuation">(</span>
    <span class="token keyword">ref</span> <span class="token class-name">IPEndPoint</span> remoteEP
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>参数</p><p><code>remoteEP</code> 是一个 IPEndPoint类的实例，它表示网络中发送此数据包的节点。</p><p>如果指定了远程计算机要发送到本地机的端口号，也可以通过侦听本地端口号来实现对数据的获取，下面就是通过侦听本地端口号“8080”来获取信息代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UdpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
receivePoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span>
        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPAddress</span> <span class="token punctuation">(</span> <span class="token string">&quot;127.0.0.1&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> recData <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">Receive</span><span class="token punctuation">(</span><span class="token keyword">ref</span> receivePoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="三-visual-c-实现udp协议之网络对时系统的体系结构及功能简介" tabindex="-1"><a class="header-anchor" href="#三-visual-c-实现udp协议之网络对时系统的体系结构及功能简介" aria-hidden="true">#</a> 三．Visual C＃实现UDP协议之网络对时系统的体系结构及功能简介</h2><p>在局域网中有很多应用软件为了协同工作，需要保证客户机上时间统一，而为了实现这一点，通常的做法是客户机从一个时间相对正确的服务器读取时间，以此来校正本地时间。如经常看到的GPS对时系统等。本节编写的局域网上对时系统的主要的功能是保证局域网上计算机时间、日期的统一。网络对时程序是体系结构分成服务器端程序和客户端程序二个部分，具体的作法是：在同一个网段上，固定一台计算机作为对时的服务器，在这个网段的所有计算机都可以读取这台服务器上的时间和日期，并依此服务器上的时间和日期为基准，来确定本地的时间和日期。在服务器端程序需要达到以下功能：</p><ul><li>能够接收局域网中任一台客户机的请求</li><li>记录请求客户机的计算机名称，和请求时间</li><li>准确发送服务器端的时间和日期</li></ul><p>端程序要达到以下功能：</p><ul><li>能够设定服务器的主机或者IP地址</li><li>能够接收服务器端发送的时间、日期信息</li><li>能够以接收的服务器端时间、日期为基准，校正本地时间</li></ul><p>因此在具体用Visual C＃实现网络对时系统时就包括二个部分：服务器端程序和客户端程序。下面首先介绍Visual C＃实现网络对时系统中服务器端程序的具体步骤。</p><h2 id="四-visual-c-实现网络对时系统之服务器端程序的具体步骤" tabindex="-1"><a class="header-anchor" href="#四-visual-c-实现网络对时系统之服务器端程序的具体步骤" aria-hidden="true">#</a> 四．Visual C＃实现网络对时系统之服务器端程序的具体步骤</h2><p>服务器端程序比客户端程序相对要简单，主要因是服务器端程序的工作比较简单，就是接收客户端的对时请求、发送服务器端的时间数据。而于客户端不仅要传送和接收数据，还要把服务器端的时间提取出来，并以此来修改本地计算机的时间、日期。下面是用Visual C＃实现网络对时系统之服务器端程序的具体步骤步骤。</p><p>1.启动Visual Studio .Net。</p><p>2.选择菜单【文件】|【新建】|【项目】后，弹出【新建项目】对话框。</p><p>3.将【项目类型】设置为【Visual C＃项目】。</p><p>4.将【模板】设置为【Windows应用程序】。</p><p>5.在【名称】文本框中输入【UDP对时服务器端】。</p><p>6.在【位置】的文本框中输入【E:\\VS.NET项目】，然后单击【确定】按钮</p><p>7.在【解决方案资源管理器】窗口中，双击Form1.cs文件，进入Form1.cs文件的编辑界面。</p><p>8.在Form1.cs文件的开头，用下列导入命名空间代码替代系统缺省的导入命名空间代码。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Sockets</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span> <span class="token punctuation">;</span>
<span class="token comment">//程序中使用到线程</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span> <span class="token punctuation">;</span>
<span class="token comment">//程序中使用到编码</span>
</code></pre></div><p>9.切换到【Form1.cs（设计）】窗口，并从【工具箱】中的【Windows窗体组件】中往窗体中拖入下列组件，并执行相应操作：</p><p>一个Label组件，显示对时服务器正在运行信息<br> 一个ListBox组件，名称为listBox1，用以显示客户端和服务器端交流的日志<br> 一个Button组件，名称为button1，并在其拖入窗体后，双击，则系统会在Form1.cs文件中产生其Click事件对应的处理代码。</p><p>10.在【解决方案资源管理器】窗口中，双击Form1.cs文件，进入Form1.cs文件的编辑界面。在Form1.cs中的class代码区添加下列代码，下列代码是定义程序中使用的全局变量和创建全局使用的实例：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name">UdpClient</span> server <span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">IPEndPoint</span> receivePoint <span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> port <span class="token operator">=</span> <span class="token number">8080</span> <span class="token punctuation">;</span>
<span class="token comment">//定义端口号</span>
<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> ip <span class="token operator">=</span> <span class="token number">127001</span> <span class="token punctuation">;</span>
<span class="token comment">//设定本地IP地址</span>
<span class="token keyword">private</span> <span class="token class-name">Thread</span> startServer <span class="token punctuation">;</span>
</code></pre></div><p>11.以下面代码替代系统产生的InitializeComponent过程。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>ListBox</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Label</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>SuspendLayout <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span>ItemHeight <span class="token operator">=</span> <span class="token number">12</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span> <span class="token punctuation">(</span> <span class="token number">14</span> <span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;listBox1&quot;</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span> <span class="token punctuation">(</span> <span class="token number">268</span> <span class="token punctuation">,</span> <span class="token number">220</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>ForeColor <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Red <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span> <span class="token punctuation">(</span> <span class="token number">44</span> <span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;label1&quot;</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span> <span class="token punctuation">(</span> <span class="token number">210</span> <span class="token punctuation">,</span> <span class="token number">24</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;UDP对时服务器端正在运行......&quot;</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>FlatStyle <span class="token operator">=</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>FlatStyle<span class="token punctuation">.</span>Flat <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span> <span class="token punctuation">(</span> <span class="token number">106</span> <span class="token punctuation">,</span> <span class="token number">278</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;button1&quot;</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span> <span class="token punctuation">(</span> <span class="token number">75</span> <span class="token punctuation">,</span> <span class="token number">34</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;清除信息&quot;</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>button1_Click <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>AutoScaleBaseSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span> <span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">,</span> <span class="token number">14</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ClientSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span> <span class="token punctuation">(</span> <span class="token number">300</span> <span class="token punctuation">,</span> <span class="token number">329</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span>AddRange <span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Control<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>button1 <span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1 <span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>MaximizeBox <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Form1&quot;</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;UDP对时服务器端&quot;</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Load <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Form1_Load <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ResumeLayout <span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>至此，【UDP对时服务器端】项目的界面设计和功能实现的前期工作就完成了，设计界面如图01所示：</p><p><img src="`+p+`" alt="43_1"><br> 图01：【UDP对时服务器端】项目的设计界面</p><p>12.在Form1.cs文件中的InitializeComponent过程的后面添加下面代码，下列代码是定义过程“start_server”。此过程的功能是获取客户端对时请求数据，并向客户端发送服务器当前时间和日期。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">start_server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//接收从远程主机发送到本地8080端口的数据</span>
        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> recData <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">Receive</span><span class="token punctuation">(</span><span class="token keyword">ref</span> receivePoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ASCIIEncoding</span> encode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ASCIIEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获得客户端请求数据</span>
        <span class="token class-name"><span class="token keyword">string</span></span> Read_str <span class="token operator">=</span> encode<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>recData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//提取客户端的信息，存放到定义为temp的字符串数组中</span>
        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> temp <span class="token operator">=</span> Read_str<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">.</span><span class="token function">ToCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//显示端口号的请求信息</span>
        listBox1<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;时间：&quot;</span> <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToLongTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;   接收信息如下：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        listBox1<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;客户机：&quot;</span> <span class="token operator">+</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        listBox1<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;端口号：&quot;</span> <span class="token operator">+</span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//发送服务器端时间和日期</span>
        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sendData <span class="token operator">=</span> encode<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        listBox1<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;发送服务器时间！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//对远程主机的指定端口号发送服务器时间</span>
        server<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>sendData<span class="token punctuation">,</span> sendData<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Int32<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>请注意：上述代码中约定客户机程序发送对时请求信息到服务器的8080端口号。服务器端程序接收发送到本地8080端口号的数据就完成了数据接收。为了能够让服务器端程序知道是那台客户机提出请求和要把对时信息发送到客户机的那个端口号上，客户端程序对发送的对时请求信息进行了设计。客户端的对时请求信息结构为：</p><p><code>计算机名称 + / + 客户机接收信息端口号</code></p><p>这样如果客户端计算机名称为：<code>majinhu</code>，接收服务器端时间数据的端口号是8080，则客户端程序发送的对时请求数据就为：<code>majinhu/8080</code>。</p><p>服务器端程序在接收到客户端对时请求数据，并进行分析后，就能够通过UdpClient类的Send方法准确的把服务器端当前的时间和日期发送到客户端指定的端口号上。这样客户端程序通过读取指定的端口号，就能够获得服务器端当前的时间和日期，从而以此来修正客户端的时间和日期了。</p><p>13.在“start_server”过程之后面添加下面代码，下列代码是定义“run”过程。“run”过程的作用是创建一个线程实例，并以“start_server”过程来初始化线程实例。之所以采用线程是因为服务器端程序需要不间断读取发送到8080端口号，并且Receive方法是一个阻塞式方法。采用线程就是为了保证服务器端程序正常运行：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//利用本地8080端口号来初始化一个UDP网络服务</span>
    server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UdpClient</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    receivePoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPAddress</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//开一个线程</span>
    startServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>start_server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//启动线程</span>
    startServer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>14.在Form1.cs中的Main函数之后添加下列代码，下列代码是定义“Form1_Load”事件，在此事件中将调用“run”过程，这样当服务器端程序运行后，就启动网络对时服务：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_Load</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//启动对时服务</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>15.在Form1.cs文件中的“Form1_Load”事件之后，添加下列代码，下列代码是定义button1的“Click”事件，此事件的作用是清除服务器端程序显示的日志信息：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//清除服务器端程序日志</span>
    listBox1<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>16.用下列代码替换Form1.cs中的Dispose方法。下列代码的功能是手动收集程序中使用的资源：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> disposing<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//关闭线程</span>
        startServer<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//清除资源</span>
        server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>disposing<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>components <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            components<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span>disposing<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>至此，在上述步骤都正确完成，【UDP对时服务器端】项目的全部工作就完成了。图02【UDP对时服务器端】运行后的界面，在日志信息中记录了对时请求客户机的名称，发送对时数据的端口号以及客户端请求的时间：</p><p><img src="`+o+`" alt="netcode43_2"><br> 图02：【UDP对时服务器端】项目的运行界面</p><hr><p>2004-11-14 09:24:07 abc</p><blockquote><p>发现在接收时，程序无响应</p></blockquote><p>2004-10-07 16:27:00 xx-boy</p><blockquote><p>下一篇,客户端的东西呢?</p></blockquote><p>2004-08-29 19:59:00</p><blockquote><p>问题解决，原来调试和实际运行情况有点不太一样。：）</p></blockquote><p>2004-08-29 19:54:42</p><blockquote><p>这段代码有问题。</p></blockquote><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_Load</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//启动对时服务</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放到这个事件里将执行两次。报建立两个相同的套接字错误。</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p>正确的应该是这样</p></blockquote><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> start_server <span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//必须在这里调用,在FORM_LOAD事件中重复调用两次。</span>
</code></pre></div><blockquote><p><code>.............</code><br><code>..............</code><br> 在C#里关闭这个程序停止时间过长，如何快速的关闭这个程序，有没有好的办法？<br> DFW:hygsxy</p></blockquote>`,88),u=[e];function l(k,i){return s(),a("div",null,u)}const d=n(c,[["render",l],["__file","netcode43.html.vue"]]);export{d as default};
