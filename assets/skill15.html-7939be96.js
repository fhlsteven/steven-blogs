import{_ as n,o as s,c as a,a as t}from"./app-d9da1b6d.js";const p={},o=t(`<h1 id="net-winform学习笔记" tabindex="-1"><a class="header-anchor" href="#net-winform学习笔记" aria-hidden="true">#</a> .NET WinForm学习笔记</h1><h2 id="_1-mdi窗体" tabindex="-1"><a class="header-anchor" href="#_1-mdi窗体" aria-hidden="true">#</a> 1,MDI窗体</h2><p>设有两个窗体<code>frmMain</code>,<code>frmChild</code>,则:<br><code>frmMain</code>: 设<code>IsMdiContainer</code>属性为<code>true</code><br> 打开子窗口:<br> 在相关事件中写如下代码:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">frmChild</span> child<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">frmChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span>MdiParent<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">//this表示本窗体为其父窗体</span>
child<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>在打开子窗体时,如果只允许有一个子窗体,可以加入如下判断:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ActiveMdiChild<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ActiveMdiChild<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关闭已经打开的子窗体</span>
    <span class="token comment">//....</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="更改mdi主窗体背景" tabindex="-1"><a class="header-anchor" href="#更改mdi主窗体背景" aria-hidden="true">#</a> 更改MDI主窗体背景</h3><p>先声明一个窗体对象</p><p><code>private System.Windows.Forms.MdiClient m_MdiClient;</code></p><p>在<code>Form_Load</code>等事件中，添加如下代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> iCnt<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>iCnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">&quot;System.Windows.Forms.MdiClient&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>m_MdiClient<span class="token operator">=</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MdiClient<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>m_MdiClient<span class="token punctuation">.</span>BackColor<span class="token operator">=</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Silver<span class="token punctuation">;</span>
</code></pre></div><p>具体可参见：http://cnblogs.com/Daview/archive/2004/05/06/8381.aspx</p><h2 id="_2-创建系统托盘菜单" tabindex="-1"><a class="header-anchor" href="#_2-创建系统托盘菜单" aria-hidden="true">#</a> 2,创建系统托盘菜单</h2><p>2.1,创建一个contextMenu(cmnMain)菜单</p><p>2.2,添加一个NotifyIcon组件,设置ContextMenu属性为cmnMain</p><p>2.3,相应窗体改变事件(最小化等)</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">frmMain_SizeChanged</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span><span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>WindowState<span class="token operator">==</span>FormWindowState<span class="token punctuation">.</span>Minimized<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        noiMain<span class="token punctuation">.</span>Visible<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>2.4,相应用户单击系统托盘上contextmenu菜单事件</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">mniOpen</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span><span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    noiMain<span class="token punctuation">.</span>Visible<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>2.5,响应用户双击系统托盘图标事件</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">noiMain_DoubleClick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> s<span class="token punctuation">,</span><span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    minOpen<span class="token punctuation">.</span><span class="token function">PerformClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相当与mniOpen按钮的单击事件</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>注意添加相应的事件句柄</strong>.</p><h2 id="_3-创建不规则窗体" tabindex="-1"><a class="header-anchor" href="#_3-创建不规则窗体" aria-hidden="true">#</a> 3,创建不规则窗体</h2><p>3.1,在窗体上创建不规则图象,可以用gdi+绘制,或在图象控件上使用图象填充</p><p>3.2,设置窗体的backcolor为colorA,然后设置TransparencyKey为colorA</p><p>3.3,设置FormBorderStyle为none;</p><h2 id="_4-创建顶部窗体" tabindex="-1"><a class="header-anchor" href="#_4-创建顶部窗体" aria-hidden="true">#</a> 4,创建顶部窗体</h2><p><code>this.TopMost=true;//把窗体的TopMost设置为true</code></p><h2 id="_5-调用外部程序" tabindex="-1"><a class="header-anchor" href="#_5-调用外部程序" aria-hidden="true">#</a> 5,调用外部程序</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> System<span class="token punctuation">.</span>Diagnostics

<span class="token class-name">Process</span> proc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
proc<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>FileName<span class="token operator">=</span><span class="token string">@&quot;notepad.exe&quot;</span><span class="token punctuation">;</span>  <span class="token comment">//注意路径</span>
proc<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>Arguments<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
proc<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获得当前目录Directory.GetCurrentDirectory() (using System.IO)</span>
</code></pre></div><h2 id="_6-toolbar的使用" tabindex="-1"><a class="header-anchor" href="#_6-toolbar的使用" aria-hidden="true">#</a> 6,Toolbar的使用</h2><p>Toolbar控件通常需要imagelist控件结合使用(需要用到其中图标)</p><p>响应Toolbar单击事件处理程序代码:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>ToolbarName<span class="token punctuation">.</span>Buttons<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Button<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>   <span class="token comment">//第一个按钮</span>
        <span class="token comment">//code ...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment">//第二个按钮</span>
        <span class="token comment">//code ...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">//other case code</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>  <span class="token comment">//默认处理,但以上所有项都不符合时</span>
        <span class="token comment">//code ...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_7-弹出对话框获得相关返回值" tabindex="-1"><a class="header-anchor" href="#_7-弹出对话框获得相关返回值" aria-hidden="true">#</a> 7,弹出对话框获得相关返回值</h2><p>在窗体的closing事件中运行如下代码,可以在用户关闭窗体时询问</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DialogResult</span> result<span class="token operator">=</span>MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">&quot;真的要关闭该窗口吗?&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;关闭提示&quot;</span><span class="token punctuation">,</span>MessageBoxButtons<span class="token punctuation">.</span>OKCancel<span class="token punctuation">,</span>MessageBoxIcon<span class="token punctuation">.</span>Question<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">==</span>DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//关闭窗口</span>
    e<span class="token punctuation">.</span>Cancel<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    <span class="token comment">//取消关闭</span>
    e<span class="token punctuation">.</span>Cancel<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_8-打印控件" tabindex="-1"><a class="header-anchor" href="#_8-打印控件" aria-hidden="true">#</a> 8,打印控件</h2><p>最少需要两个控件<br> PrintDocument<br> PrintPreviewDialog:预览对话框,需要<code>printdocument</code>配合使用,即设置document属性为对应的printDocument<br> printdocument的printpage事件(打印或预览事件处理程序)代码,必须.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">float</span></span> fltHeight<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">float</span></span> fltLinePerPage<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">long</span></span> lngTopMargin<span class="token operator">=</span>e<span class="token punctuation">.</span>MarginBounds<span class="token punctuation">.</span>Top<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> intCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> strLine<span class="token punctuation">;</span>
<span class="token comment">//计算每页可容纳的行数,以决定何时换页</span>
fltLinePerPage<span class="token operator">=</span>e<span class="token punctuation">.</span>MarginBounds<span class="token punctuation">.</span>Height<span class="token operator">/</span>txtPrintText<span class="token punctuation">.</span>Font<span class="token punctuation">.</span><span class="token function">GetHeight</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>strLine<span class="token operator">=</span>StreamToPrint<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>intCount<span class="token operator">&lt;</span>fltLinePerPage<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   intCount<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
   fltHeight<span class="token operator">=</span>lngTopMargin<span class="token operator">+</span><span class="token punctuation">(</span>intCount<span class="token operator">*</span>txtPrintText<span class="token punctuation">.</span>Font<span class="token punctuation">.</span><span class="token function">GetHeight</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span>strLine<span class="token punctuation">,</span>txtPrintText<span class="token punctuation">.</span>Font<span class="token punctuation">,</span>Brushes<span class="token punctuation">.</span>Green<span class="token punctuation">,</span>e<span class="token punctuation">.</span>MarginBounds<span class="token punctuation">.</span>Left<span class="token punctuation">,</span>fltHeight<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//决定是否要换页</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>strLine<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   e<span class="token punctuation">.</span>HasMorePages<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
   e<span class="token punctuation">.</span>HasMorePages<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>以上代码的StreamToPrint需要声明为窗体级变量:</p><p><code>private System.IO.StringReader StreamToPrint;</code></p><p>打开预览对话框代码(不要写在printpage事件中)</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>StreamToPrint<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>StringReader</span><span class="token punctuation">(</span>txtPrintText<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
PrintPreviewDialogName<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_9-string对象本质与stringbuilder类-字符串使用" tabindex="-1"><a class="header-anchor" href="#_9-string对象本质与stringbuilder类-字符串使用" aria-hidden="true">#</a> 9,<code>string</code>对象本质与<code>StringBuilder</code>类,字符串使用</h2><p><code>string</code>对象是不可改变的类型,当我们对一个string对象修改后将会产生一个新的string对象,因此在需要经常更改的字符对象时,建议使用<code>StringBuilder</code>类:</p><p>[范例代码]构造一个查询字符串</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">StringBuilder</span> sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;Select * from Employees where &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;id={0} and &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;title=&#39;{1}&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> cmd<span class="token operator">=</span>sb<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sb<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//在不再需要时清空它</span>

cmd<span class="token operator">=</span>String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span>txtId<span class="token punctuation">.</span>Text<span class="token punctuation">,</span>txtTile<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用实际的值填充格式项</span>
</code></pre></div><p>判断字符串是否为空：</p><p>检查一个字符串是否为空或不是一个基本的编程需要，一个有效的方法是使用string类的Length属性来取代使用null或与&quot;&quot;比较。</p><p>比较字符串：使用String.Equals方法来比较两个字符串</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> str1<span class="token operator">=</span><span class="token string">&quot;yourtext&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">&quot;TestSting&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
　　<span class="token comment">// do something</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_10-判断某个字符串是否在另一个字符串-数组-中" tabindex="-1"><a class="header-anchor" href="#_10-判断某个字符串是否在另一个字符串-数组-中" aria-hidden="true">#</a> 10,判断某个字符串是否在另一个字符串(数组)中</h2><p>需要用到的几个方法</p><p><code>string.Split(char);//按照char进行拆分,返回字符串数组</code><br><code>Array.IndexOf(Array,string)</code>:返回指定string在array中的第一个匹配项的下标<br><code>Array.LastIndexOf(Array,string)</code>:返回指定string在array中的最后一个匹配项的下标 如果没有匹配项,则返回-1</p><p>[示例代码]:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> strNum<span class="token operator">=</span><span class="token string">&quot;001,003,005,008&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> strArray<span class="token operator">=</span>strNum<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按逗号拆分,拆分字符为char或char数组</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span>strArray<span class="token punctuation">,</span><span class="token string">&quot;004&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_11-datagrid与表和列的映射" tabindex="-1"><a class="header-anchor" href="#_11-datagrid与表和列的映射" aria-hidden="true">#</a> 11,DataGrid与表和列的映射</h2><p>从数据库读取数据绑定到DataGrid后,DataGrid的列标头通常跟数据库的字段名相同,如果不希望这样,那么可以使用表和列的映射技术:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Common</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> strSql<span class="token operator">=</span><span class="token string">&quot;select * from Department&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">OleDbDataAdapter</span> adapter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OleDbDataAdapter</span><span class="token punctuation">(</span>strSql<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">DataTableMapping</span> dtmDep<span class="token operator">=</span>adapter<span class="token punctuation">.</span>TableMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Department&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;部门表&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

dtmDep<span class="token punctuation">.</span>ColumnMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Dep_Id&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;部门编号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dtmDep<span class="token punctuation">.</span>ColumnMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Dep_Name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;部门名称&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">DataSet</span> ds<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

adapter<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>ds<span class="token punctuation">,</span><span class="token string">&quot;Department&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此处不能用&quot;部门表&quot;</span>
</code></pre></div><p>响应单击事件(datagrid的CurrentCellChanged事件)</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>DataGridName<span class="token punctuation">.</span>CurrentCell<span class="token punctuation">.</span>ColumnNumber<span class="token punctuation">;</span><span class="token comment">//所单击列的下标,从0开始,下同</span>
DataGridName<span class="token punctuation">.</span>CurrentCell<span class="token punctuation">.</span>RowNumber<span class="token punctuation">;</span><span class="token comment">//所单击行的下标</span>
DataGridName<span class="token punctuation">[</span>DataGridName<span class="token punctuation">.</span>CurrentCell<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//所单击行和列的值</span>

DataGridName<span class="token punctuation">[</span>DataGridName<span class="token punctuation">.</span>CurrentRowIndex<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得单击行第n+1列的值</span>
</code></pre></div><h2 id="_12-动态添加菜单并为其添加响应事件" tabindex="-1"><a class="header-anchor" href="#_12-动态添加菜单并为其添加响应事件" aria-hidden="true">#</a> 12,动态添加菜单并为其添加响应事件</h2><p>添加顶级菜单:</p><p><code>MainMenuName.MenuItems.Add(&quot;顶级菜单一&quot;);//每添加一个将自动排在后面</code></p><p>添加次级菜单:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">MenuItem</span> mniItemN<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;MenuItemText&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">MenuItem</span> mniItemN<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;MenuItemText&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>EventDealName<span class="token punctuation">)</span><span class="token punctuation">)</span>
MainMenuName<span class="token punctuation">.</span>MenuItems<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>MenuItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>mniItemN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//n为要添加到的顶级菜单下标,从0开始</span>
</code></pre></div><p>创建好菜单后添加事件:</p><p><code>mniItemN.Click+=new EventHandler(EventDealName);</code></p><p>也可以在添加菜单的同时添加事件:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">MenuItem</span> mniItemN<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;MenuItemText&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>EventDealName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
MainMenuName<span class="token punctuation">.</span>MenuItems<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>MenuItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>mniItemN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_13-正则表达式简单应用-匹配-替换-拆分" tabindex="-1"><a class="header-anchor" href="#_13-正则表达式简单应用-匹配-替换-拆分" aria-hidden="true">#</a> 13,正则表达式简单应用(匹配,替换,拆分)</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>RegularExpressions</span><span class="token punctuation">;</span>

<span class="token comment">//匹配的例子</span>
<span class="token class-name"><span class="token keyword">string</span></span> strRegexText<span class="token operator">=</span><span class="token string">&quot;你的号码是:020-32234102&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> filter<span class="token operator">=</span><span class="token string">@&quot;\\d{3}-\\d*&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">Regex</span> regex<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Regex</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Match</span> match<span class="token operator">=</span>regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>strRegexText<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">.</span>Success<span class="token punctuation">)</span> <span class="token comment">//判断是否有匹配项</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;匹配项的长度:&quot;</span><span class="token operator">+</span>match<span class="token punctuation">.</span>Length<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;匹配项的字符串:&quot;</span><span class="token operator">+</span>match<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;匹配项在原字符串中的第一个字符下标:&quot;</span><span class="token operator">+</span>match<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//替换的例子</span>
<span class="token class-name"><span class="token keyword">string</span></span> replacedText<span class="token operator">=</span>regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>strRegexText<span class="token punctuation">,</span><span class="token string">&quot;020-88888888&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>replacedText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出&quot;你的号码是:020-88888888&quot;</span>

<span class="token comment">//拆分的例子</span>
<span class="token class-name"><span class="token keyword">string</span></span> strSplitText<span class="token operator">=</span><span class="token string">&quot;甲020-32654已020-35648丙020-365984&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s <span class="token keyword">in</span> regex<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>strSplitText<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//依次输出&quot;甲乙丙&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_13-多线程简单编程" tabindex="-1"><a class="header-anchor" href="#_13-多线程简单编程" aria-hidden="true">#</a> 13,多线程简单编程</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>

<span class="token class-name">Thread</span> ThreadTest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>ThreadCompute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ThreadTest<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用另一个线程运行方法ThreadCompute</span>

ThreadCompute方法原型<span class="token punctuation">:</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ThreadCompute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><h2 id="_14-操作注册表" tabindex="-1"><a class="header-anchor" href="#_14-操作注册表" aria-hidden="true">#</a> 14,操作注册表</h2><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Win32</span><span class="token punctuation">;</span>
<span class="token comment">//操作注册表</span>
<span class="token class-name">RegistryKey</span> RegKey<span class="token operator">=</span>Registry<span class="token punctuation">.</span>LocalMachine<span class="token punctuation">.</span><span class="token function">OpenSubKey</span><span class="token punctuation">(</span><span class="token string">&quot;Software&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//添加一个子键并给他添加键值对</span>
<span class="token class-name">RegistryKey</span> NewKey<span class="token operator">=</span>RegKey<span class="token punctuation">.</span><span class="token function">CreateSubKey</span><span class="token punctuation">(</span><span class="token string">&quot;regNewKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
NewKey<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token string">&quot;KeyName1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;KeyValue1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
NewKey<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token string">&quot;KeyName2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;KeyValue2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获取新添加的值</span>
MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>NewKey<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">&quot;KeyName1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//删除一个键值（对）</span>
NewKey<span class="token punctuation">.</span><span class="token function">DeleteValue</span><span class="token punctuation">(</span><span class="token string">&quot;KeyName1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//删除整个子键</span>
RegKey<span class="token punctuation">.</span><span class="token function">DeleteSubKey</span><span class="token punctuation">(</span><span class="token string">&quot;regNewKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,77),e=[o];function c(u,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","skill15.html.vue"]]);export{k as default};
