import{_ as e,o as a,c as o,d as s}from"./app-e911b801.js";const t="/steven-blogs/assets/cspcls9_1-44204a48.png",n="/steven-blogs/assets/cspcls9_2-3e2a15c7.png",l={},i=s(`<h1 id="天下第七c-学习笔记" tabindex="-1"><a class="header-anchor" href="#天下第七c-学习笔记" aria-hidden="true">#</a> 天下第七C#学习笔记</h1><ul><li><a href="#csp_1">天下第七C#学习笔记(1)</a></li><li><a href="#csp_2">天下第七C#学习笔记(2)</a></li><li><a href="#csp_3">天下第七C#学习笔记(3)</a></li></ul><h2 id="天下第七c-学习笔记-1" tabindex="-1"><a class="header-anchor" href="#天下第七c-学习笔记-1" aria-hidden="true">#</a> <a id="csp_1">天下第七C#学习笔记(1)</a></h2><p>www.chinacs.net 2002-5-14 中文C#技术站 write by cash(天下第七) 2002.01.20 版权所有，翻录不究 cashcao@msn.com</p><h3 id="选择" tabindex="-1"><a class="header-anchor" href="#选择" aria-hidden="true">#</a> 选择</h3><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>我身上携带着精神、信仰、灵魂
思想、欲望、怪癖、邪念、狐臭
它们寄生于我身体的家
我必须平等对待我的每一位客人
-----------伊沙：《原则》

我的名字是cash，所以我很功利主义；
我的星像是Leo，所以我很大男人主义；
我的语言是C#，所以我有点儿拿不定主义。
</code></pre></div><p>/* 你能看得出来，这不是一篇正规的技术文章，所以若你不小心从里边读到了一个爱情故事，可不要奇怪。有很多人用程序来表述爱情，在其中我能看到有Money，有Girl，有一些还涉及到Sex,但是我没有找到Love，我始终相信这世上有一种力量直接来自于爱情，到现在仍然相信。*/</p><p>C#（读作C sharp），是Microsoft公司新推出的(?)专为.NET设计的一门语言，号称“C/C++家族中第一种面向组件的语言”。很多人觉得它应该像C或者C++，但事实上它更像是java的一个clone，所以作为入门，读一下清华大学出版社出版的《Java 语言与面向对象程序设计》可能会对你有所帮助。本文假定你具备一切学习此语言所需的知识，没有也不要紧，我会在文中尽量列出相关的link，鉴于互联网瞬息万变的特点，若某一链接不可用，请自行至Google查询。</p><p>如前所述，我是一个狮子座男人，一度我认为学习Java会使我看起来与众不同，可是几个月以后我放弃了这个选择，我看了论坛里关于这两种语言孰优孰劣的讨论，最终选择了C#，请不要问我为何做出这样的选择，很多人认为中文是世界上最美丽的语言，可是华人世界以外有谁在讲汉语？ 另外我发现论坛上学习Java的人都非常的有个性，当有人问起学习哪种语言更好时，他会打出几百个“JAVA”来，填满整个屏幕，也不说是为了什么。我觉得这样做未免有些太霸道了，如果你说这叫偏执狂我也不反对，虽然我是狮子座，可也不想被人这样看。</p><p>在C#刚刚推出的时候，大多数的程序员都不免吼上两句——不是因为高兴，而是因为又多了一种语言。他们觉得现在的语言太多了，没有必要再多出一种来添乱子。但是当他们看完C#的文档后又开始高兴起来，因为C#是如此简单：事实上，简单正是C#最大的特点。除此之外，它还具有现代、面向对象、类型安全、版本控制、兼容、灵活等特点。详细介绍请参阅rainbow（一个长着胡子的彩虹）翻译的<code>&lt;&lt;展现C#&gt;&gt;</code>，前几章非常的有趣。</p><p>看完了前面几段，我的朋友提出了不同的意见：C#不是Java的Clone,它只是长得有些像Java而已，其实面向对象、中间语言什么的也不是什么新玩意儿，非Sun独创，有文为证：华山论剑：C＃对Java。另外他对我上一集中说Microsoft越来越不要脸也极为生气，因为相比之下，Sun也不怎么样，微软已经将C#提交设在日内瓦的ECMA（European Computer Manufacturers&#39; Association，国际标准化机构欧洲电子计算机工业会）并获得批准。Sun就从来没有将它的Java交给过ECMA，以至于正当Microsoft尽力在Visual J++基础上拓展Java功能，并使之与Windows操作系统紧密结合在一起的时候，Sun公司对Microsoft提出了法律诉讼，控告Microsoft违反了许可证协议中的条款，最终的结果是Microsoft公司不得不停止其Visual J++产品的开发。（Microsoft后来在完全面向.NET框架的开发语言集中加入了Visual J#.NET，算是对Java语言用户的一种照顾。）</p><p>有人说，选择C#意味着选择MS（在中国的程序员当中，这并不是件值得自豪的事。如果你还不能理解这种心情，可以试想一下有人很认真地对你讲他喜欢听毛宁的歌）。事实上，通过ECMA标准的C#可以由任何人在任何平台上设计出它的开发程序。比如Ximian公司的Mono工程，可以使开发者能够编写同时在Windows和Linux上运行的.Net程序，这些程序甚至还可能在其它非Windows的操作系统上运行，比方Unix。这一段时间我正在Linux下试验这个工程，遗憾的是，还没有成功。</p><p>一位师兄对此种比较颇为不屑，他认为只要选一种语言去学就好了，“重要的是你要用它，并且做的比别人好。”这让我想起来一直都很喜欢的那个歌：把你自己该做的那份工作，做得比别人出色。年轻的时候我老是用这句话自勉……</p><p>写到这里我发现这个故事还没有提到桐桐，这篇东西是为她而作。我早在十八个月以前就答应了她，我答应了她很多事，但还没有完成一件，现在我要一件一件的去实现。所以这个故事还应该有个更好的开始。</p><p>2000年6月我大学毕业，从北京回到了石家庄，到一家什么都做的公司上班（做一个网站），最开始制作界面，然后用asp编程，如果你用过asp就会知道，这是个很无聊的工种。在此之前我在一家报社实习，为他们的网站做设计和动画。在那里我认识了桐桐。</p><p>那时候她还在上学。</p><p>&gt;&gt;&gt;未完，待续...</p><p>附：本文有关链接</p><ul><li>展现C#：http://www.csdn.net/Author/Rainbow/</li><li>华山论剑：C＃对Java：http://www.ccidnet.com/html/tech/guide/2001/06/29/58_2482.html</li><li>ECMA：http://www.zdnet.com.cn/developer/tech/story/0,2000081602,20035735-1,00.htm</li><li>ECMA批准C#：http://msdn.microsoft.com/net/ecma/</li><li>Visual J#.NET：http://www.techng.com/content.asp?titleid=3108</li><li>Mono工程：http://www.zdnet.com.cn/developer/news/story/0,2000081594,20032287-1,00.htm</li><li>www.go-mono.com</li></ul><h2 id="天下第七c-学习笔记-2" tabindex="-1"><a class="header-anchor" href="#天下第七c-学习笔记-2" aria-hidden="true">#</a> <a id="csp_2">天下第七C#学习笔记(2)</a></h2><p>www.chinacs.net 2002-5-14 中文C#技术站 written by cash (天下第七) 2002.04.01 版权所有，翻录不究 cashcao@msn.com</p><h3 id="开始" tabindex="-1"><a class="header-anchor" href="#开始" aria-hidden="true">#</a> 开始</h3><p>2000年6月我大学毕业，从北京回到了石家庄，正式开始了我的职业生涯。如前所述，一开始我使用的语言是asp，我一直认为这不能称之为编程，因为asp不是一种编程语言，把它叫做动态网页实现技术可能更好。另外，asp很简单，并且，简单就是它全部的特点－－这使得它很容易就能学会(在后来的工作中，我接触到许多应聘的学生，他们都告诉我自己精通asp语言)。虽然学习起来很简单，但是在使用起来却不得不多费点儿劲儿：我还能记得自己晚上一个人在办公室用VI一步一步调试某一个网页的情景，每当遇到挫折失败的时候，总是想起给桐桐打一个电话，听听她的声音。如你所知，我总是遇到困难。</p><p>现在你能看出来，我不是高手，只是一个低手...</p><p>2000年6月我大学毕业，从北京回到了石家庄，同一时间（美国西部时间6月22日上午），微软公司在位于美国西雅图郊外的总部内邀请新闻记者、新闻分析家等约400人，举行了新闻发布会“Forum2000”，宣布正式推出.Net计划。这个计划中包括了新的网络计算平台(.Net Framework)、新的语言(C#)、新的开发工具(Visual Studio.Net)以及asp的下一个版本ASP.NET，后者最开始被称为ASP+。那时候我学习的主要兴趣就在ASP.NET上，并且通过这个窗口开始了解Microsoft.Net的各个方面。</p><p>ASP.NET仍然不能称之为一种编程语言，但是现在可以把它看作是一个创建、管理、部署Web应用程序的平台。可以使用任何.Net语言在这个平台上开发互联网应用程序，这其中当然包括C#。它们之间的关系可以从下图中看出：</p><p><img src="`+t+'" alt="csharp"></p><p>这就是著名的.Net 平台结构图，从这个图上可以看到，ASP.NET、Windows Forms和VS.Net都不过是.Net开发平台的一部分，用于.Net应用程序的开发及展示。.Net 平台的核心技术为：通用语言运行时（CLR：Common Language Runtime）、基类库(Base Class Library)、.Net语言及Visual Studio.Net。</p><p>从这个图上也可以看出，.Net Framework是架构在Windows平台上的一个虚拟的运行平台，你可以想象将最下层的Windows换作其它的操作系统，比如说Linux，一样可以实现使用符合了CLS(Common Language Specification，通用语言规范)的.Net语言(VB.Net、C#、JScript.Net等)来创建ASP.NET或Windows Forms(可能会叫做Linux Forms)应用程序的功能，这其实就是我们前面介绍的Mono计划所要实现的功能。所以可以这么认为，理论上，C#是一种可以跨平台的语言，这很像Java，另一个比较像Java的地方是，C#也是一种(特殊意义上的)解释性的语言。同Java一样，C#编写的程序代码也是先通过C#编译器编译为一种特殊的字节代码(中间语言，Microsoft Intermediate Language，MSIL)，运行的时候再经由特定的编译器(JIT编译器，Just In Time，JITer)编译为机器代码以供操作系统执行。</p><p>不仅是C#语言，所有.Net语言(将会包括我们常用的几十种现代的编程语言)都可以编写面向CLR的程序代码，这种代码在.Net中被称为托管代码(Managed Code)，所有的Managed Code都直接运行在CLR上，具有与平台无关的特性。</p><p>解释性的语言很安全，并且可以通过它的运行平台为其赋予更多的功能，比如自动内存管理、异常处理等。事实上，C#语言的许多特点都是由CLR提供的，下面的CLR结构图说明了这一点。</p><p><img src="'+n+`" alt="csharp_1"></p><p>可以看到，类型安全(Type Checker)、垃圾回收(Garbage Collector)、异常处理(Exception Manager)、向下兼容(COM Marshaler)、多线程支持(Thread Support)这些C#的特点都是由CLR来提供的。CLR最早被称为下一代Windows服务运行时(NGWS Runtime)，是直接建立在操作系统层上的一个虚拟的运行环境，主要的功能是管理代码的运行。在.Net 平台结构图中，CLR的上面是.Net的基类库（Base Class Library，BCL），这组基类库包括了从基本输入输出到数据访问等各方面，提供了一个统一的面向对象的、层次化的、可扩展的编程接口。从.Net 平台结构图中也可以看到，基类库可以被各种语言调用和扩展，也就是说，不管是C#、VB.NET还是VC++.NET，都可以自由地调用.Net的基类库。事实上， C#并没有属于自己的类库，它所使用的编程接口就是.Net提供的基类库。所以，在决定使用C#时，真正需要费工夫学习的其实是.NET框架的基类库：C#自身只有区区77个关键词，而且其语法对许多程序员来说都是他们非常熟悉的。BCL则相反，它包含了超过4500个以上的类和无数的方法、属性，在你的C# 程序中随时都可能会用到它来完成自己的任务。</p><p>很多人都思考过应如何开始学习一种新的语言，对于一个有经验的编程人员来讲，这确非难事。但是对于一个对编写代码一无所知的人而言，如果你是以C#开始你的编程之旅的，数目繁多的概念及新名词可能会令你有些不知所措。这时候请注意你的学习顺序，任何一种编程语言的学习都是按照运行平台、语法、基类库直至各方面的应用这一顺序来进行的，但是在实际的学习中，它们之间并不是孤立的。推荐的方法是：对运行平台和语法有了一个整体的认识后，在应用中学习各种基类库的用法。鉴于C#这一语言的特殊性，全面了解它的运行平台(.Net　Framework)必会使你的学习事半功倍。所以请记住上面提到的两个图，在以后的学习中，虽然可能不会明确的涉及到它们，但是在整个C#的学习过程中，它们却是无处不在的。</p><p>还有一个很重要的概念需要你明白，这就是公共语言架构(Common Language Infrastructure ，CLI)。CLI是CLR的一个子集，也就是.NET中最终对编译成MSIL代码的应用程序的运行环境进行管理的那一部分。在CLR结构图中CLI位于下半部分，主要包括类加载器(Class Loader)、实时编译器(IL To Native Compilers)和一个运行时环境的垃圾收集器(Garbage Collector)。CLI是.Net和CLR的灵魂，CLI为IL代码提供运行的环境，你可以将使用任何语言编写的代码通过其特定的编译器转换为MSIL代码之后运行其上，甚至还可以自己写MSIL代码在CLI上面运行。如你所知，欧洲计算机制造商协会（ECMA）已经于2001年10月13日批准C#语言规范（ECMA-334）成为一种新诞生的计算机产业标准。同时国际标准组织ISO也同意该标准进入该组织的审批阶段。并且，作为.Net与CLR的核心部分，CLI与C#也同时获得了ECMA的批准（ECMA-335）。拥有了C#与CLI这两项标准，你可以自己写出能够运行于任何操作系统上的.Net平台(只要你愿意)。如前所述，著名的Mono项目就是这么干的，Mono项目包括三个核心的部分：一个C#语言的编译器，一个CLI和一个类库。在Java的世界中，这项工作是由SUN公司完成的，SUN针对不同的操作系统开发出相应的Java虚拟机以便让一个由Java开发的应用程序运行在不同的操作系统上，但是迄今为止还没听说过微软有这方面打算(为用户提供非Windows系统的.Net平台)。</p><p>2000年的6月还有很多事情发生，2000年的6月我在学校做毕设，晚上就跑到系试验室看欧锦赛，我很喜欢的坎普君(Bergkamp)大放异彩，帮助荷兰队6比1大胜南斯拉夫，米哈伊洛维奇 (Mihajlovic)在比赛最后莫名的笑容永远留在了我的心中。说实话，那时候只顾着看EURO2000,可没管什么.Net、.Not。另外，离别的愁绪围绕在每个人的周围，广播里开始反反复复播放一些古老的歌曲，不知道为什么，恋曲1980却是那时候的最爱。</p><p>后来，我们都毕了业。如你所知，我离开了北京。</p><p>&gt;&gt;&gt;未完，待续...</p><h2 id="天下第七c-学习笔记-3" tabindex="-1"><a class="header-anchor" href="#天下第七c-学习笔记-3" aria-hidden="true">#</a> <a id="csp_3">天下第七C#学习笔记(3)</a></h2><p>www.chinacs.net 2002-5-14 中文C#技术站 written by cash (天下第七) 2002.04.07 版权所有，翻录不究 cashcao@msn.com</p><h3 id="约定" tabindex="-1"><a class="header-anchor" href="#约定" aria-hidden="true">#</a> 约定</h3><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//一个典型的用C#写就的HelloWorld程序</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World !&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我忘记自己第一次用C#向世界问好是在什么时候了，不过可以肯定我已经打过招呼了，那时候用的是beta1版。现在你可以到http://msdn.microsoft.com/downloads/default.asp?url=/downloads/sample.asp?url=/msdn-files/027/000/976/msdncompositedoc.xml去下载.Net Framework Software Development Kit (SDK)的正式版，其中包括了前面提到的.NET Framework， 以及书写、编译、测试、开发 .NET Framework 应用程序所需要的一切——文档、例子、命令行工具和编译器。安装之后就可以开发和运行C#程序了，不过一般的建议是：一定要看.Net Framework SDK中所带的文档与例子，如果能照着例子再写一遍那就再好不过了。 当我第一次看到C#代码的时候，同样认为它很像Java，一个形象的比喻是：C#和Java是一对双胞胎，从语法的角度来讲，它们共同的父亲当然非C++莫属(请注意，不是VC++)。</p><p>对于一个学过Java语言的人来说(比如说在下)，要理解这段代码实在是太容易了：</p><ol><li>第一行当然是注释了，C#支持两种注释方法，以&quot;<code>//</code>&quot;开始的单行注释和以&quot;<code>/*</code>&quot;、&quot;<code>*/</code>&quot;配对使用的多行注释。</li><li>第二行(using System)导入了System这个包(在C#中被称之为名字空间，Namespace)，可以让我们方便的调用Microsoft.Net基类库System中的所有类，在此例中使用了System名字空间中的&quot;Console&quot;类，用于在控制台窗口输出程序运行结果。如前所述，C#并没有内置的输入输出语句，所有需实现的功能都完全来自于.Net基类库。这一句的作用就是告诉编译器去哪里寻找Console类以便调用。</li><li>接下来声明了一个类HelloWorld，这个类中有一个特殊的方法Main()，每个可执行文件都需要有一个入口点，在C#中，这个入口点就是Main()方法，此方法将在程序启动时被调用。在这个方法中，Console是在命名空间System下的一个类，它表示的是控制台。这里调用其静态方法WriteLine()。如同C++一样，静态方法允许我们直接作用于类而非实例对象。WriteLine()函数接受字符串类型的参数&quot;Hello World !&quot;，并把它送入控制台显示。如前所述，C#没有自己的类库，它直接获取Microsoft.NET系统类库。在这里正是通过获取Microsoft.NET系统类库中的System.Console.WriteLine()来完成我们想要的控制台输出操作。</li></ol><p>现在使用记事本来编写这段代码，并将它的文件名保存为HelloWorld.cs，其中&quot;.cs&quot;是C#源代码文件的扩展名。然后在配置好C#编译器的命令行环境里键入&quot;csc HelloWorld.cs&quot;编译文件。可以看到编译输出文件HelloWorld.exe。键入HelloWorld执行这个文件可得到下面的输出：</p><p><code>Hello World !</code></p><p>这就是第一个C#的程序，我们使用csc.exe来编译它，对于这个C#编译器，有如下说明：</p><ol><li>它是随.Net Framework SDK免费发布的，可以在DOS命令行被调用</li><li>它的使用方法如下：<br><code>csc SourceFile.cs /out:TargetFile.exe</code><br> 如果不使用输出参数指定目标文件名，则默认输出为源文件名</li><li>一般情况下，它在系统文件夹(Windows或WinNT)下的Microsoft.NET\\Framework\\v1.0.3705文件夹内</li><li>如果你安装了VS.Net，从Visual Studio.NET Tools项目组中可以激活Visual Studio.NET　Command Prompt窗口，这是一个配置好C#编译器的命令行环境</li><li>使用csc.exe编译后的C#程序并不是机器代码(尽管拥有.exe的后缀名)。如前所述，C#程序只是被编译成了MSIL代码。</li></ol><p>C#编译器(csc.exe)编译后的文件并不是一个严格意义上的可执行文件(并不包含机器代码)，而是一个PE（portable executable）格式的文件，虽然它同样拥有.exe的后缀名。在这个PE文件中也不仅仅只包含中间语言，在其中还包含有元数据(Metadata)和一个由编译器添加的目标平台的标准可执行文件头。</p><p>中间语言，确切地说，应该称为微软中间语言(Microsoft Intermediate Language，MSIL)，是由微软定义的一种界于源代码与机器码之间的一种语言。在CLR中，它首先会由特定的语言编译器将其包装成exe格式的伪代码(P代码)。再由特定的编译器将其转换为本地代码执行。对于微软中间语言，一个形象的比喻是：如果CLR是操作系统的话，那么微软中间语言就是.Net平台上的ASM汇编语言。它比大多数 CPU 机器语言更为高级，比如它可以理解对象类型，并具有创建和初始化对象、调用关于对象的虚拟方法以及直接操作处理数组元素的指令。它甚至还具有发现和捕获异常情况用于错误处理的指令。</p><p>元数据(Metadata)和MSIL共同存在于编译好的程序文件之中，描述了此程序包含的类型的定义、各种类型的签名及其它一些数据，相当于以前的类型库(Type Library)，同时也记载了此程序所引用到的其它外部类。元数据的主要作用是将与代码有关的更多的信息提供给CLR。基本上，元数据用于如下各项任务：用于表示CLR用途的信息，如定位和装载类、内存中这些类的实例、解决调用、翻译IL为原始码、加强安全并设置运行时上下文边界。</p><p>一个由C#语言写就的源码文件在CLR环境中执行的过程是这样的：首先由C#编译器编译成包含了中间语言和元数据的PE文件，当我们在系统中调用这个文件时，CLR会启动一个编译器再将这个PE文件包含的MSIL代码转换成为托管的本地代码。转换MSIL代码为本地码的这个编译器就叫做JIT编译器(Just In Time，JITer)。请注意它并不是前面我们用到的C#编译器。 现在让我们看看JIT编译器是如何工作的：当PE文件被调用时，JIE编译器将其分解为MSIL和元数据，这时候MSIL并不直接让.Net去调用本地的系统接口，而是指定.Net系统去编译连接那些需要的CLR　DLL，编译出百分之百的本地代码。整个的过程如下： 当一个类型被装载时，装载器创建一个存根(stub)，并使它与类型的每一个方法相连接。当一个方法第一次被调用时，存根把控制交给JITer。JITer把MSIL编译为本地代码，并且把存根指针指向缓冲本地代码。已经被JITer编译的方法随后就直接调用已经产生的本地代码，减少了JITer编译和执行代码的时间。可以看到，JITer并不会一次性的将所有的MSIL都编译为本地代码，而是在我们需要时才即时编译，也就是说，有些代码可能从来都没有被编译过。很明显这样做的好处是既保证了运行期的安全性，又不会损失太多的效率。</p><p>这就是一个C#程序执行时的步骤。整个过程是这样的：</p><ol><li>由C#编译器将源代码编译为中间语言</li><li>装入托管代码，这包括解决内存中的名字、表层类(laying out classes )，并且创建JIT编译所必需的存根。通过执行经常性校验，包括加强一些访问规则，类装载器同样也增强了安全性</li><li>用JITer将 IL转换成原始代码</li><li>装入元数据、校验类型安全和方法的完整性</li><li>垃圾收集(GC)和异常处理</li><li>描绘和查错服务</li><li>管理线程和上下文以及远程管理。</li></ol><p>不必全部理解这些概念，在以后的学习中将会一一的体会到它们的精彩，现在你需要做的(如果你还没这么干过的话)，是找到<code>ildasm.exe</code>这个文件(一般情况下，它会和<code>csc.exe</code>在同一文件夹中)。顾名思义，这是一个MSIL的反汇编程序(.Net Framework IL Disassembler)，在命令行窗口下输入ildasm helloworld.exe /out=helloworld.il就会得到两个文件：helloworld.il和helloworld.res。前者包括了反编译出来的元数据和MSIL代码，后者则是提取的资源文件。用记事本打开helloworld.il文件，可以看到它定义并实现了一个继承自System.Object 的HelloWorld类及两个函数：Main()和.ctor()。其中.ctor()是HelloWorld类的构造函数。在这个文件中还包括元数据和其它有关的信息。如果你觉得这样不够直观的话，可以在命令行窗口键入ildasm helloworld.exe，这样就可以启动ILDASM 窗口并向我们展示出反编译后的helloworld.exe文件。</p><p>请仔细将这些代码看上几遍，现在理解全部这些内容并不重要，但是希望你也能看一下文件中的元数据，这其中包含所有 Runtime 和编译器需要的有关程序集及其模块、类型和成员（如方法）的信息。</p><p>行文至此，我想谈一下学习。如你所知，在我们所处的环境中，学习总意味着是一个痛苦的过程，学习一种新知识好像总是为了自己的某种需求，我并不认为这样有什么不对，但我总觉着，除了拿到高薪和受人尊敬外，学习还应该带给我们更多的快乐。有些知识我们现在也许用不着，比如前面谈到的一些内容，但是我们了解了，就是一件值得高兴的事。</p><p>智慧本身就是好的，有一天我们都会死去，追求智慧的道路还会有人在走着。死掉以后的事我看不到。但在我活着的时候，想到这件事，心里就高兴。 ——王小波</p><p>今天是2002年4月7号，再过三天就是王小波的忌日了，不知道有多少人还会记得这个日子，还会记得这个人。本文的最后，我向大家推荐小波的作品——每一个心智成熟的人都应该读一读小波的文字。在他的杂文随笔集《沉默的大多数》中有一句话谈到了他作为程序员的一面：</p><p>“今晚不把这段Ｃ++调通，老子就不睡了！”</p><p>&gt;&gt;&gt;未完，待续...</p>`,62),c=[i];function p(r,d){return a(),o("div",null,c)}const u=e(l,[["render",p],["__file","cspcls9.html.vue"]]);export{u as default};
