import{_ as n,o as s,c as a,a as t}from"./app-a2b6e588.js";const p={},o=t(`<h1 id="visual-c-中的mdi编程" tabindex="-1"><a class="header-anchor" href="#visual-c-中的mdi编程" aria-hidden="true">#</a> Visual C#中的MDI编程</h1><blockquote><p>源作者：追风 人气：3090</p></blockquote><p>多文档界面就是所谓的MDI，他是从Windows 2.0下的Microsoft Excel电子表格程序开始引入的，这是因为Excel电子表格用户有时需要同时操作多份表格，MDI正好为这种操作多表格提供了很大的方便，于是就产生了MDI程序。在视窗系统3.1版本中，MDI得到了更大范围的应用。其中系统中的程序管理器和文件管理器都是MDI程序。</p><p>Visual C#是微软公司推出的下一代主流程序开发语言，他也是一种功能十分强大的程序设计语言，正在受到越来越多的编程人员的喜欢。在Visual C#中，提供了为实现MDI程序设计的很多功能。本文就是通过一个具体的例子来详细的介绍在Visual C#中的MDI编程。</p><h2 id="一-程序设计及运行的环境" tabindex="-1"><a class="header-anchor" href="#一-程序设计及运行的环境" aria-hidden="true">#</a> 一 程序设计及运行的环境</h2><p>（1）视窗2000服务器版<br> （2）.Net FrameWork SDK Beta 2版</p><h2 id="二-程序设计的思路、主要步骤和实现方法" tabindex="-1"><a class="header-anchor" href="#二-程序设计的思路、主要步骤和实现方法" aria-hidden="true">#</a> 二 程序设计的思路、主要步骤和实现方法</h2><p>MDI编程主要就是要在主窗体中能够新建一个MDI窗体，并且能够对主窗体中的所有MDI窗体实现层叠、水平平铺和垂直平铺。虽然这些操作比较基本，但却是程序设计中的要点和重点。本文就按照上述功能的顺序来一一介绍。</p><p>（1）首先要设定主窗体是一个MDI窗体的容器，因为只有如此才能够在此主窗体上面添加MDI窗体，从而实现对MDI编程，具体实现语句如下：</p><p><code>this.IsMdiContainer = true;</code></p><p>（2）在主窗体上面新建一个MDI窗体。在程序中，新建一个MDI窗体的命令是通过一个菜单的事件来实现的。在处理新建一个MDI窗体事件中，关键是要设定此MDI窗体的父窗体。其实MDI窗体和别的窗体没有什么不同，不同点就在MDI窗体有上一级窗体，即父窗体，而其他窗体是没有的，具体实现语句如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">New_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span><span class="token comment">//这是一个菜单的事件</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Form</span> frmTemp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//新建一个窗体</span>
    frmTemp<span class="token punctuation">.</span>MdiParent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token comment">//定义此窗体的父窗体，从而此窗体成为一个MDI窗体</span>
    frmTemp<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;窗体0&quot;</span> <span class="token operator">+</span> FormCount<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设定MDI窗体的标题</span>
    FormCount<span class="token operator">++</span><span class="token punctuation">;</span>
    frmTemp<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把此MDI窗体显示出来</span>
<span class="token punctuation">}</span>
</code></pre></div><p>（3）实现对MDI窗体的层叠：</p><p>对于在主窗体中实现对MDI窗体的层叠操作，在主程序中，是通过一个方法来实现的，这个方法就是LayoutMdi，他所带的参数是MdiLayout.Cascade，具体实现语句如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Cascade_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
<span class="token comment">// 实现对主窗体中的MDI窗体的层叠操作</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">LayoutMdi</span><span class="token punctuation">(</span>MdiLayout<span class="token punctuation">.</span>Cascade<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>（4）实现对MDI窗体的水平平铺：</p><p>要在主窗体实现MDI窗体水平平铺，也是通过LayoutMdi方法，此时所带的参数是MdiLayout.TileHorizontal，具体实现语句如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TileH_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
<span class="token comment">// 实现对主窗体中的MDI窗体的水平平铺操作</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">LayoutMdi</span><span class="token punctuation">(</span>MdiLayout<span class="token punctuation">.</span>TileHorizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>（5）实现对MDI窗体的垂直平铺：</p><p>要在主窗体实现MDI窗体垂直平铺，也是通过LayoutMdi方法，此时所带的参数是MdiLayout.TileVertical，具体实现语句如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TileV_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
<span class="token comment">// 实现对主窗体中的MDI窗体的垂直平铺操作</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">LayoutMdi</span><span class="token punctuation">(</span>MdiLayout<span class="token punctuation">.</span>TileVertical<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>（6）在有些MDI程序，当新建一个MDI窗体以后，往往会在某些菜单项的下面生产一个以此MDI窗体的名称为名称的子菜单项。在其他语言中要实现这种功能，可能就要在某些主菜单项下动态的加入子菜单了。但是在Visual C#中实现此种功能，就显得比较简单的，只有在要加入的主菜单项下加入下面一句程序就可以了： <code>WindowMenu.MdiList = true;</code> 本程序中，是在&quot;窗口&quot;主菜单项下面加入MDI窗体的子菜单项的。加入此语句后，程序运行</p><h2 id="三-程序源代码-mdi-cs-及编译方法" tabindex="-1"><a class="header-anchor" href="#三-程序源代码-mdi-cs-及编译方法" aria-hidden="true">#</a> 三. 程序源代码（mdi.cs）及编译方法</h2><p>通过对程序设计中的难点介绍以后，就可以比较容易得到实现对上述MDI窗体处理的源程序代码（mdi.cs），具体如下：</p><p>mdi.cs源程序代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token comment">// 导入在程序中用到的名称空间</span>
<span class="token keyword">class</span> <span class="token class-name">MDIDemo</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> FormCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//定义此常量是为了统计MDI窗体数目，</span>
    <span class="token class-name">MainMenu</span> mnuMain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MainMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MenuItem</span> FileMenu<span class="token punctuation">;</span>
    <span class="token class-name">MenuItem</span> NewMenu<span class="token punctuation">;</span>
    <span class="token class-name">MenuItem</span> ExitMenu<span class="token punctuation">;</span>
    <span class="token class-name">MenuItem</span> WindowMenu<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MDIDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>IsMdiContainer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;MDI演示程序&quot;</span><span class="token punctuation">;</span>
        FileMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileMenu<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;文件&quot;</span><span class="token punctuation">;</span>
        WindowMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        WindowMenu<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;窗口(&amp;W)&quot;</span><span class="token punctuation">;</span>
        WindowMenu<span class="token punctuation">.</span>MenuItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;窗体层叠(&amp;C)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>Cascade_Click<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        WindowMenu<span class="token punctuation">.</span>MenuItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;水平平铺(&amp;H)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>TileH_Click<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        WindowMenu<span class="token punctuation">.</span>MenuItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;垂直平铺(&amp;V)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>TileV_Click<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        WindowMenu<span class="token punctuation">.</span>MdiList <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">//这一句比较重要，有了这一句就可以实现在新建一个MDI窗体后会在此主菜单项下显示存在的MDI窗体菜单项</span>
        NewMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        NewMenu<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;新建窗体(&amp;N)&quot;</span><span class="token punctuation">;</span>
        NewMenu<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>New_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ExitMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ExitMenu<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;退出(&amp;X)&quot;</span><span class="token punctuation">;</span>
        ExitMenu<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>Exit_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileMenu<span class="token punctuation">.</span>MenuItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>NewMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileMenu<span class="token punctuation">.</span>MenuItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileMenu<span class="token punctuation">.</span>MenuItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ExitMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mnuMain<span class="token punctuation">.</span>MenuItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>FileMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mnuMain<span class="token punctuation">.</span>MenuItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>WindowMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Menu <span class="token operator">=</span> mnuMain<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Cascade_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token comment">// 实现对主窗体中的MDI窗体的层叠操作</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">LayoutMdi</span><span class="token punctuation">(</span>MdiLayout<span class="token punctuation">.</span>Cascade<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TileH_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token comment">// 实现对主窗体中的MDI窗体的水平平铺操作</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">LayoutMdi</span><span class="token punctuation">(</span>MdiLayout<span class="token punctuation">.</span>TileHorizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TileV_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token comment">// 实现对主窗体中的MDI窗体的垂直平铺操作</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">LayoutMdi</span><span class="token punctuation">(</span>MdiLayout<span class="token punctuation">.</span>TileVertical<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">New_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Form</span> frmTemp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//新建一个窗体</span>
        frmTemp<span class="token punctuation">.</span>MdiParent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token comment">//定义此窗体的父窗体，从而此窗体成为一个MDI窗体</span>
        frmTemp<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;窗体0&quot;</span> <span class="token operator">+</span> FormCount<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设定MDI窗体的标题</span>
        FormCount<span class="token operator">++</span><span class="token punctuation">;</span>
        frmTemp<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//把此MDI窗体显示出来</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Exit_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Application<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MDIDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>再经过以下编译命令编译过以后，就可以得到执行程序：</p><p><code>csc /t:winexe /r:system.dll /r:system.windows.forms.dll /r:system.drawing.dll mdi.cs</code></p><h2 id="四-总结" tabindex="-1"><a class="header-anchor" href="#四-总结" aria-hidden="true">#</a> 四. 总结</h2><p>本文主要是介绍如何用Visual C#来实现对MDI窗体的编程。即：新建MDI窗体、MDI窗体层叠、MDI窗体水平平铺、MDI窗体的垂直平铺。通过上述介绍，可见，在Visual C#中处理MDI还是相当比较简单的。</p>`,30),e=[o];function c(u,l){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","mm2.html.vue"]]);export{i as default};
