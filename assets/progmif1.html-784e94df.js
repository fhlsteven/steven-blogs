import{_ as n,o as s,c as a,a as p}from"./app-d9da1b6d.js";const t="/steven-blogs/assets/progmif1_1-1e9738fd.png",o="/steven-blogs/assets/progmif1_2-0087376c.png",e="/steven-blogs/assets/progmif1_3-84e939e1.png",c="/steven-blogs/assets/progmif1_4-23a1bf80.png",l={},u=p('<h1 id="使用visual-c-制作可伸缩个性化窗体" tabindex="-1"><a class="header-anchor" href="#使用visual-c-制作可伸缩个性化窗体" aria-hidden="true">#</a> 使用Visual C#制作可伸缩个性化窗体</h1><blockquote><p>http://www.uncj.net/bbs/index.asp 2003-1-7 ;程序员大联盟</p></blockquote><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>谁都希望自己的应用程序能让人留下一个深刻的印象，让自己的程序窗体有一件与众不同的&quot;外衣&quot;是一个好办法。试想：在一大堆的普通窗口中突然跳出一个很酷的界面，一定能让人眼睛一亮进而产生兴趣的。</p><p>在VB，VC中如何定制可伸缩个性化窗口早就不是什么秘密了，已经有了大量相关的文章进行介绍，无非都是如何调用系统API之类的方法，但是在.Net中调用API却相对比较麻烦，所以使用.Net制作个性化窗体的文章也有一些，一般都是使用透明背景加图片的方式，所以不能移动或者不能任意放大缩小窗体。那有没有不需要调用系统API的方法来实现可伸缩的个性化窗体的办法呢？当然有，.Net Framework提供了一套非常强大的系统类库，我们下面就要做一个使用&quot;纯&quot;.Net打造的可伸缩个性化窗体。</p><h2 id="制作过程" tabindex="-1"><a class="header-anchor" href="#制作过程" aria-hidden="true">#</a> 制作过程</h2><p>我们需要将窗体所有的&quot;皮肤&quot;全部换成我们自己定义的，包括标题栏，边框和系统按纽等，所以我们首先需要定做一套自己的皮肤图形文件。因为窗体是可伸缩的，所以我们不能简单的取一整幅图片来作为窗体皮肤，而是根据需要先将图片切割为不同的部分，一般来说，有以下图示几大部分（红线为切割线）：</p><p><img src="'+t+'" alt="img_1"></p><p>根据方位，将图片各部分命名为：Bottom_Left，Bottom_Middle，Bottom_Right，Middle_Left，Middle_Right，Top_Left，Top_Middle，Top_Right，SysButton_Min，SysButton_Max，SysButton_Close，SysButton_Restore等。注意，有些图片是可以伸缩的地方，比如Middle_Left，Bottom_Middle等处的图片可以只是一小块，以后需要进行重复贴图。而有些固定大小的图片，比如Bottom_Left，Top_Left等以后只用贴一次，实际应用的时候要注意区分。</p><p>采用以上原则，你便可以制作皮肤图片，图示如下：</p><p><img src="'+o+'" alt="img_2"></p><p>然后可以将这些图片放到ImageList控件或资源文件中供程序调用<br> 接下来，我们使用Visual Studio .Net新建一个Windows应用程序的项目，在窗体的属性设置中，将窗体的FormBorderStyle属性设置为None（无边框样式），如下图所示：</p><p><img src="'+e+`" alt="img_3"></p><p>定义一个资源管理器：</p><p><code>private ResourceManager rm;</code></p><p>然后使用以下的方法在Form的构造函数中将图片取出来（资源文件名为Skin.resources）：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>rm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResourceManager</span><span class="token punctuation">(</span><span class="token string">&quot;SkinWindow.Skin&quot;</span><span class="token punctuation">,</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Bottom_Left <span class="token operator">=</span> <span class="token punctuation">(</span>Bitmap<span class="token punctuation">)</span>rm<span class="token punctuation">.</span><span class="token function">GetObject</span><span class="token punctuation">(</span><span class="token string">&quot;Bottom_Left&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>…(其它的图片也按照此方法取)</p><p>重载Form的OnPaint事件：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Graphics</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span>

<span class="token comment">//手工画窗体的各个部分</span>

<span class="token function">DrawMiddle_Left</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画左边框</span>

<span class="token function">DrawBottom_Middle</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画下边框</span>

<span class="token function">DrawMiddle_Right</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画右边框</span>

<span class="token function">DrawBottom_Left</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画左下角</span>

<span class="token function">DrawBottom_Right</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画右下角</span>

<span class="token function">DrawTop_Left</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画标题栏左边</span>

<span class="token function">DrawTop_Right</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画标题栏右边</span>

<span class="token function">DrawTop_Middle</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画标题栏中间</span>

<span class="token function">DrawSys_Button</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Graphics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画系统按纽</span>
</code></pre></div><p>以下是上述画皮肤方法的具体实现部分，我只举一个画左边框的代码示例，其它的部分请读者举一返三：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DrawMiddle_Left</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Brush</span> brush <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextureBrush</span><span class="token punctuation">(</span>Middle_Left<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Middle_Left<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> Middle_Left<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    g<span class="token punctuation">.</span><span class="token function">FillRectangle</span><span class="token punctuation">(</span>brush<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TITLE_WIDTH<span class="token punctuation">,</span> Middle_Left<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> Height <span class="token operator">-</span> Bottom_Middle<span class="token punctuation">.</span>Height <span class="token operator">-</span> TITLE_WIDTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre></div><p>衣服穿上了，现在我们的程序就有了不同的外观：</p><p><img src="`+c+`" alt="img_4"></p><p>看上去已经很酷了，不过只是花架子，因为边框，标题栏，系统按纽都是我们自己画上去的假的边框，标题栏和系统按纽，所以这个窗体既不能移动也不能自由的放大缩小，点关闭都没用。以前我们写程序从来都不需要关心这个的，这些都是窗体的基本功能呀？没有从来都没有想到这个竟然还会是个问题吧？</p><p>怎么办呢？答案就是我们自己来做，不过会比较麻烦，因为取消掉了边框，所以Windows不会帮你发出系统事件，你捕捉不到系统发生了什么事情的话，就没有办法写下响应代码，所以我们要自己检测鼠标的坐标，并根据鼠标的动作，自己来发出事件消息，然后进行响应。</p><p>首先我们先定义出一些响应事件的代码，我定义了一个抽象的基类MouseAction，用来表示所有的鼠标事件，它有一个抽象方法Action：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MouseAction</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> ScreenX<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> ScreenY<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Form</span> form<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后再来定义出它的各个派生类来表示出具体每个鼠标事件响应的代码。</p><p>下面是一个向右拉伸窗口事件的代码响应：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MouseSizeRight</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MouseAction</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> lx<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">MouseSizeRight</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> LocationX<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        lx <span class="token operator">=</span> LocationX<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> ScreenX<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> ScreenY<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Form</span> form<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        form<span class="token punctuation">.</span>Width <span class="token operator">=</span> ScreenX <span class="token operator">-</span> lx<span class="token punctuation">;</span>
        form<span class="token punctuation">.</span><span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>非常简单和容易理解，我就不再赘述，其它的各个事件也都一样简单，这里也不给出所有事件的实现代码，只是列举一下还需要实现的代码响应类：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>MouseSizeLeft：拉伸左边框

MouseSizeBottom：拉伸下边框

MouseSizeTop：拉伸上边框

MouseSizeTopLeft：拉伸左上角

MouseSizeTopRight：拉伸右上角

MouseSizeBottomLeft：拉伸左下角

MouseSizeBottomRight：拉伸右下角

MouseDrag：鼠标拖动
</code></pre></div><p>鼠标拖动同样也很简单，不过却稍不同于窗口的缩放拉伸，这里举出它的实现代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MouseDrag</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MouseAction</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">MouseDrag</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> hitX<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> hitY<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        x <span class="token operator">=</span> hitX<span class="token punctuation">;</span>
        y <span class="token operator">=</span> hitY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> ScreenX<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> ScreenY<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Form</span> form<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        form<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span>ScreenX <span class="token operator">-</span> x<span class="token punctuation">,</span> ScreenY <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>接下来我们开始编写发出事件的代码，先定义几个变量：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> LEFT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> RIGHT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> BOTTOM <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> TOP <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> TITLE_WIDTH <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span><span class="token comment">//边框和标题栏的大小</span>
<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//保存鼠标的临时坐标</span>
<span class="token keyword">private</span> <span class="token class-name">MouseAction</span> mouse<span class="token punctuation">;</span><span class="token comment">//鼠标的事件响应对象</span>
</code></pre></div><p>然后在Form的MouseDown事件中记录下鼠标的当前坐标：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>x <span class="token operator">=</span> e<span class="token punctuation">.</span>X<span class="token punctuation">;</span>
y <span class="token operator">=</span> e<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>
</code></pre></div><p>附：<code>e</code>为<code>System.Windows.Forms.MouseEventArgs</code></p><p>然后再根据鼠标的坐标定义出事件响应对象：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//鼠标点击左上边框</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>X <span class="token operator">&lt;=</span> LEFT <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>Y <span class="token operator">&lt;=</span> TOP<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Y <span class="token operator">&lt;=</span> TOP <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>X <span class="token operator">&lt;=</span> LEFT<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    mouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MouseSizeTopLeft</span><span class="token punctuation">(</span>Location<span class="token punctuation">.</span>X<span class="token punctuation">,</span> Location<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> Width<span class="token punctuation">,</span> Height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>当然有的事件也可以直接响应：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//鼠标点击系统关闭按纽</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>X <span class="token operator">&gt;</span> Width <span class="token operator">-</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>Y <span class="token operator">&gt;</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>X <span class="token operator">&lt;</span> Width <span class="token operator">-</span> <span class="token number">20</span> <span class="token operator">+</span> SysButton_Min<span class="token punctuation">.</span>Width <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>Y <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token operator">+</span> SysButton_Min<span class="token punctuation">.</span>Height<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>大部分的事件响应实际上是在MouseMove事件中完成的：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form_MouseMove</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MouseEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Cursor <span class="token operator">=</span> <span class="token function">CheckCursorType</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>X<span class="token punctuation">,</span> e<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//改变鼠标的指针形状</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mouse <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mouse<span class="token punctuation">.</span><span class="token function">Action</span><span class="token punctuation">(</span>Control<span class="token punctuation">.</span>MousePosition<span class="token punctuation">.</span>X<span class="token punctuation">,</span> Control<span class="token punctuation">.</span>MousePosition<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行时间响应</span>
        <span class="token comment">//注意坐标是Control.MousePosition这个静态变量给出的，它的值为鼠标在桌面上的全局坐标</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>给出每个不同部位的鼠标的指针形状：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name">Cursor</span> <span class="token function">CheckCursorType</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> X<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> Y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X <span class="token operator">&lt;=</span> LEFT <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> Y <span class="token operator">&lt;=</span> TOP<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>Y <span class="token operator">&lt;=</span> TOP <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> X <span class="token operator">&lt;=</span> LEFT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>X <span class="token operator">&gt;=</span> Width <span class="token operator">-</span> RIGHT <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> Y <span class="token operator">&gt;=</span> Height <span class="token operator">-</span> BOTTOM<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>Y <span class="token operator">&gt;=</span> Height <span class="token operator">-</span> BOTTOM <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> X <span class="token operator">&gt;=</span> Width <span class="token operator">-</span> RIGHT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Cursors<span class="token punctuation">.</span>SizeNWSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Y <span class="token operator">&lt;=</span> TOP <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> X <span class="token operator">&gt;=</span> Width <span class="token operator">-</span> RIGHT<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>Y <span class="token operator">&lt;=</span> TOP <span class="token operator">&amp;&amp;</span> X <span class="token operator">&gt;=</span> Width <span class="token operator">-</span> RIGHT <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>X <span class="token operator">&lt;=</span> LEFT <span class="token operator">&amp;&amp;</span> Y <span class="token operator">&gt;=</span> Height <span class="token operator">-</span> BOTTOM <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>Y <span class="token operator">&gt;=</span> Height <span class="token operator">-</span> BOTTOM <span class="token operator">&amp;&amp;</span> X <span class="token operator">&lt;=</span> LEFT <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Cursors<span class="token punctuation">.</span>SizeNESW<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>X <span class="token operator">&gt;=</span> Width <span class="token operator">-</span> RIGHT <span class="token operator">||</span> X <span class="token operator">&lt;=</span> LEFT<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Cursors<span class="token punctuation">.</span>SizeWE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Y <span class="token operator">&gt;=</span> Height <span class="token operator">-</span> BOTTOM <span class="token operator">||</span> Y <span class="token operator">&lt;=</span> TOP<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Cursors<span class="token punctuation">.</span>SizeNS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Cursors<span class="token punctuation">.</span>Arrow<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>最后在MouseUp事件中将mouse变量释放掉：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form_MouseUp</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MouseEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    mouse <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>为了更加逼真，还可以加上标题栏的双击最大化或者还原的事件：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form_DoubleClick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">&gt;</span> TOP <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> TITLE_WIDTH<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>WindowState <span class="token operator">==</span> FormWindowState<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            WindowState <span class="token operator">=</span> FormWindowState<span class="token punctuation">.</span>Maximized<span class="token punctuation">;</span>
            SysButton <span class="token operator">=</span> SysButton_Restore<span class="token punctuation">;</span>
            <span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>WindowState <span class="token operator">==</span> FormWindowState<span class="token punctuation">.</span>Maximized<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            WindowState <span class="token operator">=</span> FormWindowState<span class="token punctuation">.</span>Normal<span class="token punctuation">;</span>
            SysButton <span class="token operator">=</span> SysButton_Max<span class="token punctuation">;</span>
            <span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>防止窗体被缩小成一个点，最好给窗口的MinimumSize赋上一个适当的值，例如200,200。</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>原作者：卢彦
来 源：http://www.microsoft.com
共有750位读者阅读过此文
</code></pre></div>`,54),k=[u];function i(r,d){return s(),a("div",null,k)}const g=n(l,[["render",i],["__file","progmif1.html.vue"]]);export{g as default};
