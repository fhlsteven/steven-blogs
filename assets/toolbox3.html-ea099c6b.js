import{_ as n,o as s,c as a,a as t}from"./app-d9da1b6d.js";const p="/steven-blogs/assets/toolbox3_1-ac909f5d.png",o="/steven-blogs/assets/toolbox3_2-84de663e.png",c="/steven-blogs/assets/toolbox3_3-d4a3a084.png",e={},u=t(`<h1 id="用visual-c-动态生成组件" tabindex="-1"><a class="header-anchor" href="#用visual-c-动态生成组件" aria-hidden="true">#</a> 用Visual C#动态生成组件</h1><blockquote><p>转载自：天极网 人气：1995 bbcococala 中国在线 2002-04-26</p></blockquote><p>以前在用Delphi写程序的时候，总不喜欢在窗体上排放很多组件，这一方面有点不美观，并且在调试程序时候，也不是十分方便。通常在写程序的时候，当要用到某些组件，采用的方法一般都是动态创建，用完以后就释放掉。Visual C#在程序运行的时候也可以动态创建组件，下面就结合一个程序例子来具体介绍如何用Visual C#动态生成组件。首先让我们了解一下，在动态创建组件的过程中要用到的一些概论和理论。</p><h2 id="一-boxing-装箱-和unboxing-出箱" tabindex="-1"><a class="header-anchor" href="#一-boxing-装箱-和unboxing-出箱" aria-hidden="true">#</a> 一．Boxing (装箱)和Unboxing (出箱)</h2><p>在用Visual C#动态创建组件的时候，要涉及到二种数据类型变量的转换，这二种类型变量就是实值类型（Value Type）变量和参考类型（Reference Type）变量，而这种转换过程在Visual C#中被称为Boxing (装箱)和Unboxing (出箱)。其中把实值类型变量转换成参考类型变量就是Boxing (装箱)；把参考类型变量转换成实值类型变量就是Unboxing (出箱)。那么什么是实值类型，说的简单些，就是我们平常使用的整型、布尔型、枚举型等，这些类型的变量就是实值类型变量了；所谓参考类型，在Visual C#中指的就是Object、Class、Interface、Delegate、String、Array等，他和实值类型最主要的不同之处就是，参考类型变量存放的是指向实体对象的指针，而实值类型变量却是实实在在地实体对象。在本文介绍的程序中，主要涉及的是出箱。具体的处理方法，在下面有着具体介绍。</p><h2 id="二-本文中程序设计和运行的环境" tabindex="-1"><a class="header-anchor" href="#二-本文中程序设计和运行的环境" aria-hidden="true">#</a> 二． 本文中程序设计和运行的环境</h2><p>（1）.微软公司视窗2000服务器版<br> （2）..Net FrameWork SDK Beta 2</p><h2 id="三-程序设计中的关键步骤以及解决方法" tabindex="-1"><a class="header-anchor" href="#三-程序设计中的关键步骤以及解决方法" aria-hidden="true">#</a> 三．程序设计中的关键步骤以及解决方法</h2><p>文中软件主要功能是用通过窗体上的二个按钮来创建二个不同类型的WinForm组件--Button组件和TextBox组件，并在创建的同时为每一个组件的属性赋值，给每一个创建的组件也创建了事件。</p><p>（1）.如何在窗体上创建Button组件：</p><p>其实用Visual C#创建一个组件是十分方便的，只用下列二行语句就可以完成了：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//创建一个新的Button组件</span>
<span class="token class-name">Button</span> myButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//在窗体中显示此按钮</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>myButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>但此时创建的这个Button组件没有任何属性，并且也没有任何事件，在本文中介绍的程序中创建的Button组件，不仅有属性也有事件，下列语句就是本文程序创建Button组件源代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//按钮数量计算器在每次按钮按动后加&quot;1&quot;</span>
counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">//对要产生的按钮的纵坐标的相对位置是前一个产生按钮的相对位置的纵坐标加&quot;3&quot;</span>
locY <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>btnAdd<span class="token punctuation">.</span>Height <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">//创建一个新的Button组件</span>
<span class="token class-name">Button</span> myButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设定他的名称和Text属性，以及产生的相对位置</span>
myButton<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Button &quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">;</span>
myButton<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;按钮 &quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">;</span>
myButton<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span>btnAdd<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>X<span class="token punctuation">,</span> locY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//为产生的新的Button组件设定事件，本文中为产生的按钮设定了三个事件</span>
myButton<span class="token punctuation">.</span>MouseEnter <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>btn_MouseEnter<span class="token punctuation">)</span><span class="token punctuation">;</span>
myButton<span class="token punctuation">.</span>MouseLeave <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>btn_MouseLeave<span class="token punctuation">)</span><span class="token punctuation">;</span>
myButton<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>btn_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//在窗体中显示此按钮</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>myButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>程序不仅为每一个组件的属性都赋值，而且为每一个组件都创建了三个事件。细心的读者可能已经注意到，程序为每一个组件创建的事件的名称都是一样的。这样就有一个问题，如何在这一样的事件中，识别到底是哪个Button组件触发了事件。</p><p>（2）.确定是哪个组件触发了事件：</p><p>由于程序中为每一个创建的Button组件的事件都是一样的，要想正确处理这些组件的事件，就需要在事件触发的程序中判断到底是哪个组件触发了这个事件。这就需要用到上面所提出的装箱和出箱。我们知道Sender对象是一个参考类型变量，他存放的是指向触发当前事件实体对象的指针。要把他给转换成实值对象类型，通过下列语句就可以确定是哪个组件触发了当前事件：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btn_MouseEnter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//出箱</span>
    <span class="token class-name">Button</span> currentButton <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>
    <span class="token comment">//设定按钮的背景色</span>
    currentButton<span class="token punctuation">.</span>BackColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其他事件可以仿照此事件的处理过程来处理。</p><p>（3）. 如何在窗体上创建TextBox组件：</p><p>创建TextBox组件的过程和创建Button组件过程相类似，只是在创建的组件类型上面有一点区别，具体实现语句如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//文本框数量计算器在每次按钮按动后加&quot;1&quot;</span>
counter01 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">//对要产生的文本框的纵坐标的相对位置是前一个产生按钮的相对位置的纵坐标加&quot;3</span>
locY1 <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>txtAdd<span class="token punctuation">.</span>Height <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">//创建一个新的TextBox组件</span>
<span class="token class-name">TextBox</span> myBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设定他的名称和Text属性，以及产生的位置</span>
myBox<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;TextBox &quot;</span> <span class="token operator">+</span> counter01<span class="token punctuation">;</span>
myBox<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;文本框 &quot;</span> <span class="token operator">+</span> counter01<span class="token punctuation">;</span>
myBox<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span>txtAdd<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>X<span class="token punctuation">,</span> locY1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//为产生的新的TextBox组件设定事件，本文中为产生的文本框设定了一个事件</span>
myBox<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>btn_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//在窗体中显示此文本框</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>myBox<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>此时细心的读者又会发现，为每一个TextBox组件创建Click事件和为Button组件创建的Click事件也是一样的，这样在Click事件中不仅要判断是哪个组件触发了事件，还要判断是那种类型的组件触发了事件，下面语句是实现这些判断地具体方法：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btn_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sender<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Button</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Button</span> control <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">&quot;被按动了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">TextBox</span> control <span class="token operator">=</span> <span class="token punctuation">(</span>TextBox<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">&quot;被按动了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>当然如果你也可以单独为TextBox组件创建Click事件。此时创建的事件语句可改为：</p><p><code>myBox.Click += new System.EventHandler(this.txt _Click);</code></p><p>下面是实现<code>txt _Click()</code>事件的程序代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">txt_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">TextBox</span> currentButton <span class="token operator">=</span> <span class="token punctuation">(</span>TextBox<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>
    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>currentButton<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">&quot;被按动了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="四-本文中源程序已经程序运行的界面" tabindex="-1"><a class="header-anchor" href="#四-本文中源程序已经程序运行的界面" aria-hidden="true">#</a> 四．本文中源程序已经程序运行的界面</h2><p>下面这些图是程序运行：</p><p><img src="`+p+'" alt="toolbox3_1"><br> 图01：程序中动态创建了组件</p><p><img src="'+o+'" alt="toolbox3_2"><br> 图02：单击创建的按钮的结果图</p><p><img src="'+c+`" alt="toolbox3_3"><br> 图03：单击创建的文本框的结果图</p><p>下面是实现上面结果的程序源代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">DynamicControls</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Button</span> btnAdd<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">System<span class="token punctuation">.</span>ComponentModel<span class="token punctuation">.</span>Container</span> components <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Button</span> txtAdd<span class="token punctuation">;</span>
        <span class="token comment">//给产生的按钮定义一个数量计算器</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> counter<span class="token punctuation">;</span>
        <span class="token comment">//给产生的按钮定义相对位置的纵坐标</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> locY<span class="token punctuation">;</span>
        <span class="token comment">//给产生的文本框定义一个数量计算器</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> counter01<span class="token punctuation">;</span>
        <span class="token comment">//给产生的文本框定义相对位置的纵坐标</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> locY1<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//初始化产生的按钮何文本框位置的纵坐标</span>
            locY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>btnAdd<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>
            locY1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>txtAdd<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//清除在程序中使用到的资源</span>
        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> disposing<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>disposing<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>components <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    components<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span>disposing<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>btnAdd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>txtAdd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SuspendLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span>btnAdd<span class="token punctuation">.</span>FlatStyle <span class="token operator">=</span> FlatStyle<span class="token punctuation">.</span>Popup<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>btnAdd<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>btnAdd<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;btnAdd&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>btnAdd<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>btnAdd<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;生成按钮！&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>btnAdd<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>btnAdd_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span>txtAdd<span class="token punctuation">.</span>FlatStyle <span class="token operator">=</span> FlatStyle<span class="token punctuation">.</span>Popup<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>txtAdd<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>txtAdd<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;txtAdd&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>txtAdd<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>txtAdd<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;生成文本框！&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>txtAdd<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>txtAdd_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span>AutoScaleBaseSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>ClientSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">292</span><span class="token punctuation">,</span> <span class="token number">273</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>btnAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>txtAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Form1&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;在Visual C#中如何动态产生组件！&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ResumeLayout</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btnAdd_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//按钮数量计算器在每次按钮按动后加&quot;1&quot;</span>
            counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">//对要产生的按钮的纵坐标的相对位置是前一个产生按钮的相对位置的纵坐标加&quot;3&quot;</span>
            locY <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>btnAdd<span class="token punctuation">.</span>Height <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
            <span class="token comment">//创建一个新的Button组件</span>
            <span class="token class-name">Button</span> myButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//设定他的名称和Text属性，以及产生的位置</span>
            myButton<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Button &quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">;</span>
            myButton<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;按钮 &quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">;</span>
            myButton<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span>btnAdd<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>X<span class="token punctuation">,</span> locY<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//为产生的新的Button组件设定事件，本文中为产生的按钮设定了三个事件</span>
            myButton<span class="token punctuation">.</span>MouseEnter <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>btn_MouseEnter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            myButton<span class="token punctuation">.</span>MouseLeave <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>btn_MouseLeave<span class="token punctuation">)</span><span class="token punctuation">;</span>
            myButton<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>btn_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//在窗体中显示此按钮</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>myButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">txtAdd_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//文本框数量计算器在每次按钮按动后加&quot;1&quot;</span>
            counter01 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">//对要产生的文本框的纵坐标的相对位置是前一个产生按钮的相对位置的纵坐标加&quot;3</span>
            locY1 <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>txtAdd<span class="token punctuation">.</span>Height <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
            <span class="token comment">//创建一个新的TextBox组件</span>
            <span class="token class-name">TextBox</span> myBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//设定他的名称和Text属性，以及产生的位置</span>
            myBox<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;TextBox &quot;</span> <span class="token operator">+</span> counter01<span class="token punctuation">;</span>
            myBox<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;文本框 &quot;</span> <span class="token operator">+</span> counter01<span class="token punctuation">;</span>
            myBox<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span>txtAdd<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>X<span class="token punctuation">,</span> locY1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//为产生的新的TextBox组件设定事件，本文中为产生的文本框设定了一个事件</span>
            myBox<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>btn_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//在窗体中显示此文本框</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>myBox<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btn_MouseEnter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//出箱</span>
            <span class="token class-name">Button</span> currentButton <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>
            <span class="token comment">//设定按钮的背景色</span>
            currentButton<span class="token punctuation">.</span>BackColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btn_MouseLeave</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//出箱</span>
            <span class="token class-name">Button</span> currentButton <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>
            currentButton<span class="token punctuation">.</span>BackColor <span class="token operator">=</span> Control<span class="token punctuation">.</span>DefaultBackColor<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btn_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sender<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Button</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">Button</span> control <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>
                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">&quot;被按动了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">TextBox</span> control <span class="token operator">=</span> <span class="token punctuation">(</span>TextBox<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>
                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>Text <span class="token operator">+</span> <span class="token string">&quot;被按动了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="五-总结" tabindex="-1"><a class="header-anchor" href="#五-总结" aria-hidden="true">#</a> 五．总结</h2><p>通过上面介绍，不难看出，动态创建组件并不是一件很难的事情，难就难在为这个组件创建事件上面，因为这涉及到实值类型变量和参考类型变量的转换，这就是所谓的装箱和出箱的问题。当然在程序设计的时候，你不仅可以创建那些可见的组件，也可以创建那些不可见的组件，具体的实现方法和本文中的方法类似。</p>`,37),l=[u];function k(i,r){return s(),a("div",null,l)}const m=n(e,[["render",k],["__file","toolbox3.html.vue"]]);export{m as default};
