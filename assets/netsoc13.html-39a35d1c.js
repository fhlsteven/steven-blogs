import{_ as t,r as p,o,c as e,b as n,d as s,e as c,a as l}from"./app-8e5157a8.js";const u="/steven-blogs/assets/netsoc13_1-19707796.png",k="/steven-blogs/assets/netsoc13_2-0f1dc12c.png",i={},r={id:"网络socket编程指南",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#网络socket编程指南","aria-hidden":"true"},"#",-1),h={href:"https://beej.us/guide/bgnet/",target:"_blank",rel:"noopener noreferrer"},m=l(`<p>Beej网络socket编程指南</p><hr><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>Socket 编程让你沮丧吗？从man pages中很难得到有用的信息吗？你想跟上时代去编Internet相关的程序，但是为你在调用 connect() 前的bind() 的结构而不知所措？等等…</p><p>好在我已经将这些事完成了，我将和所有人共享我的知识了。如果你了解 C 语言并想穿过网络编程的沼泽，那么你来对地方了。</p><h2 id="读者对象" tabindex="-1"><a class="header-anchor" href="#读者对象" aria-hidden="true">#</a> 读者对象</h2><p>这个文档是一个指南，而不是参考书。如果你刚开始 socket 编程并想找一本入门书，那么你是我的读者。但这不是一本完全的 socket 编程书。</p><h2 id="平台和编译器" tabindex="-1"><a class="header-anchor" href="#平台和编译器" aria-hidden="true">#</a> 平台和编译器</h2><p>这篇文档中的大多数代码都在 Linux 平台PC 上用 GNU 的 gcc 成功编译过。而且它们在 HPUX平台 上用 gcc 也成功编译过。但是注意，并不是每个代码片段都独立测试过。</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>目录：
1) 什么是套接字？
2) Internet 套接字的两种类型  
3) 网络理论  
4) 结构体
5) 本机转换
6) IP 地址和如何处理它们  
7) socket()函数
8) bind()函数
9) connect()函数
10) listen()函数
11) accept()函数
12) send()和recv()函数
13) sendto()和recvfrom()函数
14) close()和shutdown()函数
15) getpeername()函数
16) gethostname()函数
17) 域名服务（DNS）
18) 客户-服务器背景知识  
19) 简单的服务器
20) 简单的客户端
21) 数据报套接字Socket
22) 阻塞
23) select()--多路同步I/O
24) 参考资料  
</code></pre></div><h3 id="什么是-socket" tabindex="-1"><a class="header-anchor" href="#什么是-socket" aria-hidden="true">#</a> 什么是 socket？</h3><p>你经常听到人们谈论着 “socket”，或许你还不知道它的确切含义。现在让我告诉你：它是使用 标准Unix 文件描述符 (file descriptor) 和其它程序通讯的方式。</p><p>什么？</p><p>你也许听到一些Unix高手(hacker)这样说过：“呀，Unix中的一切就是文件！”那个家伙也许正在说到一个事实：Unix 程序在执行任何形式的 I/O 的时候，程序是在读或者写一个文件描述符。一个文件描述符只是一个和打开的文件相关联的整数。但是(注意后面的话)，这个文件可能是一个网络连接，FIFO，管道，终端，磁盘上的文件或者什么其它的东西。Unix 中所有的东西就是文件！所以，你想和Internet上别的程序通讯的时候，你将要使用到文件描述符。你必须理解刚才的话。</p><p>现在你脑海中或许冒出这样的念头：“那么我从哪里得到网络通讯的文件描述符呢？”，这个问题无论如何我都要回答：你利用系统调用 socket()，它返回套接字描述符 (socket descriptor)，然后你再通过它来进行send() 和 recv()调用。</p><p>“但是...”，你可能有很大的疑惑，“如果它是个文件描述符，那么为什 么不用一般调用read()和write()来进行套接字通讯？”简单的答案是：“你可以使用！”。详细的答案是：“你可以，但是使用send()和recv()让你更好的控制数据传输。”</p><p>存在这样一个情况：在我们的世界上，有很多种套接字。有DARPA Internet 地址 (Internet 套接字)，本地节点的路径名 (Unix套接字)，CCITT X.25地址 (你可以将X.25 套接字完全忽略)。也许在你的Unix 机器上还有其它的。我们在这里只讲第一种：Internet 套接字。</p><h3 id="internet-套接字的两种类型" tabindex="-1"><a class="header-anchor" href="#internet-套接字的两种类型" aria-hidden="true">#</a> Internet 套接字的两种类型</h3><p>什么意思？有两种类型的Internet 套接字？是的。不，我在撒谎。其实还有很多，但是我可不想吓着你。我们这里只讲两种。除了这些, 我打算另外介绍的 &quot;Raw Sockets&quot; 也是非常强大的，很值得查阅。</p><p>那么这两种类型是什么呢？一种是&quot;Stream Sockets&quot;（流格式），另外一种是&quot;Datagram Sockets&quot;（数据包格式）。我们以后谈到它们的时候也会用到 &quot;SOCK_STREAM&quot; 和 &quot;SOCK_DGRAM&quot;。数据报套接字有时也叫“无连接套接字”(如果你确实要连接的时候可以用connect()。)</p><p>流式套接字是可靠的双向通讯的数据流。如果你向套接字按顺序输出“1，2”，那么它们将按顺序“1，2”到达另一边。它们是无错误的传递的，有自己的错误控制，在此不讨论。</p><p>有什么在使用流式套接字？你可能听说过 telnet，不是吗？它就使用流式套接字。你需要你所输入的字符按顺序到达，不是吗？同样，WWW浏览器使用的 HTTP 协议也使用它们来下载页面。实际上，当你通过端口80 telnet 到一个 WWW 站点，然后输入 “GET pagename” 的时候，你也可以得到 HTML 的内容。为什么流式套接字可以达到高质量的数据传输？这是因为它使用了“传输控制协议 (The Transmission Control Protocol)”，也叫 “TCP” (请参考 RFC-793 获得详细资料。)TCP 控制你的数据按顺序到达并且没有错误。你也许听到 “TCP” 是因为听到过 “TCP/IP”。这里的 IP 是指“Internet 协议”(请参考 RFC-791。) IP 只是处理 Internet 路由而已。</p><p>那么数据报套接字呢？为什么它叫无连接呢？为什么它是不可靠的呢？有这样的一些事实：如果你发送一个数据报，它可能会到达，它可能次序颠倒了。如果它到达，那么在这个包的内部是无错误的。</p><p>数据报也使用 IP 作路由，但是它不使用 TCP。它使用“用户数据报协议 (User Datagram Protocol)”，也叫 “UDP” (请参考 RFC-768。)</p><p>为什么它们是无连接的呢？主要是因为它并不象流式套接字那样维持一个连接。你只要建立一个包，构造一个有目标信息的IP 头，然后发出去。无需连接。它们通常使用于传输包-包信息。简单的应用程序有：tftp, bootp等等。</p><p>你也许会想：“假如数据丢失了这些程序如何正常工作？”我的朋友，每个程序在 UDP 上有自己的协议。例如，tftp 协议每发出的一个被接受到包，收到者必须发回一个包来说“我收到了！” (一个“命令正确应答”也叫“ACK” 包)。如果在一定时间内(例如5秒)，发送方没有收到应答，它将重新发送，直到得到 ACK。这一ACK过程在实现 SOCK_DGRAM 应用程序的时候非常重要。</p><h3 id="网络理论" tabindex="-1"><a class="header-anchor" href="#网络理论" aria-hidden="true">#</a> 网络理论</h3><p>既然我刚才提到了协议层，那么现在是讨论网络究竟如何工作和一些 关于 SOCK_DGRAM 包是如何建立的例子。当然，你也可以跳过这一段， 如果你认为已经熟悉的话。</p><p>现在是学习<strong>数据封装 (Data Encapsulation)</strong> 的时候了！它非常非常重 要。它重要性重要到你在网络课程学（图1：数据封装）习中无论如何也得也得掌握它。主要 的内容是：一个包，先是被第一个协议(在这里是TFTP )在它的报头（也许 是报尾）包装(“封装”)，然后，整个数据(包括 TFTP 头)被另外一个协议 (在这里是 UDP )封装，然后下一个( IP )，一直重复下去，直到硬件(物理) 层( 这里是以太网 )。</p><p><img src="`+u+`" alt="图1"><br> Figure 2.1: Data Encapsulation</p><p>当另外一台机器接收到包，硬件先剥去以太网头，内核剥去IP和UDP 头，TFTP程序再剥去TFTP头，最后得到数据。</p><p>现在我们终于讲到声名狼藉的<strong>网络分层模型 (Layered Network Model)</strong>。这种网络模型在描述网络系统上相对其它模型有很多优点。例如， 你可以写一个套接字程序而不用关心数据的物理传输(串行口，以太网，连 接单元接口 (AUI) 还是其它介质)，因为底层的程序会为你处理它们。实际 的网络硬件和拓扑对于程序员来说是透明的。</p><p>不说其它废话了，我现在列出整个层次模型。如果你要参加网络考试， 可一定要记住：</p><ul><li>应用层 (Application)</li><li>表示层 (Presentation)</li><li>会话层 (Session)</li><li>传输层(Transport)</li><li>网络层(Network)</li><li>数据链路层(Data Link)</li><li>物理层(Physical)</li></ul><p>物理层是硬件(串口，以太网等等)。应用层是和硬件层相隔最远的--它 是用户和网络交互的地方。</p><p>这个模型如此通用，如果你想，你可以把它作为修车指南。把它对应 到 Unix，结果是：</p><ul><li>应用层(Application Layer) (telnet, ftp,等等)</li><li>传输层(Host-to-Host Transport Layer) (TCP, UDP)</li><li>Internet层(Internet Layer) (IP和路由)</li><li>网络访问层 (Network Access Layer) (网络层，数据链路层和物理层)</li></ul><p>现在，你可能看到这些层次如何协调来封装原始的数据了。</p><p>看看建立一个简单的数据包有多少工作？哎呀，你将不得不使用 &quot;cat&quot; 来建立数据包头！这仅仅是个玩笑。对于流式套接字你要作的是 send() 发 送数据。对于数据报式套接字，你按照你选择的方式封装数据然后使用 sendto()。内核将为你建立传输层和 Internet 层，硬件完成网络访问层。 这就是现代科技。</p><p>现在结束我们的网络理论速成班。哦，忘记告诉你关于路由的事情了。 但是我不准备谈它，如果你真的关心，那么参考 IP RFC。</p><h3 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h3><p>终于谈到编程了。在这章，我将谈到被套接字用到的各种数据类型。 因为它们中的一些内容很重要了。</p><p>首先是简单的一个：socket描述符。它是下面的类型：</p><p><code>int</code></p><p>仅仅是一个常见的 int。</p><p>从现在起，事情变得不可思议了，而你所需做的就是继续看下去。注 意这样的事实：有两种字节排列顺序：重要的字节 (有时叫 &quot;octet&quot;，即八 位位组) 在前面，或者不重要的字节在前面。前一种叫“网络字节顺序 (Network Byte Order)”。有些机器在内部是按照这个顺序储存数据，而另外 一些则不然。当我说某数据必须按照 NBO 顺序，那么你要调用函数(例如 htons() )来将它从本机字节顺序 (Host Byte Order) 转换过来。如果我没有 提到 NBO， 那么就让它保持本机字节顺序。</p><p>我的第一个结构(在这个技术手册TM中)--struct sockaddr.。这个结构 为许多类型的套接字储存套接字地址信息：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token punctuation">{</span>  
　　 <span class="token keyword">unsigned</span> <span class="token keyword">short</span> sa_family<span class="token punctuation">;</span> <span class="token comment">/* 地址家族, AF_xxx */</span>  
　　 <span class="token keyword">char</span> sa_data<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*14字节协议地址*/</span>  
　　 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>sa_family 能够是各种各样的类型，但是在这篇文章中都是 &quot;AF_INET&quot;。 sa_data包含套接字中的目标地址和端口信息。这好像有点 不明智。</p><p>为了处理struct sockaddr，程序员创造了一个并列的结构： struct sockaddr_in (&quot;in&quot; 代表 &quot;Internet&quot;。)</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token punctuation">{</span>  
　　 <span class="token keyword">short</span> <span class="token keyword">int</span> sin_family<span class="token punctuation">;</span> <span class="token comment">/* 通信类型 */</span>  
　　 <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> sin_port<span class="token punctuation">;</span> <span class="token comment">/* 端口 */</span>  
　　 <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> sin_addr<span class="token punctuation">;</span> <span class="token comment">/* Internet 地址 */</span>  
　　 <span class="token keyword">unsigned</span> <span class="token keyword">char</span> sin_zero<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* 与sockaddr结构的长度相同*/</span>  
　　 <span class="token punctuation">}</span><span class="token punctuation">;</span>  
</code></pre></div><p>用这个数据结构可以轻松处理套接字地址的基本元素。注意 sin_zero (它被加入到这个结构，并且长度和 struct sockaddr 一样) 应该使用函数 bzero() 或 memset() 来全部置零。 同时，这一重要的字节，一个指向 sockaddr_in结构体的指针也可以被指向结构体sockaddr并且代替它。这 样的话即使 socket() 想要的是 struct sockaddr *，你仍然可以使用 struct sockaddr_in，并且在最后转换。同时，注意 sin_family 和 struct sockaddr 中的 sa_family 一致并能够设置为 &quot;AF_INET&quot;。最后，sin_port和 sin_addr 必须是<strong>网络字节顺序 (Network Byte Order)</strong>！</p><p>你也许会反对道：&quot;但是，怎么让整个数据结构 struct in_addr sin_addr 按照网络字节顺序呢?&quot; 要知道这个问题的答案，我们就要仔细的看一看这 个数据结构： struct in_addr, 有这样一个联合 (unions)：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token comment">/* Internet 地址 (一个与历史有关的结构) */</span>  
　　 <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token punctuation">{</span>  
　　 <span class="token keyword">unsigned</span> <span class="token keyword">long</span> s_addr<span class="token punctuation">;</span>  
　　 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>它曾经是个最坏的联合，但是现在那些日子过去了。如果你声明 &quot;ina&quot; 是数据结构 struct sockaddr_in 的实例，那么 &quot;ina.sin_addr.s_addr&quot; 就储 存4字节的 IP 地址(使用网络字节顺序)。如果你不幸的系统使用的还是恐 怖的联合 struct in_addr ，你还是可以放心4字节的 IP 地址并且和上面 我说的一样(这是因为使用了“#define”。)</p><h3 id="本机转换" tabindex="-1"><a class="header-anchor" href="#本机转换" aria-hidden="true">#</a> 本机转换</h3><p>我们现在到了新的章节。我们曾经讲了很多网络到本机字节顺序的转 换，现在可以实践了！</p><p>你能够转换两种类型： short (两个字节)和 long (四个字节)。这个函 数对于变量类型 unsigned 也适用。假设你想将 short 从本机字节顺序转 换为网络字节顺序。用 &quot;h&quot; 表示 &quot;本机 (host)&quot;，接着是 &quot;to&quot;，然后用 &quot;n&quot; 表 示 &quot;网络 (network)&quot;，最后用 &quot;s&quot; 表示 &quot;short&quot;： h-to-n-s, 或者 htons() (&quot;Host to Network Short&quot;)。</p><p>太简单了...</p><p>如果不是太傻的话，你一定想到了由&quot;n&quot;，&quot;h&quot;，&quot;s&quot;，和 &quot;l&quot;形成的正确 组合，例如这里肯定没有stolh() (&quot;Short to Long Host&quot;) 函数，不仅在这里 没有，所有场合都没有。但是这里有：</p><ul><li>htons()--&quot;Host to Network Short&quot;</li><li>htonl()--&quot;Host to Network Long&quot;</li><li>ntohs()--&quot;Network to Host Short&quot;</li><li>ntohl()--&quot;Network to Host Long&quot;</li></ul><p>现在，你可能想你已经知道它们了。你也可能想：“如果我想改变 char 的顺序要怎么办呢?” 但是你也许马上就想到，“用不着考虑的”。你也许 会想到：我的 68000 机器已经使用了网络字节顺序，我没有必要去调用 htonl() 转换 IP 地址。你可能是对的，但是当你移植你的程序到别的机器 上的时候，你的程序将失败。可移植性！这里是 Unix 世界！记住：在你 将数据放到网络上的时候，确信它们是网络字节顺序的。</p><p>最后一点：为什么在数据结构 struct sockaddr_in 中， sin_addr 和 sin_port 需要转换为网络字节顺序，而sin_family 需不需要呢? 答案是： sin_addr 和 sin_port 分别封装在包的 IP 和 UDP 层。因此，它们必须要 是网络字节顺序。但是 sin_family 域只是被内核 (kernel) 使用来决定在数 据结构中包含什么类型的地址，所以它必须是本机字节顺序。同时， sin_family 没有发送到网络上，它们可以是本机字节顺序。</p><h3 id="ip-地址和如何处理它们" tabindex="-1"><a class="header-anchor" href="#ip-地址和如何处理它们" aria-hidden="true">#</a> IP 地址和如何处理它们</h3><p>现在我们很幸运，因为我们有很多的函数来方便地操作 IP 地址。没有 必要用手工计算它们，也没有必要用&quot;&lt;&lt;&quot;操作来储存成长整字型(long)。</p><p>首先，假设你已经有了一个sockaddr_in结构体ina，你有一个IP地 址&quot;132.241.5.10&quot;要储存在其中，你就要用到函数inet_addr(),将IP地址从 点数格式转换成无符号长整型。使用方法如下：</p><p><code>ina.sin_addr.s_addr = inet_addr(&quot;132.241.5.10&quot;);</code></p><p>注意，inet_addr()返回的地址已经是网络字节格式，所以你无需再调用 函数htonl()。</p><p>我们现在发现上面的代码片断不是十分完整的，因为它没有错误检查。 显而易见，当inet_addr()发生错误时返回-1。记住这些二进制数字？(无符 号数)-1仅仅和IP地址255.255.255.255相符合！这可是广播地址！大错特 错！记住要先进行错误检查。</p><p>好了，现在你可以将IP地址转换成长整型了。有没有其相反的方法呢？ 它可以将一个in_addr结构体输出成点数格式？这样的话，你就要用到函数 inet_ntoa()(&quot;ntoa&quot;的含义是&quot;network to ascii&quot;)，就像这样：</p><p><code>printf(&quot;%s&quot;,inet_ntoa(ina.sin_addr));</code></p><p>它将输出IP地址。需要注意的是inet_ntoa()将结构体in-addr作为一 个参数，不是长整形。同样需要注意的是它返回的是一个指向一个字符的 指针。它是一个由inet_ntoa()控制的静态的固定的指针，所以每次调用 inet_ntoa()，它就将覆盖上次调用时所得的IP地址。例如：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token operator">*</span>a2<span class="token punctuation">;</span> 
<span class="token punctuation">.</span>
<span class="token punctuation">.</span>
a1 <span class="token operator">=</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>ina1<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 这是198.92.129.1 */</span>
a2 <span class="token operator">=</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>ina2<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 这是132.241.5.10 */</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;address 1: %s\\n&quot;</span><span class="token punctuation">,</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;address 2: %s\\n&quot;</span><span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>输出如下：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>address 1: 132.241.5.10
address 2: 132.241.5.10
</code></pre></div><p>假如你需要保存这个IP地址，使用strcopy()函数来指向你自己的字符 指针。</p><p>上面就是关于这个主题的介绍。稍后，你将学习将一个类 似&quot;wintehouse.gov&quot;的字符串转换成它所对应的IP地址(查阅域名服务,稍 后)。</p><h3 id="socket-函数" tabindex="-1"><a class="header-anchor" href="#socket-函数" aria-hidden="true">#</a> socket()函数</h3><p>我想我不能再不提这个了－下面我将讨论一下socket()系统调用。</p><p>下面是详细介绍：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span>  </span>
<span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>但是它们的参数是什么? 首先，domain 应该设置成 &quot;AF_INET&quot;，就 象上面的数据结构struct sockaddr_in 中一样。然后，参数 type 告诉内核 是 SOCK_STREAM 类型还是 SOCK_DGRAM 类型。最后，把 protocol 设置为 &quot;0&quot;。(注意：有很多种 domain、type，我不可能一一列出了，请看 socket() 的 man帮助。当然，还有一个&quot;更好&quot;的方式去得到 protocol。同 时请查阅 getprotobyname() 的 man 帮助。)</p><p>socket() 只是返回你以后在系统调用种可能用到的 socket 描述符，或 者在错误的时候返回-1。全局变量 errno 中将储存返回的错误值。(请参考 perror() 的 man 帮助。)</p><h3 id="bind-函数" tabindex="-1"><a class="header-anchor" href="#bind-函数" aria-hidden="true">#</a> bind()函数</h3><p>一旦你有一个套接字，你可能要将套接字和机器上的一定的端口关联 起来。(如果你想用listen()来侦听一定端口的数据，这是必要一步--MUD 告 诉你说用命令 &quot;telnet x.y.z 6969&quot;。)如果你只想用 connect()，那么这个步 骤没有必要。但是无论如何，请继续读下去。</p><p>这里是系统调用 bind() 的大概：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>my_addr<span class="token punctuation">,</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>sockfd 是调用 socket 返回的文件描述符。my_addr 是指向数据结构 struct sockaddr 的指针，它保存你的地址(即端口和 IP 地址) 信息。 addrlen 设置为 sizeof(struct sockaddr)。</p><p>简单得很不是吗? 再看看例子：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYPORT</span> <span class="token expression"><span class="token number">3490</span></span></span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> my_addr<span class="token punctuation">;</span>
    sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*需要错误检查 */</span>
    my_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>       <span class="token comment">/* host byte order */</span>
    my_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>MYPORT<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* short, network byte order */</span>
    my_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">&quot;132.241.5.10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>my_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">;</span> <span class="token comment">/* zero the rest of the struct */</span>
    <span class="token comment">/* don&#39;t forget your error checking for bind(): */</span>
    <span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>my_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
　　 <span class="token punctuation">.</span>  
　　 <span class="token punctuation">.</span>  
　　 <span class="token punctuation">.</span> 
</code></pre></div><p>这里也有要注意的几件事情。my_addr.sin_port 是网络字节顺序， my_addr.sin_addr.s_addr 也是的。另外要注意到的事情是因系统的不同， 包含的头文件也不尽相同，请查阅本地的 man 帮助文件。</p><p>在 bind() 主题中最后要说的话是，在处理自己的 IP 地址和/或端口的 时候，有些工作是可以自动处理的。</p><div class="language-c" data-ext="c"><pre class="language-c"><code>my_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* 随机选择一个没有使用的端口 */</span>
my_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span> <span class="token comment">/* 使用自己的IP地址 */</span> 
</code></pre></div><p>通过将0赋给 my_addr.sin_port，你告诉 bind() 自己选择合适的端 口。同样，将 my_addr.sin_addr.s_addr 设置为 INADDR_ANY，你告诉 它自动填上它所运行的机器的 IP 地址。</p><p>如果你一向小心谨慎，那么你可能注意到我没有将 INADDR_ANY 转 换为网络字节顺序！这是因为我知道内部的东西：INADDR_ANY 实际上就 是 0！即使你改变字节的顺序，0依然是0。但是完美主义者说应该处处一 致，INADDR_ANY或许是12呢？你的代码就不能工作了，那么就看下面 的代码：</p><div class="language-c" data-ext="c"><pre class="language-c"><code>my_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 随机选择一个没有使用的端口 */</span>
my_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 使用自己的IP地址 */</span>
</code></pre></div><p>你或许不相信，上面的代码将可以随便移植。我只是想指出，既然你 所遇到的程序不会都运行使用htonl的INADDR_ANY。</p><p>bind() 在错误的时候依然是返回-1，并且设置全局错误变量errno。</p><p>在你调用 bind() 的时候，你要小心的另一件事情是：不要采用小于 1024的端口号。所有小于1024的端口号都被系统保留！你可以选择从1024 到65535的端口(如果它们没有被别的程序使用的话)。</p><p>你要注意的另外一件小事是：有时候你根本不需要调用它。如果你使 用 connect() 来和远程机器进行通讯，你不需要关心你的本地端口号(就象 你在使用 telnet 的时候)，你只要简单的调用 connect() 就可以了，它会检 查套接字是否绑定端口，如果没有，它会自己绑定一个没有使用的本地端口。</p><h3 id="connect-程序" tabindex="-1"><a class="header-anchor" href="#connect-程序" aria-hidden="true">#</a> connect()程序</h3><p>现在我们假设你是个 telnet 程序。你的用户命令你得到套接字的文件 描述符。你听从命令调用了socket()。下一步，你的用户告诉你通过端口 23(标准 telnet 端口)连接到&quot;132.241.5.10&quot;。你该怎么做呢? 幸运的是，你正在阅读 connect()--如何连接到远程主机这一章。你可 不想让你的用户失望。</p><p>connect() 系统调用是这样的：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>sockfd 是系统调用 socket() 返回的套接字文件描述符。serv_addr 是 保存着目的地端口和 IP 地址的数据结构 struct sockaddr。addrlen 设置 为 sizeof(struct sockaddr)。</p><p>想知道得更多吗？让我们来看个例子：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEST_IP</span> <span class="token string">&quot;132.241.5.10&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEST_PORT</span> <span class="token expression"><span class="token number">23</span></span></span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> dest_addr<span class="token punctuation">;</span> <span class="token comment">/* 目的地址*/</span>

    sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 错误检查 */</span>

    dest_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span> <span class="token comment">/* host byte order */</span>
    dest_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>DEST_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* short, network byte order */</span>
    dest_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>DEST_IP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>dest_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">;</span> <span class="token comment">/* zero the rest of the struct */</span>

    <span class="token comment">/* don&#39;t forget to error check the connect()! */</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dest_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    　　 <span class="token punctuation">.</span>  
    　　 <span class="token punctuation">.</span>  
    　　 <span class="token punctuation">.</span>  
</code></pre></div><p>再一次，你应该检查 connect() 的返回值--它在错误的时候返回-1，并 设置全局错误变量 errno。</p><p>同时，你可能看到，我没有调用 bind()。因为我不在乎本地的端口号。 我只关心我要去那。内核将为我选择一个合适的端口号，而我们所连接的 地方也自动地获得这些信息。一切都不用担心。</p><h3 id="listen-函数" tabindex="-1"><a class="header-anchor" href="#listen-函数" aria-hidden="true">#</a> listen()函数</h3><p>是换换内容得时候了。假如你不希望与远程的一个地址相连，或者说， 仅仅是将它踢开，那你就需要等待接入请求并且用各种方法处理它们。处 理过程分两步：首先，你听--listen()，然后，你接受--accept() (请看下面的 内容)。</p><p>除了要一点解释外，系统调用 listen 也相当简单。</p><p><code>int listen(int sockfd, int backlog);</code></p><p>sockfd 是调用 socket() 返回的套接字文件描述符。backlog 是在进入 队列中允许的连接数目。什么意思呢? 进入的连接是在队列中一直等待直 到你接受 (accept() 请看下面的文章)连接。它们的数目限制于队列的允许。 大多数系统的允许数目是20，你也可以设置为5到10。</p><p>和别的函数一样，在发生错误的时候返回-1，并设置全局错误变量 errno。</p><p>你可能想象到了，在你调用 listen() 前你或者要调用 bind() 或者让内 核随便选择一个端口。如果你想侦听进入的连接，那么系统调用的顺序可 能是这样的：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* accept() 应该在这 */</span>
</code></pre></div><p>因为它相当的明了，我将在这里不给出例子了。(在 accept() 那一章的 代码将更加完全。)真正麻烦的部分在 accept()。</p><h3 id="accept-函数" tabindex="-1"><a class="header-anchor" href="#accept-函数" aria-hidden="true">#</a> accept()函数</h3><p>准备好了，系统调用 accept() 会有点古怪的地方的！你可以想象发生 这样的事情：有人从很远的地方通过一个你在侦听 (listen()) 的端口连接 (connect()) 到你的机器。它的连接将加入到等待接受 (accept()) 的队列 中。你调用 accept() 告诉它你有空闲的连接。它将返回一个新的套接字文 件描述符！这样你就有两个套接字了，原来的一个还在侦听你的那个端口， 新的在准备发送 (send()) 和接收 ( recv()) 数据。这就是这个过程！</p><p>函数是这样定义的：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>sockfd 相当简单，是和 listen() 中一样的套接字描述符。addr 是个指 向局部的数据结构 sockaddr_in 的指针。这是要求接入的信息所要去的地 方（你可以测定那个地址在那个端口呼叫你）。在它的地址传递给 accept 之 前，addrlen 是个局部的整形变量，设置为 sizeof(struct sockaddr_in)。 accept 将不会将多余的字节给 addr。如果你放入的少些，那么它会通过改变 addrlen 的值反映出来。</p><p>同样，在错误时返回-1，并设置全局错误变量 errno。</p><p>现在是你应该熟悉的代码片段。</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYPORT</span> <span class="token expression"><span class="token number">3490</span> </span><span class="token comment">/*用户接入端口*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BACKLOG</span> <span class="token expression"><span class="token number">10</span>  </span><span class="token comment">/* 多少等待连接控制*/</span></span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> new_fd<span class="token punctuation">;</span> <span class="token comment">/* listen on sock_fd, new connection on new_fd */</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> my_addr<span class="token punctuation">;</span> <span class="token comment">/* 地址信息 */</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> their_addr<span class="token punctuation">;</span> <span class="token comment">/* connector&#39;s address information */</span>
    <span class="token keyword">int</span> sin_size<span class="token punctuation">;</span>

    sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 错误检查*/</span>

    my_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span> <span class="token comment">/* host byte order */</span>
    my_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>MYPORT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* short, network byte order */</span>
    my_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span> <span class="token comment">/* auto-fill with my IP */</span>
    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>my_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">;</span> <span class="token comment">/* zero the rest of the struct */</span>

    <span class="token comment">/* don&#39;t forget your error checking for these calls: */</span>
    <span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>my_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token function">listen</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> BACKLOG<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    sin_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    new_fd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>their_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sin_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  
     <span class="token punctuation">.</span>  
     <span class="token punctuation">.</span>  
     <span class="token punctuation">.</span>  
</code></pre></div><p>注意，在系统调用 send() 和 recv() 中你应该使用新的套接字描述符 new_fd。如果你只想让一个连接进来，那么你可以使用 close() 去关闭原 来的文件描述符 sockfd 来避免同一个端口更多的连接。</p><h3 id="send-and-recv-函数" tabindex="-1"><a class="header-anchor" href="#send-and-recv-函数" aria-hidden="true">#</a> send() and recv()函数</h3><p>这两个函数用于流式套接字或者数据报套接字的通讯。如果你喜欢使 用无连接的数据报套接字，你应该看一看下面关于sendto() 和 recvfrom() 的章节。 send() 是这样的：</p><p><code>int send(int sockfd, const void *msg, int len, int flags);</code></p><p>sockfd 是你想发送数据的套接字描述符(或者是调用 socket() 或者是 accept() 返回的。)msg 是指向你想发送的数据的指针。len 是数据的长度。 把 flags 设置为 0 就可以了。(详细的资料请看 send() 的 man page)。</p><p>这里是一些可能的例子：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token string">&quot;Beej was here!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len<span class="token punctuation">,</span> bytes_sent<span class="token punctuation">;</span>
<span class="token punctuation">.</span>
<span class="token punctuation">.</span>
len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
bytes_sent <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span>
<span class="token punctuation">.</span>
<span class="token punctuation">.</span>
</code></pre></div><p>send() 返回实际发送的数据的字节数--它可能小于你要求发送的数 目！ 注意，有时候你告诉它要发送一堆数据可是它不能处理成功。它只是 发送它可能发送的数据，然后希望你能够发送其它的数据。记住，如果 send() 返回的数据和 len 不匹配，你就应该发送其它的数据。但是这里也 有个好消息：如果你要发送的包很小(小于大约 1K)，它可能处理让数据一 次发送完。最后要说得就是，它在错误的时候返回-1，并设置 errno。</p><p>recv() 函数很相似：</p><p><code>int recv(int sockfd, void *buf, int len, unsigned int flags);</code></p><p>sockfd 是要读的套接字描述符。buf 是要读的信息的缓冲。len 是缓 冲的最大长度。flags 可以设置为0。(请参考recv() 的 man page。) recv() 返回实际读入缓冲的数据的字节数。或者在错误的时候返回-1， 同时设置 errno。</p><p>很简单，不是吗? 你现在可以在流式套接字上发送数据和接收数据了。 你现在是 Unix 网络程序员了！</p><h3 id="sendto-和-recvfrom-函数" tabindex="-1"><a class="header-anchor" href="#sendto-和-recvfrom-函数" aria-hidden="true">#</a> sendto() 和 recvfrom()函数</h3><p>“这很不错啊”，你说，“但是你还没有讲无连接数据报套接字呢？” 没问题，现在我们开始这个内容。</p><p>既然数据报套接字不是连接到远程主机的，那么在我们发送一个包之 前需要什么信息呢? 不错，是目标地址！看看下面的：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sendto</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>  
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">int</span> tolen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>你已经看到了，除了另外的两个信息外，其余的和函数 send() 是一样 的。 to 是个指向数据结构 struct sockaddr 的指针，它包含了目的地的 IP 地址和端口信息。tolen 可以简单地设置为 sizeof(struct sockaddr)。 和函数 send() 类似，sendto() 返回实际发送的字节数(它也可能小于 你想要发送的字节数！)，或者在错误的时候返回 -1。</p><p>相似的还有函数 recv() 和 recvfrom()。recvfrom() 的定义是这样的：</p><p><code>int recvfrom(int sockfd, void *buf, int len, unsigned int flags, 　struct sockaddr *from, int *fromlen);</code></p><p>又一次，除了两个增加的参数外，这个函数和 recv() 也是一样的。from 是一个指向局部数据结构 struct sockaddr 的指针，它的内容是源机器的 IP 地址和端口信息。fromlen 是个 int 型的局部指针，它的初始值为 sizeof(struct sockaddr)。函数调用返回后，fromlen 保存着实际储存在 from 中的地址的长度。</p><p>recvfrom() 返回收到的字节长度，或者在发生错误后返回 -1。</p><p>记住，如果你用 connect() 连接一个数据报套接字，你可以简单的调 用 send() 和 recv() 来满足你的要求。这个时候依然是数据报套接字，依 然使用 UDP，系统套接字接口会为你自动加上了目标和源的信息。</p><h3 id="close-和shutdown-函数" tabindex="-1"><a class="header-anchor" href="#close-和shutdown-函数" aria-hidden="true">#</a> close()和shutdown()函数</h3><p>你已经整天都在发送 (send()) 和接收 (recv()) 数据了，现在你准备关 闭你的套接字描述符了。这很简单，你可以使用一般的 Unix 文件描述符 的 close() 函数：</p><p><code>close(sockfd);</code></p><p>它将防止套接字上更多的数据的读写。任何在另一端读写套接字的企图都将返回错误信息。</p><p>如果你想在如何关闭套接字上有多一点的控制，你可以使用函数 shutdown()。它允许你将一定方向上的通讯或者双向的通讯(就象close()一 样)关闭，你可以使用：</p><p><code>int shutdown(int sockfd, int how);</code></p><p>sockfd 是你想要关闭的套接字文件描述复。how 的值是下面的其中之 一：</p><ul><li>0 – 不允许接受</li><li>1 – 不允许发送</li><li>2 – 不允许发送和接受(和 close() 一样)</li></ul><p>shutdown() 成功时返回 0，失败时返回 -1(同时设置 errno。) 如果在无连接的数据报套接字中使用shutdown()，那么只不过是让 send() 和 recv() 不能使用(记住你在数据报套接字中使用了 connect 后 是可以使用它们的)。</p><h3 id="getpeername-函数" tabindex="-1"><a class="header-anchor" href="#getpeername-函数" aria-hidden="true">#</a> getpeername()函数</h3><p>这个函数太简单了。</p><p>它太简单了，以至我都不想单列一章。但是我还是这样做了。 函数 getpeername() 告诉你在连接的流式套接字上谁在另外一边。函 数是这样的：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">getpeername</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>sockfd 是连接的流式套接字的描述符。addr 是一个指向结构 struct sockaddr (或者是 struct sockaddr_in) 的指针，它保存着连接的另一边的 信息。addrlen 是一个 int 型的指针，它初始化为 sizeof(struct sockaddr)。 函数在错误的时候返回 -1，设置相应的 errno。</p><p>一旦你获得它们的地址，你可以使用 inet_ntoa() 或者 gethostbyaddr() 来打印或者获得更多的信息。但是你不能得到它的帐号。(如果它运行着愚 蠢的守护进程，这是可能的，但是它的讨论已经超出了本文的范围，请参 考 RFC-1413 以获得更多的信息。)</p><h3 id="gethostname-函数" tabindex="-1"><a class="header-anchor" href="#gethostname-函数" aria-hidden="true">#</a> gethostname()函数</h3><p>甚至比 getpeername() 还简单的函数是 gethostname()。它返回你程 序所运行的机器的主机名字。然后你可以使用 gethostbyname() 以获得你 的机器的 IP 地址。 　　 下面是定义：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">gethostname</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>hostname<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>参数很简单：hostname 是一个字符数组指针，它将在函数返回时保存主机名。size是hostname 数组的字节长度。</p><p>函数调用成功时返回 0，失败时返回 -1，并设置 errno。</p><h3 id="域名服务-dns" tabindex="-1"><a class="header-anchor" href="#域名服务-dns" aria-hidden="true">#</a> 域名服务（DNS）</h3><p>如果你不知道 DNS 的意思，那么我告诉你，它代表域名服务(Domain Name Service)。它主要的功能是：你给它一个容易记忆的某站点的地址， 它给你 IP 地址(然后你就可以使用 bind(), connect(), sendto() 或者其它 函数) 。当一个人输入：</p><p><code>$ telnet whitehouse.gov</code></p><p>telnet 能知道它将连接 (connect()) 到 &quot;198.137.240.100&quot;。</p><p>但是这是如何工作的呢? 你可以调用函数 gethostbyname()：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
    <span class="token keyword">struct</span> <span class="token class-name">hostent</span> <span class="token operator">*</span><span class="token function">gethostbyname</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>很明白的是，它返回一个指向 struct hostent 的指针。这个数据结构 是这样的：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">hostent</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>h_name<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>h_aliases<span class="token punctuation">;</span>
    <span class="token keyword">int</span> h_addrtype<span class="token punctuation">;</span>
    <span class="token keyword">int</span> h_length<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>h_addr_list<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">h_addr</span> <span class="token expression">h_addr_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span></span>
</code></pre></div><p>这里是这个数据结构的详细资料：struct hostent:</p><ul><li>h_name – 地址的正式名称</li><li>h_aliases – 空字节-地址的预备名称的指针。</li><li>h_addrtype –地址类型; 通常是AF_INET。</li><li>h_length – 地址的比特长度。</li><li>h_addr_list – 零字节-主机网络地址指针。网络字节顺序。</li><li>h_addr - h_addr_list中的第一地址。</li></ul><p>gethostbyname() 成功时返回一个指向结构体 hostent 的指针，或者 是个空 (NULL) 指针。(但是和以前不同，不设置errno，h_errno 设置错 误信息。请看下面的 herror()。)</p><p>但是如何使用呢? 有时候（我们可以从电脑手册中发现），向读者灌输 信息是不够的。这个函数可不象它看上去那么难用。</p><p>这里是个例子：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">hostent</span> <span class="token operator">*</span>h<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 检查命令行 */</span> 
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">&quot;usage: getip address\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token operator">=</span><span class="token function">gethostbyname</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 取得地址信息 */</span> 
        <span class="token function">herror</span><span class="token punctuation">(</span><span class="token string">&quot;gethostbyname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Host name : %s\\n&quot;</span><span class="token punctuation">,</span> h<span class="token operator">-&gt;</span>h_name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;IP Address : %s\\n&quot;</span><span class="token punctuation">,</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token operator">*</span><span class="token punctuation">)</span>h<span class="token operator">-&gt;</span>h_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre></div><p>在使用 gethostbyname() 的时候，你不能用 perror() 打印错误信息 (因为 errno 没有使用)，你应该调用 herror()。</p><p>相当简单，你只是传递一个保存机器名的字符串(例如 &quot;whitehouse.gov&quot;) 给 gethostbyname()，然后从返回的数据结构 struct hostent 中获取信息。</p><p>唯一也许让人不解的是输出 IP 地址信息。h-&gt;h_addr 是一个 <code>char *</code>， 但是 inet_ntoa() 需要的是 struct in_addr。因此，我转换 h-&gt;h_addr 成 <code>struct in_addr *</code>，然后得到数据。</p><h3 id="客户-服务器背景知识" tabindex="-1"><a class="header-anchor" href="#客户-服务器背景知识" aria-hidden="true">#</a> 客户-服务器背景知识</h3><p>这里是个客户--服务器的世界。在网络上的所有东西都是在处理客户进 程和服务器进程的交谈。举个telnet 的例子。当你用 telnet (客户)通过23 号端口登陆到主机，主机上运行的一个程序(一般叫 telnetd，服务器)激活。 它处理这个连接，显示登陆界面，等等。</p><p><img src="`+k+`" alt="图2"></p><p>图2：客户机和服务器的关系</p><p>图 2 说明了客户和服务器之间的信息交换。</p><p>注意，客户--服务器之间可以使用SOCK_STREAM、SOCK_DGRAM 或者其它(只要它们采用相同的)。一些很好的客户--服务器的例子有 telnet/telnetd、 ftp/ftpd 和 bootp/bootpd。每次你使用 ftp 的时候，在远 端都有一个 ftpd 为你服务。</p><p>一般，在服务端只有一个服务器，它采用 fork() 来处理多个客户的连 接。基本的程序是：服务器等待一个连接，接受 (accept()) 连接，然后 fork() 一个子进程处理它。这是下一章我们的例子中会讲到的。</p><h3 id="简单的服务器" tabindex="-1"><a class="header-anchor" href="#简单的服务器" aria-hidden="true">#</a> 简单的服务器</h3><p>这个服务器所做的全部工作是在流式连接上发送字符串 &quot;Hello, World!\\n&quot;。你要测试这个程序的话，可以在一台机器上运行该程序，然后 在另外一机器上登陆：</p><p><code>$ telnet remotehostname 3490</code></p><p>remotehostname 是该程序运行的机器的名字。</p><p>服务器代码：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYPORT</span> <span class="token expression"><span class="token number">3490</span> </span><span class="token comment">/*定义用户连接端口*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BACKLOG</span> <span class="token expression"><span class="token number">10</span> </span><span class="token comment">/*多少等待连接控制*/</span></span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> new_fd<span class="token punctuation">;</span> <span class="token comment">/* listen on sock_fd, new connection on new_fd */</span>  
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> my_addr<span class="token punctuation">;</span>     <span class="token comment">/* my address information */</span>  
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> their_addr<span class="token punctuation">;</span>  <span class="token comment">/* connector&#39;s address information */</span>  
    <span class="token keyword">int</span> sin_size<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  

    my_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>           <span class="token comment">/* host byte order */</span>  
    my_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>MYPORT<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* short, network byte order */</span>  
    my_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span>   <span class="token comment">/* auto-fill with my IP */</span>  
    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>my_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/* zero the rest of the struct */</span>  

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>my_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> BACKLOG<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;listen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* main accept() loop */</span>
        sin_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>new_fd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>their_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sin_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;accept&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;server: got connection from %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>their_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* this is the child process */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">send</span><span class="token punctuation">(</span>new_fd<span class="token punctuation">,</span> <span class="token string">&quot;Hello, world!\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;send&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">close</span><span class="token punctuation">(</span>new_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">close</span><span class="token punctuation">(</span>new_fd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* parent doesn&#39;t need this */</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>WNOHANG<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* clean up child processes */</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre></div><p>如果你很挑剔的话，一定不满意我所有的代码都在一个很大的main() 函数中。如果你不喜欢，可以划分得更细点。</p><p>你也可以用我们下一章中的程序得到服务器端发送的字符串。</p><h3 id="简单的客户程序" tabindex="-1"><a class="header-anchor" href="#简单的客户程序" aria-hidden="true">#</a> 简单的客户程序</h3><p>这个程序比服务器还简单。这个程序的所有工作是通过 3490 端口连接到命令行中指定的主机，然后得到服务器发送的字符串。</p><p>客户代码:</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">3490</span> </span><span class="token comment">/* 客户机连接远程主机的端口 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXDATASIZE</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">/* 每次可以接收的最大字节 */</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> numbytes<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXDATASIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">hostent</span> <span class="token operator">*</span>he<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> their_addr<span class="token punctuation">;</span> <span class="token comment">/* connector&#39;s address information */</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">&quot;usage: client hostname\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>he<span class="token operator">=</span><span class="token function">gethostbyname</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* get the host info */</span>
        <span class="token function">herror</span><span class="token punctuation">(</span><span class="token string">&quot;gethostbyname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  

    their_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span> <span class="token comment">/* host byte order */</span>
    their_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* short, network byte order */</span>
    their_addr<span class="token punctuation">.</span>sin_addr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token operator">*</span><span class="token punctuation">)</span>he<span class="token operator">-&gt;</span>h_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>their_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* zero the rest of the struct */</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>their_addr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;connect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numbytes<span class="token operator">=</span><span class="token function">recv</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> MAXDATASIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;recv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    buf<span class="token punctuation">[</span>numbytes<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Received: %s&quot;</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>注意，如果你在运行服务器之前运行客户程序，connect() 将返回 &quot;Connection refused&quot; 信息，这非常有用。</p><h3 id="数据包-sockets" tabindex="-1"><a class="header-anchor" href="#数据包-sockets" aria-hidden="true">#</a> 数据包 Sockets</h3><p>我不想讲更多了，所以我给出代码 talker.c 和 listener.c。</p><p>listener 在机器上等待在端口 4590 来的数据包。talker 发送数据包到 一定的机器，它包含用户在命令行输入的内容。</p><p>这里就是 listener.c：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYPORT</span> <span class="token expression"><span class="token number">4950</span> </span><span class="token comment">/* the port users will be sending to */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXBUFLEN</span> <span class="token expression"><span class="token number">100</span></span></span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> my_addr<span class="token punctuation">;</span> <span class="token comment">/* my address information */</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> their_addr<span class="token punctuation">;</span> <span class="token comment">/* connector&#39;s address information */</span>
    <span class="token keyword">int</span> addr_len<span class="token punctuation">,</span> numbytes<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXBUFLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    my_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>           <span class="token comment">/* host byte order */</span>
    my_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>MYPORT<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* short, network byte order */</span>
    my_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span>   <span class="token comment">/* auto-fill with my IP */</span>
    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>my_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/* zero the rest of the struct */</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>my_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numbytes<span class="token operator">=</span><span class="token function">recvfrom</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> MAXBUFLEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>their_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr_len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;recvfrom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;got packet from %s\\n&quot;</span><span class="token punctuation">,</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>their_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;packet is %d bytes long\\n&quot;</span><span class="token punctuation">,</span>numbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">[</span>numbytes<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;packet contains \\&quot;%s\\&quot;\\n&quot;</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>注意在我们的调用 socket()，我们最后使用了 SOCK_DGRAM。同时， 没有必要去使用 listen() 或者 accept()。我们在使用无连接的数据报套接 字！</p><p>下面是 talker.c：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYPORT</span> <span class="token expression"><span class="token number">4950</span> </span><span class="token comment">/* the port users will be sending to */</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> their_addr<span class="token punctuation">;</span> <span class="token comment">/* connector&#39;s address information */</span>
    <span class="token keyword">struct</span> <span class="token class-name">hostent</span> <span class="token operator">*</span>he<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numbytes<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">&quot;usage: talker hostname message\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>he<span class="token operator">=</span><span class="token function">gethostbyname</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* get the host info */</span>  
        <span class="token function">herror</span><span class="token punctuation">(</span><span class="token string">&quot;gethostbyname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    their_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>        <span class="token comment">/* host byte order */</span>
    their_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>MYPORT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* short, network byte order */</span>
    their_addr<span class="token punctuation">.</span>sin_addr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token operator">*</span><span class="token punctuation">)</span>he<span class="token operator">-&gt;</span>h_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>their_addr<span class="token punctuation">.</span>sin_zero<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* zero the rest of the struct */</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numbytes<span class="token operator">=</span><span class="token function">sendto</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>their_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;sendto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sent %d bytes to %s\\n&quot;</span><span class="token punctuation">,</span>numbytes<span class="token punctuation">,</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>their_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这就是所有的了。在一台机器上运行 listener，然后在另外一台机器上 运行 talker。观察它们的通讯！</p><p>除了一些我在上面提到的数据套接字连接的小细节外，对于数据套接 字，我还得说一些，当一个讲话者呼叫connect()函数时并指定接受者的地 址时，从这点可以看出，讲话者只能向connect()函数指定的地址发送和接 受信息。因此，你不需要使用sendto()和recvfrom()，你完全可以用send() 和recv()代替。</p><h3 id="阻塞" tabindex="-1"><a class="header-anchor" href="#阻塞" aria-hidden="true">#</a> 阻塞</h3><p>阻塞，你也许早就听说了。&quot;阻塞&quot;是 &quot;sleep&quot; 的科技行话。你可能注意 到前面运行的 listener 程序，它在那里不停地运行，等待数据包的到来。 实际在运行的是它调用 recvfrom()，然后没有数据，因此 recvfrom() 说&quot; 阻塞 (block)&quot;，直到数据的到来。</p><p>很多函数都利用阻塞。accept() 阻塞，所有的 recv*() 函数阻塞。它 们之所以能这样做是因为它们被允许这样做。当你第一次调用 socket() 建 立套接字描述符的时候，内核就将它设置为阻塞。如果你不想套接字阻塞， 你就要调用函数 fcntl()：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fontl.h&gt;</span></span>
<span class="token punctuation">.</span>
<span class="token punctuation">.</span>
sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fcntl</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span>
<span class="token punctuation">.</span>
</code></pre></div><p>通过设置套接字为非阻塞，你能够有效地&quot;询问&quot;套接字以获得信息。如 果你尝试着从一个非阻塞的套接字读信息并且没有任何数据，它不允许阻 塞--它将返回 -1 并将 errno 设置为 EWOULDBLOCK。</p><p>但是一般说来，这种询问不是个好主意。如果你让你的程序在忙等状 态查询套接字的数据，你将浪费大量的 CPU 时间。更好的解决之道是用 下一章讲的 select() 去查询是否有数据要读进来。</p><h3 id="select-多路同步-i-o" tabindex="-1"><a class="header-anchor" href="#select-多路同步-i-o" aria-hidden="true">#</a> select()--多路同步 I/O</h3><p>虽然这个函数有点奇怪，但是它很有用。假设这样的情况：你是个服 务器，你一边在不停地从连接上读数据，一边在侦听连接上的信息。</p><p>没问题，你可能会说，不就是一个 accept() 和两个 recv() 吗? 这么 容易吗，朋友? 如果你在调用 accept() 的时候阻塞呢? 你怎么能够同时接 受 recv() 数据? “用非阻塞的套接字啊！” 不行！你不想耗尽所有的 CPU 吧? 那么，该如何是好?</p><p>select() 让你可以同时监视多个套接字。如果你想知道的话，那么它就 会告诉你哪个套接字准备读，哪个又准备写，哪个套接字又发生了例外 (exception)。</p><p>闲话少说，下面是 select()：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> numfds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>readfds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>writefds<span class="token punctuation">,</span>
            fd_set <span class="token operator">*</span>exceptfds<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这个函数监视一系列文件描述符，特别是 readfds、writefds 和 exceptfds。如果你想知道你是否能够从标准输入和套接字描述符 sockfd 读入数据，你只要将文件描述符 0 和 sockfd 加入到集合 readfds 中。参 数 numfds 应该等于最高的文件描述符的值加1。在这个例子中，你应该 设置该值为 sockfd+1。因为它一定大于标准输入的文件描述符 (0)。</p><p>当函数 select() 返回的时候，readfds 的值修改为反映你选择的哪个 文件描述符可以读。你可以用下面讲到的宏 FD_ISSET() 来测试。</p><p>在我们继续下去之前，让我来讲讲如何对这些集合进行操作。每个集 合类型都是 fd_set。下面有一些宏来对这个类型进行操作：</p><ul><li>FD_ZERO(fd_set *set) – 清除一个文件描述符集合</li><li>FD_SET(int fd, fd_set *set) - 添加fd到集合</li><li>FD_CLR(int fd, fd_set *set) – 从集合中移去fd</li><li>FD_ISSET(int fd, fd_set *set) – 测试fd是否在集合中</li></ul><p>最后，是有点古怪的数据结构 struct timeval。有时你可不想永远等待 别人发送数据过来。也许什么事情都没有发生的时候你也想每隔96秒在终 端上打印字符串 &quot;Still Going...&quot;。这个数据结构允许你设定一个时间，如果 时间到了，而 select() 还没有找到一个准备好的文件描述符，它将返回让 你继续处理。</p><p>数据结构 struct timeval 是这样的：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> tv_sec<span class="token punctuation">;</span> <span class="token comment">/* seconds */</span>
    <span class="token keyword">int</span> tv_usec<span class="token punctuation">;</span> <span class="token comment">/* microseconds */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>只要将 tv_sec 设置为你要等待的秒数，将 tv_usec 设置为你要等待 的微秒数就可以了。是的，是微秒而不是毫秒。1,000微秒等于1毫秒，1,000 毫秒等于1秒。也就是说，1秒等于1,000,000微秒。为什么用符号 &quot;usec&quot; 呢? 字母 &quot;u&quot; 很象希腊字母 Mu，而 Mu 表示 &quot;微&quot; 的意思。当然，函数 返回的时候 timeout 可能是剩余的时间，之所以是可能，是因为它依赖于 你的 Unix 操作系统。</p><p>哈！我们现在有一个微秒级的定时器！别计算了，标准的 Unix 系统 的时间片是100毫秒，所以无论你如何设置你的数据结构 struct timeval， 你都要等待那么长的时间。</p><p>还有一些有趣的事情：如果你设置数据结构 struct timeval 中的数据为 0，select() 将立即超时，这样就可以有效地轮询集合中的所有的文件描述 符。如果你将参数 timeout 赋值为 NULL，那么将永远不会发生超时，即 一直等到第一个文件描述符就绪。最后，如果你不是很关心等待多长时间， 那么就把它赋为 NULL 吧。</p><p>下面的代码演示了在标准输入上等待 2.5 秒：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STDIN</span> <span class="token expression"><span class="token number">0</span> </span><span class="token comment">/* file descriptor for standard input */</span></span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> tv<span class="token punctuation">;</span>
    fd_set readfds<span class="token punctuation">;</span>

    tv<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    tv<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">500000</span><span class="token punctuation">;</span>

    <span class="token function">FD_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>readfds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FD_SET</span><span class="token punctuation">(</span>STDIN<span class="token punctuation">,</span> <span class="token operator">&amp;</span>readfds<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* don&#39;t care about writefds and exceptfds: */</span>
    <span class="token function">select</span><span class="token punctuation">(</span>STDIN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>readfds<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FD_ISSET</span><span class="token punctuation">(</span>STDIN<span class="token punctuation">,</span> <span class="token operator">&amp;</span>readfds<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;A key was pressed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Timed out.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果你是在一个 line buffered 终端上，那么你敲的键应该是回车 (RETURN)，否则无论如何它都会超时。</p><p>现在，你可能回认为这就是在数据报套接字上等待数据的方式--你是对 的：它可能是。有些 Unix 系统可以按这种方式，而另外一些则不能。你 在尝试以前可能要先看看本系统的 man page 了。</p><p>最后一件关于 select() 的事情：如果你有一个正在侦听 (listen()) 的套 接字，你可以通过将该套接字的文件描述符加入到 readfds 集合中来看是 否有新的连接。</p><p>这就是我关于函数select() 要讲的所有的东西。</p><h3 id="参考书目" tabindex="-1"><a class="header-anchor" href="#参考书目" aria-hidden="true">#</a> 参考书目</h3><p><strong>Internetworking with TCP/IP, volumes I-III</strong> by Douglas E. Comer and David L. Stevens. Published by Prentice Hall. Second edition ISBNs: 0-13-468505-9, 0-13-472242-6, 0-13-474222-2. There is a third edition of this set which covers IPv6 and IP over ATM.</p><p><strong>Using C on the UNIX System</strong> by David A. Curry. Published by O&#39;Reilly &amp; Associates, Inc. ISBN 0-937175-23-4.</p><p><strong>TCP/IP Network Administration</strong> by Craig Hunt. Published by O&#39;Reilly &amp; Associates, Inc. ISBN 0-937175-82-X.</p><p><strong>TCP/IP Illustrated, volumes 1-3</strong> by W. Richard Stevens and Gary R. Wright. Published by Addison Wesley. ISBNs: 0-201-63346-9,0-201-63354-X, 0-201-63495-3.</p><p><strong>Unix Network Programming</strong> by W. Richard Stevens. Published by Prentice Hall. ISBN 0-13-949876-1.</p><h4 id="on-the-web" tabindex="-1"><a class="header-anchor" href="#on-the-web" aria-hidden="true">#</a> On the web</h4><p>BSD Sockets: A Quick And Dirty Primer(http://www.cs.umn.edu/~bentlema/unix/--has other great Unix system programming info, too!)</p><p>Client-Server Computing(http://pandonia.canberra.edu.au/ClientServer/socket.html)</p><p>Intro to TCP/IP (gopher)(gopher://gopher-chem.ucdavis.edu/11/Index/Internet_aw/Intro_the_Internet/intro.to.ip/)</p><p>Internet Protocol Frequently Asked Questions (France)(http://web.cnam.fr/Network/TCP-IP/)</p><p>The Unix Socket FAQ(http://www.ibrado.com/sock-faq/)</p><h4 id="rfcs-the-real-dirt" tabindex="-1"><a class="header-anchor" href="#rfcs-the-real-dirt" aria-hidden="true">#</a> RFCs--the real dirt</h4><p>RFC-768 -- The User Datagram Protocol (UDP) (ftp://nic.ddn.mil/rfc/rfc768.txt)</p><p>RFC-791 -- The Internet Protocol (IP) (ftp://nic.ddn.mil/rfc/rfc791.txt)</p><p>RFC-793 -- The Transmission Control Protocol (TCP) (ftp://nic.ddn.mil/rfc/rfc793.txt)</p><p>RFC-854 -- The Telnet Protocol (ftp://nic.ddn.mil/rfc/rfc854.txt)</p><p>RFC-951 -- The Bootstrap Protocol (BOOTP)　(ftp://nic.ddn.mil/rfc/rfc951.txt)</p><p>RFC-1350 -- The Trivial File Transfer Protocol (TFTP)　 (ftp://nic.ddn.mil/rfc/rfc1350.txt)</p>`,262);function y(f,g){const a=p("ExternalLinkIcon");return o(),e("div",null,[n("h1",r,[d,s(),n("a",h,[s("网络socket编程指南"),c(a)])]),m])}const w=t(i,[["render",y],["__file","netsoc13.html.vue"]]);export{w as default};
