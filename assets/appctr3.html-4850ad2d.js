import{_ as p,r as o,o as e,c,b as n,d as a,e as t,a as l}from"./app-a2b6e588.js";const u={},i=n("h1",{id:"用application-updater-block生成一个自我更新的winforms-应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#用application-updater-block生成一个自我更新的winforms-应用","aria-hidden":"true"},"#"),a(" 用Application Updater Block生成一个自我更新的WinForms 应用")],-1),k=n("p",null,"bigtall",-1),r={href:"http://dotnetjunkies.com/WebLog/bsblog/archive/2004/06/10/16118.aspx",target:"_blank",rel:"noopener noreferrer"},d={href:"http://weblogs.asp.net/duncanma/articles/10221.aspx",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"step-1-install-the-application-blocks",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#step-1-install-the-application-blocks","aria-hidden":"true"},"#"),a(" Step #1 Install the Application Blocks")],-1),g={href:"http://www.microsoft.com/downloads/details.aspx?FamilyId=C6C17F3A-D957-4B17-9B97-296FB4927C30&displaylang=en",target:"_blank",rel:"noopener noreferrer"},h=l(`<p>Run the MSI Installer.</p><h2 id="step-2-在项目中加入代码和引用" tabindex="-1"><a class="header-anchor" href="#step-2-在项目中加入代码和引用" aria-hidden="true">#</a> Step #2 在项目中加入代码和引用</h2><p>把下列工程加入到你的WinForm工程所在的解决方案:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>Microsoft<span class="token punctuation">.</span>ApplicationBlocks<span class="token punctuation">.</span>ApplicationUpdater
Microsoft<span class="token punctuation">.</span>ApplicationBlocks<span class="token punctuation">.</span>ApplicationUpdater<span class="token punctuation">.</span>Interfaces
Microsoft<span class="token punctuation">.</span>ApplicationBlocks<span class="token punctuation">.</span>ExceptionManagement
Microsoft<span class="token punctuation">.</span>ApplicationBlocks<span class="token punctuation">.</span>ExceptionManagement<span class="token punctuation">.</span>Interfaces
</code></pre></div><p>如果你选择默认安装的话，它们的位置可能是：</p><p><code>C:\\Program Files\\Microsoft Application Blocks for .NET\\Updater\\Code\\CS\\Microsoft.ApplicationBlocks.Updater</code></p><p>在你的WinForm工程中引用下列工程</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>Microsoft<span class="token punctuation">.</span>ApplicationBlocks<span class="token punctuation">.</span>ApplicationUpdater
Microsoft<span class="token punctuation">.</span>ApplicationBlocks<span class="token punctuation">.</span>ApplicationUpdater<span class="token punctuation">.</span>Interfaces
Microsoft<span class="token punctuation">.</span>ApplicationBlocks<span class="token punctuation">.</span>ExceptionManagement
</code></pre></div><p>把下列命名空间加入到你Form的.cs文件中</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>Serialization</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Xml</span><span class="token punctuation">;</span>
</code></pre></div><p>然后 添加这个位置的应用程序更新代码到你的代码中. 你需要从你的MainForm初始化方法中调用 <code>InitializeAutoUpdate()</code>。</p><h2 id="step-3-生成你应用程序的发布目录结构并配置-appstart-exe" tabindex="-1"><a class="header-anchor" href="#step-3-生成你应用程序的发布目录结构并配置-appstart-exe" aria-hidden="true">#</a> Step #3 生成你应用程序的发布目录结构并配置 AppStart.exe</h2><p>生成一个用于客户端程序安装的目录. 本例子中，我们用如下的目录：</p><p><code>C:\\Program Files\\YourApp\\1.0.0.0\\</code></p><p>现在复制 AppStart.exe 和 AppStart.exe.config 到类似如下的根目录中</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code> C:\\Program Files\\YourApp\\AppStart.exe
 C:\\Program Files\\YourApp\\AppStart.exe.config
</code></pre></div><p>说明: 这两个文件你可以在如下目录中找到 “C:\\Program Files\\Microsoft Application Blocks for .NET\\Updater\\Code\\CS\\Microsoft.ApplicationBlocks.Updater\\AppStart\\bin\\Debug“</p><h2 id="step-4-修改-appstart-exe-config-文件" tabindex="-1"><a class="header-anchor" href="#step-4-修改-appstart-exe-config-文件" aria-hidden="true">#</a> Step #4 修改 AppStart.exe.config 文件</h2><p>AppStart.exe 会启动你的应用程序，如果更新文件下载完成之后还有可能要重启. 它需要知道启动你最新的程序的目录位置.<br> 修改配置文件以配合当前的版本:</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appStart</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClientApplicationInfo</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appFolderName</span><span class="token punctuation">&gt;</span></span>C:\\Program Files\\YourApp\\1.0.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appFolderName</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appExeName</span><span class="token punctuation">&gt;</span></span>YourAppName.exe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appExeName</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>installedVersion</span><span class="token punctuation">&gt;</span></span>1.0.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>installedVersion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lastUpdated</span><span class="token punctuation">&gt;</span></span>2004-06-10T15:33:17.3745836-04:00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lastUpdated</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClientApplicationInfo</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appStart</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="step-5-生成你的公钥和私钥" tabindex="-1"><a class="header-anchor" href="#step-5-生成你的公钥和私钥" aria-hidden="true">#</a> Step #5: 生成你的公钥和私钥</h2><p>运行 &quot;C:\\Program Files\\Microsoft Application Blocks for .NET\\Updater\\Code\\CS\\Microsoft.ApplicationBlocks.Updater\\ManifestUtility\\bin\\Debug\\ManifestUtility.exe&quot;</p><p>选择 “File..Generate Keys” 会提示你是否需要保存: PublicKey.xml 和 PrivateKey.xml 这两个密钥接下来就会用到.</p><p>我这里要提醒大家，这些密钥只要生成一次就可以了, 因为下面几个地方需要引用到RSA公钥和私钥. 你需要把这些密钥存放在一个安全的地方，因为在发布一个新的更新的时候会用到它</p><h2 id="step-6-创建iis-虚拟目录" tabindex="-1"><a class="header-anchor" href="#step-6-创建iis-虚拟目录" aria-hidden="true">#</a> Step #6 创建IIS 虚拟目录</h2><p>在你的Web服务器上生成一个目录来存放你的更新文件. 在这两个目录中要放两样东西</p><ol><li>ServerManifest.xml 文件，包含最后版本的一些信息；</li><li>你的新程序的目录. 在这个目录里，生成一个目录来存放你的新版本程序. 在我们的例子中，我们用这两个目录, C:\\Inetpub\\AppUpdates 和C:\\Inetpub\\AppUpdates\\1.0.0.1</li></ol><p>用 IIS 管理器生成一个虚拟目录指向刚才的实际目录. 记下你的 URL, 在上传步骤中我们需要用到它. 你必须要打开虚拟目录的“目录浏览”选项.</p><h2 id="step-7-配置你的版本-1-0-0-0-的app-config-文件" tabindex="-1"><a class="header-anchor" href="#step-7-配置你的版本-1-0-0-0-的app-config-文件" aria-hidden="true">#</a> Step #7. 配置你的版本 1.0.0.0 的App.config 文件</h2><p>这里，我们会需要往里添加一些新东西. 首先, 我们需要加入一个configSections 元素来定义我们的 appUpdater 节:</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configSections</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>appUpdater<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.ApplicationBlocks.ApplicationUpdater.UpdaterSectionHandler,Microsoft.ApplicationBlocks.ApplicationUpdater<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configSections</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>接下来，我们需要添加一个 Version 键到我们的 appsettings 中, 我们首先设置我们的本地版本为 1.0.0.0, 这样我们就可以测试自动更新到版本 1.0.0.1</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appSettings</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>VERSION<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.0.0.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appSettings</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>最后，, 加入 appUpdater 节到你的配置文件中. 我这里用一对方括号把你要修改的值包含起来. 你可以直接从你上一步生成的 PublicKey.xml文件中复制 <code>&lt;RSAKeyValue&gt;</code> 元素.</p><p><code>&lt;xmlFile&gt;</code> 元素必须要指向你在Step #6创建的虚拟目录的 URL.</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appUpdater</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UpdaterConfiguration</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polling</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Seconds<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>120<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logListener</span> <span class="token attr-name">logPath</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>C:\\Program Files\\YourApp\\UpdaterLog.txt<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>downloader</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.ApplicationBlocks.ApplicationUpdater.Downloaders.BITSDownloader<span class="token punctuation">&quot;</span></span>
<span class="token attr-name">assembly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.ApplicationBlocks.ApplicationUpdater,Version=1.0.0.0,Culture=neutral,PublicKeyToken=null<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>validator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.ApplicationBlocks.ApplicationUpdater.Validators.RSAValidator<span class="token punctuation">&quot;</span></span> <span class="token attr-name">assembly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.ApplicationBlocks.ApplicationUpdater,Version=1.0.0.0,Culture=neutral,PublicKeyToken=null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RSAKeyValue</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Modulus</span><span class="token punctuation">&gt;</span></span>[YOUR MODULUS KEY]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Modulus</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Exponent</span><span class="token punctuation">&gt;</span></span>[YOUR EXPONENET]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Exponent</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RSAKeyValue</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>validator</span><span class="token punctuation">&gt;</span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[YOUR APP NAME]<span class="token punctuation">&quot;</span></span> <span class="token attr-name">useValidation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>client</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>baseDir</span><span class="token punctuation">&gt;</span></span>C:\\Program Files\\YourApp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>baseDir</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmlFile</span><span class="token punctuation">&gt;</span></span>C:\\Program Files\\YourApp\\AppStart.exe.config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmlFile</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tempDir</span><span class="token punctuation">&gt;</span></span>C:\\Program Files\\YourApp\\temp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tempDir</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>client</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmlFile</span><span class="token punctuation">&gt;</span></span>http://[YOUR URL]/ServerManifest.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmlFile</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmlFileDest</span><span class="token punctuation">&gt;</span></span>C:\\Program Files\\YourApp\\ServerManifest.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmlFileDest</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxWaitXmlFile</span><span class="token punctuation">&gt;</span></span>60000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxWaitXmlFile</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UpdaterConfiguration</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appUpdater</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="step-8-发布版本-1-0-0-0" tabindex="-1"><a class="header-anchor" href="#step-8-发布版本-1-0-0-0" aria-hidden="true">#</a> Step #8 发布版本 1.0.0.0</h2><p>设置应用程序版本号. 可以通过设置在 AssemblyInfo.cs 文件中的版本属性来设置版本号.</p><p><code>[assembly: AssemblyVersion(&quot;1.0.0.0&quot;)]</code></p><p>编译应用程序并复制 1.0.0.0 版程序到你程序的 1.0.0.0 目录中. “C:\\Program Files\\YourApp\\1.0.0.0“</p><p>这里，你需要运行一下 AppStart.exe. 更新过程会失败，因为我们并没有把发布 ServerManifest XML 文件来指示应用程序新版本是否可用. 你可以检查日志文件，位置在 C:\\Program Files\\YourApp\\ 目录中.</p><h2 id="step-9-构建版本-1-0-0-1" tabindex="-1"><a class="header-anchor" href="#step-9-构建版本-1-0-0-1" aria-hidden="true">#</a> Step #9 构建版本 1.0.0.1</h2><p>这是最有趣的部分. 首先, 通过更新应用程序的 AssemblyInfo.cs 和 App.config 文件内容来生成修订版本 1.0.0.1 . 编译程序, 然后复制文件到step #6生成的Web服务器目录中.</p><h2 id="step-10-生成服务器的清单文件" tabindex="-1"><a class="header-anchor" href="#step-10-生成服务器的清单文件" aria-hidden="true">#</a> Step #10 生成服务器的清单文件</h2><p>这个是最后一步. 如果你对本步骤中的.config文件作了任何修改的话，都必须把本步骤重来一遍. 做法如下:</p><p>再次运行 ManifestUtility 程序.<br> 在 “Update files folder“ 选择器中选择 1.0.0.1 目录 .<br> 输入更新位置的 URL .<br> 输入新版本号 1.0.0.1<br> 打开之前生成的 PrivateKey.xml 文件.<br> 选择验证类 “Microsoft.ApplicationBlocks.ApplicationUpdater.Validators.RSAValidator”<br> 鼠标点击 CreateManifest, 并保存 ServerManifest.xml 文件到你的虚拟服务器目录中.<br> 就这些! Pheeew! 从你的 C:\\Program Files\\YourApp\\ 目录中运行你的 AppStart.exe . 你的程序就会被装入, 当你的程序运行的时候，你就会得到一个提示 “新版本可用” . 新版本会下载到目录 C:\\Program Files\\YourApp\\1.0.0.1 中, 然后程序会自动重启. 如果有任何问题, 记得检查一下日志文件. 这些日志在诊断问题的时候会很有用的.</p><p>-Brendan</p><p>posted on Thursday, June 10, 2004 11:25 AM</p><p>附录：文中步骤 #2 包含的代码如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token preprocessor property">#<span class="token directive keyword">region</span> Auto-Update Stuff</span>

<span class="token keyword">private</span> <span class="token class-name">ApplicationUpdateManager</span> _updater <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">Thread</span> _updaterThread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> UPDATERTHREAD_JOIN_TIMEOUT <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MarshalEventDelegate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">UpdaterActionEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeAutoUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//  hook ProcessExit for a chance to clean up when closed peremptorily </span>
    AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>ProcessExit <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>CurrentDomain_ProcessExit<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//  make an Updater for use in-process with us </span>
    _updater <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApplicationUpdateManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//  hook Updater events </span>
    _updater<span class="token punctuation">.</span>DownloadStarted <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UpdaterActionEventHandler</span><span class="token punctuation">(</span>OnUpdaterDownloadStarted<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _updater<span class="token punctuation">.</span>FilesValidated <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UpdaterActionEventHandler</span><span class="token punctuation">(</span>OnUpdaterFilesValidated<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _updater<span class="token punctuation">.</span>UpdateAvailable <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UpdaterActionEventHandler</span><span class="token punctuation">(</span>OnUpdaterUpdateAvailable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _updater<span class="token punctuation">.</span>DownloadCompleted <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UpdaterActionEventHandler</span><span class="token punctuation">(</span>OnUpdaterDownloadCompleted<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//  start the updater on a separate thread so that our UI remains responsive </span>
    _updaterThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>_updater<span class="token punctuation">.</span>StartUpdater<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _updaterThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//  get version from config, set caption correctly </span>
    <span class="token class-name"><span class="token keyword">string</span></span> version <span class="token operator">=</span> System<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>ConfigurationSettings<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot; v. {0}&quot;</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CurrentDomain_ProcessExit</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">StopUpdater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StopUpdater</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// tell updater to stop </span>
    _updater<span class="token punctuation">.</span><span class="token function">StopUpdater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> _updaterThread<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//  join the updater thread with a suitable timeout </span>
        <span class="token class-name"><span class="token keyword">bool</span></span> isThreadJoined <span class="token operator">=</span> _updaterThread<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>UPDATERTHREAD_JOIN_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  check if we joined, if we didn&#39;t interrupt the thread </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isThreadJoined<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _updaterThread<span class="token punctuation">.</span><span class="token function">Interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        _updaterThread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// This handler gets fired by the Windows UI thread that is the main STA thread for THIS FORM.  It takes the same  </span>
<span class="token doc-comment comment">/// arguments as the event handler below it--sender, e--and acts on them using the main thread NOT the eventing thread </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>marshalled reference to the original event&#39;s sender argument<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>e<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>marshalled reference to the original event&#39;s args<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnUpdaterDownloadStartedHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">UpdaterActionEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Thread: &quot;</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;  DownloadStarted for application &#39;{0}&#39;&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>ApplicationName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// Event handler for Updater event.  This event is fired by the originating thread from &quot;inside&quot; the Updater.  While it is </span>
<span class="token doc-comment comment">/// possible for this same thread to act on our UI, it is NOT a good thing to do--UI is not threadsafe.   </span>
<span class="token doc-comment comment">/// Therefore here we marshal from the Eventing thread (belongs to Updater) to our window thread using the synchronous Invoke </span>
<span class="token doc-comment comment">/// mechanism. </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>event sender in this case ApplicationUpdaterManager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>e<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>the UpdaterActionEventArgs packaged by Updater, which gives us access to update information<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnUpdaterDownloadStarted</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">UpdaterActionEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//  using the synchronous &quot;Invoke&quot;.  This marshals from the eventing thread--which comes from the Updater and should not </span>
    <span class="token comment">//  be allowed to enter and &quot;touch&quot; the UI&#39;s window thread </span>
    <span class="token comment">//  so we use Invoke which allows us to block the Updater thread at will while only allowing window thread to update UI </span>
    Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;[OnUpdaterDownloadStarted]Thread: {0}&quot;</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MarshalEventDelegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>OnUpdaterDownloadStartedHandler<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> sender<span class="token punctuation">,</span> e <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// This handler gets fired by the Windows UI thread that is the main STA thread for THIS FORM.  It takes the same  </span>
<span class="token doc-comment comment">/// arguments as the event handler below it--sender, e--and acts on them using the main thread NOT the eventing thread </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>marshalled reference to the original event&#39;s sender argument<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>e<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>marshalled reference to the original event&#39;s args<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnUpdaterFilesValidatedHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">UpdaterActionEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;FilesValidated successfully for application &#39;{0}&#39; &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>ApplicationName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//  ask user to use new app </span>
    <span class="token class-name">DialogResult</span> dialog <span class="token operator">=</span> MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>
            <span class="token string">&quot;Would you like to stop this application and open the new version?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Open New Version?&quot;</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>YesNo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DialogResult<span class="token punctuation">.</span>Yes <span class="token operator">==</span> dialog<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">StartNewVersion</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>ServerInformation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// Event handler for Updater event.  This event is fired by the originating thread from &quot;inside&quot; the Updater.  While it is </span>
<span class="token doc-comment comment">/// possible for this same thread to act on our UI, it is NOT a good thing to do--UI is not threadsafe.   </span>
<span class="token doc-comment comment">/// Therefore here we marshal from the Eventing thread (belongs to Updater) to our window thread using the synchronous Invoke </span>
<span class="token doc-comment comment">/// mechanism. </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>event sender in this case ApplicationUpdaterManager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>e<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>the UpdaterActionEventArgs packaged by Updater, which gives us access to update information<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnUpdaterFilesValidated</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">UpdaterActionEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//  using the asynchronous &quot;BeginInvoke&quot;.   </span>
    <span class="token comment">//  we don&#39;t need/want to block here </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MarshalEventDelegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>OnUpdaterFilesValidatedHandler<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> sender<span class="token punctuation">,</span> e <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// This handler gets fired by the Windows UI thread that is the main STA thread for THIS FORM.  It takes the same  </span>
<span class="token doc-comment comment">/// arguments as the event handler below it--sender, e--and acts on them using the main thread NOT the eventing thread </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>marshalled reference to the original event&#39;s sender argument<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>e<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>marshalled reference to the original event&#39;s args<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnUpdaterUpdateAvailableHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">UpdaterActionEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Thread: &quot;</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">string</span></span> message <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>
        <span class="token string">&quot;Update available:  The new version on the server is {0} and current version is {1} would you like to upgrade?&quot;</span><span class="token punctuation">,</span>
        e<span class="token punctuation">.</span>ServerInformation<span class="token punctuation">.</span>AvailableVersion<span class="token punctuation">,</span>
        System<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>ConfigurationSettings<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//  for update available we actually WANT to block the downloading thread so we can refuse an update </span>
    <span class="token comment">//  and reset until next polling cycle; </span>
    <span class="token comment">//  NOTE that we don&#39;t block the thread _in the UI_, we have it blocked at the marshalling dispatcher &quot;OnUpdaterUpdateAvailable&quot; </span>
    <span class="token class-name">DialogResult</span> dialog <span class="token operator">=</span> MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">&quot;Update Available&quot;</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>YesNo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>DialogResult<span class="token punctuation">.</span>No <span class="token operator">==</span> dialog<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//  if no, stop the updater for this app </span>
        _updater<span class="token punctuation">.</span><span class="token function">StopUpdater</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>ApplicationName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Update Cancelled.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Update in progress.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// Event handler for Updater event.  This event is fired by the originating thread from &quot;inside&quot; the Updater.  While it is </span>
<span class="token doc-comment comment">/// possible for this same thread to act on our UI, it is NOT a good thing to do--UI is not threadsafe.   </span>
<span class="token doc-comment comment">/// Therefore here we marshal from the Eventing thread (belongs to Updater) to our window thread using the synchronous Invoke </span>
<span class="token doc-comment comment">/// mechanism. </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>event sender in this case ApplicationUpdaterManager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>e<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>the UpdaterActionEventArgs packaged by Updater, which gives us access to update information<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnUpdaterUpdateAvailable</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">UpdaterActionEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//  using the synchronous &quot;Invoke&quot;.  This marshals from the eventing thread--which comes from the Updater and should not </span>
    <span class="token comment">//  be allowed to enter and &quot;touch&quot; the UI&#39;s window thread </span>
    <span class="token comment">//  so we use Invoke which allows us to block the Updater thread at will while only allowing window thread to update UI </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MarshalEventDelegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>OnUpdaterUpdateAvailableHandler<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> sender<span class="token punctuation">,</span> e <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// This handler gets fired by the Windows UI thread that is the main STA thread for THIS FORM.  It takes the same  </span>
<span class="token doc-comment comment">/// arguments as the event handler below it--sender, e--and acts on them using the main thread NOT the eventing thread </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>marshalled reference to the original event&#39;s sender argument<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>e<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>marshalled reference to the original event&#39;s args<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnUpdaterDownloadCompletedHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">UpdaterActionEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Download Completed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// Event handler for Updater event.  This event is fired by the originating thread from &quot;inside&quot; the Updater.  While it is </span>
<span class="token doc-comment comment">/// possible for this same thread to act on our UI, it is NOT a good thing to do--UI is not threadsafe.   </span>
<span class="token doc-comment comment">/// Therefore here we marshal from the Eventing thread (belongs to Updater) to our window thread using the synchronous Invoke </span>
<span class="token doc-comment comment">/// mechanism. </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>event sender in this case ApplicationUpdaterManager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>e<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>the UpdaterActionEventArgs packaged by Updater, which gives us access to update information<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnUpdaterDownloadCompleted</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">UpdaterActionEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//  using the synchronous &quot;Invoke&quot;.  This marshals from the eventing thread--which comes from the Updater and should not </span>
    <span class="token comment">//  be allowed to enter and &quot;touch&quot; the UI&#39;s window thread </span>
    <span class="token comment">//  so we use Invoke which allows us to block the Updater thread at will while only allowing window thread to update UI </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MarshalEventDelegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>OnUpdaterDownloadCompletedHandler<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> sender<span class="token punctuation">,</span> e <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StartNewVersion</span><span class="token punctuation">(</span><span class="token class-name">ServerApplicationInfo</span> server<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">XmlDocument</span> doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//  load config file to get base dir </span>
    doc<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>SetupInformation<span class="token punctuation">.</span>ConfigurationFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//  get the base dir </span>
    <span class="token class-name"><span class="token keyword">string</span></span> baseDir <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">SelectSingleNode</span><span class="token punctuation">(</span><span class="token string">&quot;configuration/appUpdater/UpdaterConfiguration/application/client/baseDir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> newDir <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">,</span> <span class="token string">&quot;AppStart.exe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ProcessStartInfo</span> process <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProcessStartInfo</span><span class="token punctuation">(</span>newDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span>WorkingDirectory <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>newDir<span class="token punctuation">,</span> server<span class="token punctuation">.</span>AvailableVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//  launch new version (actually, launch AppStart.exe which HAS pointer to new version ) </span>
    Process<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>process<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//  tell updater to stop </span>
    <span class="token function">CurrentDomain_ProcessExit</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  leave this app </span>
    Environment<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,50);function v(w,f){const s=o("ExternalLinkIcon");return e(),c("div",null,[i,k,n("p",null,[n("a",r,[a("原文地址"),t(s)])]),n("p",null,[a("在过去的两个星期里, 我一直在做我的第一个真正的.net WinForm应用的开发. 这是一个很有趣的过程,我一直在疯了似的学习东西. 其中之一就是我要允许应用程序能够用微软的Application Updater Block进行自我更新。 当它正常工作的那一刻，让我有一种很大的成就感，同时我也意识到微软没有提供那种按步骤顺序的例子。 Duncan Mackenzie 有一个"),n("a",d,[a("很好的blog文章"),t(s)]),a("可以做一个开始，但是这个例子是VB做的并且没有提供RSA公钥和私钥的细节情况，所以我决定说一下我的工作过程。 希望能对你有用！")]),m,n("p",null,[n("a",g,[a("Download the Updater Application Block from Microsoft"),t(s)]),a(" .")]),h])}const U=p(u,[["render",v],["__file","appctr3.html.vue"]]);export{U as default};
