import{_ as s,o as a,c as p,a as t}from"./app-d9da1b6d.js";const o="/steven-blogs/assets/pic_img10_1-ed40105f.png",n="/steven-blogs/assets/pic_img10_2-84f9ff91.png",e="/steven-blogs/assets/pic_img10_3-1890dd8c.png",c="/steven-blogs/assets/pic_img10_4-75f6c3e6.png",l="/steven-blogs/assets/pic_img10_5-1c075841.png",u="/steven-blogs/assets/pic_img10_6-41d0200b.png",k={},i=t(`<h1 id="运用visual-c-完成基本数字图像处理" tabindex="-1"><a class="header-anchor" href="#运用visual-c-完成基本数字图像处理" aria-hidden="true">#</a> 运用Visual C#完成基本数字图像处理</h1><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>微软的新的.NET平台为开发者带来了许多新的诸如GDI+、Globalization之类的编程机制，同时还发明了一门全新的类似Java的编程语言－C#。对于这些新知识，我们应尽快了解、掌握并试图运用到实践项目中去，而通过实例学习的方法无疑是一个非常有效的途径。本文就通过一个简单的实例，向大家展示了在Visual C#中如何运用GDI+和Unsafe代码类等技术以实现简单的数字图像处理。</p><h2 id="一-概述" tabindex="-1"><a class="header-anchor" href="#一-概述" aria-hidden="true">#</a> 一．概述</h2><p>本文的实例是一个数字图像处理的应用程序，它完成的功能包括对图像颜色的翻转、对图像进行灰度处理和对图像进行增亮处理。该程序对图像进行处理部分的代码包含在一个专门的Filters类里面，通过调用该类里的静态成员函数，我们就可以实现相应的图像处理功能了。为实现图像处理，我们要对图像进行逐个象素处理。我们知道图像是由一个个的象素点组成的，对一幅图像的每个象素进行了相应的处理，最后整个图像也就处理好了。在这个过程中，我们只需对每个象素点进行相应的处理，在处理过程中却不需要考虑周围象素点对其的影响，所以相对来说程序的实现就变得简单多了。</p><p>由于GDI+中的BitmapData类不提供对图像内部数据的直接访问的方法，我们唯一的办法就是使用指针来获得图像的内部数据，这时我们就得运用unsafe这个关键字来指明函数中访问图像内部数据的代码块了。在程序中，我还运用了打开文件和保存文件等选项，以使我们的辛勤劳动不付之东流。</p><h2 id="二-程序的实现" tabindex="-1"><a class="header-anchor" href="#二-程序的实现" aria-hidden="true">#</a> 二．程序的实现</h2><p>1．打开Visual Studio.net，新建一个Visual C#的项目，在模板中选择&quot;Windows 应用程序&quot;即可，项目名称可自定（这里为ImageProcessor）。</p><p>2．为使窗体能显示图像，我们需要重载窗体的OnPaint（）事件函数，在该函数中我们将一个图像绘制在程序的主窗体上，为了使窗体能显示不同尺寸大小的图像，我们还将窗体的AutoScroll属性设置为true。这样，根据图像的尺寸，窗体两边就会出现相应的滚动条。该函数的实现如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_Paint</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>PaintEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Graphics</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span>
    g<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>m_Bitmap<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>AutoScrollPosition<span class="token punctuation">.</span>X<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>AutoScrollPosition<span class="token punctuation">.</span>Y<span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>m_Bitmap<span class="token punctuation">.</span>Width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>m_Bitmap<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>3．给主窗体添加一个主菜单，该主菜单完成了一些基本的操作，包括&quot;打开文件&quot;、&quot;保存文件&quot;、&quot;退出&quot;、&quot;翻转操作&quot;、&quot;灰度操作&quot;、&quot;增亮操作&quot;等。前面三个操作完成图像文件的打开和保存以及程序的退出功能，相应的事件处理函数如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">menuItemOpen_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">OpenFileDialog</span> openFileDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenFileDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    openFileDialog<span class="token punctuation">.</span>Filter <span class="token operator">=</span> <span class="token string">@&quot;Bitmap文件(*.bmp)|*.bmp|
                           Jpeg文件(*.jpg) | *.jpg |
                          所有合适文件(*.bmp|*.jpg)|*.bmp|*.jpg&quot;</span><span class="token punctuation">;</span>
    openFileDialog<span class="token punctuation">.</span>FilterIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    openFileDialog<span class="token punctuation">.</span>RestoreDirectory <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DialogResult<span class="token punctuation">.</span>OK <span class="token operator">==</span> openFileDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_Bitmap <span class="token operator">=</span> <span class="token punctuation">(</span>Bitmap<span class="token punctuation">)</span>Bitmap<span class="token punctuation">.</span><span class="token function">FromFile</span><span class="token punctuation">(</span>openFileDialog<span class="token punctuation">.</span>FileName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>AutoScroll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>AutoScrollMinSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Size</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>m_Bitmap<span class="token punctuation">.</span>Width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>m_Bitmap<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其中，<code>m_Bitmap</code>为主窗体类的一个数据成员，声明为<code>private System.Drawing.Bitmap m_Bitmap;</code>（注：因为程序中用到了相关的类，所以在程序文件的开始处应添加<code>using System.Drawing.Imaging;</code>）同时，在该类的构造函数中，我们必须先给它new一个Bitmap对象：<code>m_Bitmap = new Bitmap(2,2);</code>上述代码中的<code>this.Invalidate();</code>完成主窗体的重绘工作，它调用了主窗体的<code>OnPaint()</code>函数，结果就将打开的图像文件显示在主窗体上。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">menuItemSave_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">SaveFileDialog</span> saveFileDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SaveFileDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    saveFileDialog<span class="token punctuation">.</span>Filter <span class="token operator">=</span> <span class="token string">@&quot;Bitmap文件(*.bmp)|*.bmp|
              Jpeg文件(*.jpg) | *.jpg |
              所有合适文件(*.bmp/*.jpg)|*.bmp/*.jpg&quot;</span><span class="token punctuation">;</span>
    saveFileDialog<span class="token punctuation">.</span>FilterIndex <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>
    saveFileDialog<span class="token punctuation">.</span>RestoreDirectory <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>DialogResult<span class="token punctuation">.</span>OK <span class="token operator">==</span> saveFileDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_Bitmap<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>saveFileDialog<span class="token punctuation">.</span>FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其中<code>m_Bitmap.Save(saveFileDialog.FileName);</code>一句完成了图像文件的保存，正是运用了GDI+的强大功能，我们只需这么一条简单的语句就完成了以前很大工作量的任务，所以合理运用.NET中的新机制一定会大大简化我们的工作的。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">menuItemExit_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>接下来，三个主要操作的事件处理函数如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">menuItemInvert_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Filters<span class="token punctuation">.</span><span class="token function">Invert</span><span class="token punctuation">(</span>m_Bitmap<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">menuItemGray_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Filters<span class="token punctuation">.</span><span class="token function">Gray</span><span class="token punctuation">(</span>m_Bitmap<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">menuItemBright_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Parameter</span> dlg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Parameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dlg<span class="token punctuation">.</span>nValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DialogResult<span class="token punctuation">.</span>OK <span class="token operator">==</span> dlg<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Filters<span class="token punctuation">.</span><span class="token function">Brightness</span><span class="token punctuation">(</span>m_Bitmap<span class="token punctuation">,</span> dlg<span class="token punctuation">.</span>nValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>三个函数中分别调用了相应的图像处理函数Invert()、Gray()、Brightness()等三个函数。这三个函数Filters类中的三个类型为public的静态函数（含有static关键字），它们的返回值类型均是bool型的，根据返回值我们可以决定是否进行主窗体的重绘工作。</p><p>Invert()、Gray()、Brightness()等三个函数均包含在Filters类里面，Invert()函数的算法如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Invert</span><span class="token punctuation">(</span><span class="token class-name">Bitmap</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">BitmapData</span> bmData <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">LockBits</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> b<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span>
       ImageLockMode<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">,</span> PixelFormat<span class="token punctuation">.</span>Format24bppRgb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> stride <span class="token operator">=</span> bmData<span class="token punctuation">.</span>Stride<span class="token punctuation">;</span>
    <span class="token class-name">System<span class="token punctuation">.</span>IntPtr</span> Scan0 <span class="token operator">=</span> bmData<span class="token punctuation">.</span>Scan0<span class="token punctuation">;</span>
    <span class="token keyword">unsafe</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>Scan0<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nOffset <span class="token operator">=</span> stride <span class="token operator">-</span> b<span class="token punctuation">.</span>Width <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nWidth <span class="token operator">=</span> b<span class="token punctuation">.</span>Width <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Height<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> nWidth<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">-</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">++</span>p<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p <span class="token operator">+=</span> nOffset<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    b<span class="token punctuation">.</span><span class="token function">UnlockBits</span><span class="token punctuation">(</span>bmData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>该函数以及后面的函数的参数都是<code>Bitmap</code>类型的，它们传值的对象就是程序中所打开的图像文件了。该函数中的<code>BitmapData</code>类型的<code>bmData</code>包含了图像文件的内部信息，<code>bmData</code>的<code>Stride</code>属性指明了一条线的宽度，而它的<code>Scan0</code>属性则是指向图像内部信息的指针。本函数完成的功能是图像颜色的翻转，实现的方法即用255减去图像中的每个象素点的值，并将所得值设置为原象素点处的值，对每个象素点进行如此的操作，只到整幅图像都处理完毕。函数中的<code>unsafe</code>代码块是整个函数的主体部分，首先我们取得图像内部数据的指针，然后设置好偏移量，同时设置<code>nWidth</code>为<code>b.Width*3</code>，因为每个象素点包含了三种颜色成分，对每个象素点进行处理时便要进行三次处理。接下来运用两个嵌套的for循环完成对每个象素点的处理，处理的核心便是一句：<code>p[0] = (byte)(255-p[0]);</code>。在<code>unsafe</code>代码块后，便可运用<code>b.UnlockBits(bmData)</code>进行图像资源的释放。函数执行成功，最后返回<code>true</code>值。注：由于是要编译不安全代码，所以得将项目属性页中的&quot;允许不安全代码块&quot;属性设置为<code>true</code>，图示如下：</p><p><img src="`+o+'" alt="img_1"></p><p>该函数实现的程序效果如下：</p><p><img src="'+n+'" alt="img_2"><br> （处理前）</p><p><img src="'+e+`" alt="img_3"><br> （处理后）</p><p>Gray()函数的算法如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Gray</span><span class="token punctuation">(</span><span class="token class-name">Bitmap</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">BitmapData</span> bmData <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">LockBits</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> b<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span>
              ImageLockMode<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">,</span> PixelFormat<span class="token punctuation">.</span>Format24bppRgb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> stride <span class="token operator">=</span> bmData<span class="token punctuation">.</span>Stride<span class="token punctuation">;</span>
    <span class="token class-name">System<span class="token punctuation">.</span>IntPtr</span> Scan0 <span class="token operator">=</span> bmData<span class="token punctuation">.</span>Scan0<span class="token punctuation">;</span>
    <span class="token keyword">unsafe</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>Scan0<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nOffset <span class="token operator">=</span> stride <span class="token operator">-</span> b<span class="token punctuation">.</span>Width <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">byte</span></span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Height<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Width<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                blue <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                green <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                red <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">.299</span> <span class="token operator">*</span> red <span class="token operator">+</span> <span class="token number">.587</span> <span class="token operator">*</span> green <span class="token operator">+</span> <span class="token number">.114</span> <span class="token operator">*</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                p <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p <span class="token operator">+=</span> nOffset<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    b<span class="token punctuation">.</span><span class="token function">UnlockBits</span><span class="token punctuation">(</span>bmData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>本函数完成的功能是对图像进行灰度处理，我们的基本想法可是将每个象素点的三种颜色成分的值取平均值。然而由于人眼的敏感性，这样完全取平均值的做法的效果并不好，所以在程序中我取了三个效果最好的参数：.299，.587，.114。不过在这里要向读者指明的是，在GDI+中图像存储的格式是BGR而非RGB，即其顺序为：Blue、Green、Red。所以在for循环内部一定要设置好red、green、blue等变量的值，切不可颠倒。函数执行成功后，同样返回true值。</p><p>该函数实现的程序效果如下：</p><p><img src="`+n+'" alt="img_4"><br> （处理前）</p><p><img src="'+c+`" alt="img_5"><br> （处理后）</p><p>Brightness()函数的算法如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Brightness</span><span class="token punctuation">(</span><span class="token class-name">Bitmap</span> b<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> nBrightness<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nBrightness <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">255</span> <span class="token operator">||</span> nBrightness <span class="token operator">&gt;</span> <span class="token number">255</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">BitmapData</span> bmData <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">LockBits</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>Width<span class="token punctuation">,</span>
                                b<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> ImageLockMode<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">,</span>
                                PixelFormat<span class="token punctuation">.</span>Format24bppRgb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> stride <span class="token operator">=</span> bmData<span class="token punctuation">.</span>Stride<span class="token punctuation">;</span>
    <span class="token class-name">System<span class="token punctuation">.</span>IntPtr</span> Scan0 <span class="token operator">=</span> bmData<span class="token punctuation">.</span>Scan0<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> nVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">unsafe</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>Scan0<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nOffset <span class="token operator">=</span> stride <span class="token operator">-</span> b<span class="token punctuation">.</span>Width <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> nWidth <span class="token operator">=</span> b<span class="token punctuation">.</span>Width <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Height<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> nWidth<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                nVal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nBrightness<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>nVal <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> nVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>nVal <span class="token operator">&gt;</span> <span class="token number">255</span><span class="token punctuation">)</span> nVal <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>
                p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>nVal<span class="token punctuation">;</span>
                <span class="token operator">++</span>p<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p <span class="token operator">+=</span> nOffset<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    b<span class="token punctuation">.</span><span class="token function">UnlockBits</span><span class="token punctuation">(</span>bmData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>本函数完成的功能是对图像进行增亮处理，它比上面两个函数多了一个增亮参数－nBrightness，该参数由用户输入，范围为－255～255。在取得了增亮参数后，函数的unsafe代码部分对每个象素点的不同颜色成分进行逐个处理，即在原来值的基础上加上一个增亮参数以获得新的值。同时代码中还有一个防止成分值越界的操作，因为RGB成分值的范围为0～255，一旦超过了这个范围就要重新设置。函数最后执行成功后，同样得返回true值。</p><p>该函数实现的程序效果如下：</p><p><img src="`+l+'" alt="img_6"></p><p>首先，我们把图像增亮的参数设置为100（其范围为－255～255），然后执行效果如下，读者也可尝试其他的参数值。</p><p><img src="'+n+'" alt="img_7"><br> （处理前）</p><p><img src="'+u+`" alt="img_8"><br> （处理后）</p><h2 id="三-小结" tabindex="-1"><a class="header-anchor" href="#三-小结" aria-hidden="true">#</a> 三．小结</h2><p>本文通过一个简单的实例向大家展现了用Visual C#以及GDI+完成数字图像处理的基本方法，通过实例，我们不难发现合理运用新技术不仅可以大大简化我们的编程工作，还可以提高编程的效率。不过我们在运用新技术的同时也得明白掌握基本的编程思想才是最主要的，不同的语言、不同的机制只是实现的具体方式不同而已，其内在的思想还是相通的。对于上面的例子，掌握了编写图像处理函数的算法，用其他的方式实现也应该是可行的。同时，在上面的基础上，读者不妨试着举一反三，编写出更多的图像处理的函数来，以充实并完善这个简单的实例。</p><p>附带的源代码文件为：ImageProcessor.rar</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>Powered by DvNews.net
来源：网络
阅读：305 次
日期：2003-6-18
</code></pre></div>`,44),r=[i];function d(m,g){return a(),p("div",null,r)}const y=s(k,[["render",d],["__file","pic_img10.html.vue"]]);export{y as default};
