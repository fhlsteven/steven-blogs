import{_ as t,r as p,o,c as e,b as n,d as s,e as c,a as l}from"./app-f0851ed3.js";const u={},k=l(`<h1 id="用c-访问hotmail" tabindex="-1"><a class="header-anchor" href="#用c-访问hotmail" aria-hidden="true">#</a> 用C#访问Hotmail</h1><blockquote><p>作者：仙人掌工作室 本文选自：赛迪网 2003年03月31日</p></blockquote><p>POP邮件协议的优点在于它是一个开放的标准，有着完善的文档，这就使得编写POP邮件客户程序不那么困难，只要掌握了POP、SMTP的基础知识，就可以写出代理程序来执行各种任务，例如过滤广告和垃圾邮件，或提供e-mail自动应答服务。</p><p>Hotmail是世界上影响最广的Web邮件系统，遗憾的是，当我们要为Hotmail编写独立的客户程序（不通过浏览器访问的客户程序）时，马上就会遇到Hotmail不提供POP网关这一障碍。</p><p>虽然Hotmail不提供POP支持，但浏览器并非访问Hotmail的唯一途径。例如，利用Outlook Express可以直接连接到标准的Hotmail或MSN信箱，提取、删除、移动或发送邮件。利用HTTP包监视器，我们可以监视到Outlook Express和Hotmail的通信过程，分析出客户程序如何连接到Hotmail信箱。</p><p>Outlook Express利用了一种通常称为HTTPMail的未公开的协议，借助一组HTTP/1.1扩展访问Hotmail。本文将介绍HTTPMail的一些特点以及利用C#客户程序访问Hotmail的过程。本文的示例程序利用COM互操作将XMLHTTP用作一种传输服务。XMLHTTP组件提供了一个完善的HTTP实现，除了包括认证功能，还能够在发送HTTP请求给服务器之前设置定制的HTTP头。</p><h2 id="一、连接httpmail网关" tabindex="-1"><a class="header-anchor" href="#一、连接httpmail网关" aria-hidden="true">#</a> 一、连接HTTPMail网关</h2><p>Hotmail信箱默认的HTTPMail网关在<code>http://services.msn.com/svcs/hotmail/httpmail.asp</code>。HTTPMail协议实际上是一个标准的WebDAV服务，只不过尚未公开而已。在编写C#程序时，我们可以方便地调用.NET框架在System.Net名称空间中提供的各个TCP和HTTP类。另外，由于我们要操作WebDAV，在C#环境下利用XMLHTTP连接Hotmail最为简便，只需引用一下MSXML2组件就可以直接访问。注意在本文的代码片断中，带有下滑线后缀的变量是示例代码中声明的成员域：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 获得名称空间</span>
<span class="token keyword">using</span> <span class="token namespace">MSXML2</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token comment">// 创建对象</span>
xmlHttp_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XMLHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>为了连接到安全服务器，WebDAV协议要求执行HTTP/1.1验证。HTTPMail客户程序发出的第一个请求利用WebDAV PROPFIND方法查找一组属性，其中包括Hotmail广告条的URL以及信箱文件夹的位置：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>propfind</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>D</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DAV:<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>h</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.microsoft.com/hotmail/<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>hm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>urn:schemas:httpmail:<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>prop</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">h:</span>adbar</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>contacts</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>inbox</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>outbox</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>sendmsg</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>sentitems</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>deleteditems</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>drafts</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>msgfolderroot</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">h:</span>maxpoll</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">h:</span>sig</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>prop</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>propfind</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>通过XMLHTTP发送第一个请求时，首先指定WebDAV服务器URL，然后生成XML请求的内容：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 指定服务器的URL</span>
<span class="token class-name"><span class="token keyword">string</span></span> serverUrl <span class="token operator">=</span> <span class="token string">&quot;http://services.msn.com/svcs/hotmail/httpmail.asp&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 构造查询</span>
<span class="token class-name"><span class="token keyword">string</span></span> folderQuery <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
folderQuery <span class="token operator">+=</span> <span class="token string">&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&lt;D:propfind xmlns:D=&#39;DAV:&#39; &quot;</span><span class="token punctuation">;</span>
folderQuery <span class="token operator">+=</span> <span class="token string">&quot;xmlns:h=&#39;http://schemas.microsoft.com/hotmail/&#39; &quot;</span><span class="token punctuation">;</span>
folderQuery <span class="token operator">+=</span> <span class="token string">&quot;xmlns:hm=&#39;urn:schemas:httpmail:&#39;&gt;&lt;D:prop&gt;&lt;h:adbar/&gt;&quot;</span><span class="token punctuation">;</span>
folderQuery <span class="token operator">+=</span> <span class="token string">&quot;&lt;hm:contacts/&gt;&lt;hm:inbox/&gt;&lt;hm:outbox/&gt;&lt;hm:sendmsg/&gt;&quot;</span><span class="token punctuation">;</span>
folderQuery <span class="token operator">+=</span> <span class="token string">&quot;&lt;hm:sentitems/&gt;&lt;hm:deleteditems/&gt;&lt;hm:drafts/&gt;&quot;</span><span class="token punctuation">;</span>
folderQuery <span class="token operator">+=</span> <span class="token string">&quot;&lt;hm:msgfolderroot/&gt;&lt;h:maxpoll/&gt;&lt;h:sig/&gt;&lt;/D:prop&gt;&lt;/D:propfind&gt;&quot;</span><span class="token punctuation">;</span>
</code></pre></div><p>XMLHTTP组件提供了一个open()方法来建立与HTTP服务器的连接：</p><p><code>void open(string method, string url, bool async, string user, string password);</code></p><p>open()方法的第一个参数指定了用来打开连接的HTTP方法，例如GET、POST、PUT或PROPFIND，通过这些HTTP方法我们可以提取文件夹信息、收集邮件或发送新邮件。为连接到Hotmail网关，我们指定用PROPFIND方法来查询信箱。注意open()方法允许执行异步调用（默认启用），对于带图形用户界面的邮件客户程序来说，异步调用是最理想的调用方式。由于本文的示例程序是一个控制台应用，我们把这个参数设置成false。</p><p>为了执行身份验证，我们在open()方法中指定了用户名字和密码。在使用XMLHTTP组件时，如果open()方法没有提供用户名字和密码参数，但网站要求执行身份验证，XMLHTTP将显示出一个登录窗口。为了打开通向Hotmail网关的连接，我们把PROPFIND请求的头设置成XML查询的内容，消息的正文保持空白，然后发送消息：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 打开一个通向Hotmail服务器的连接</span>
xmlHttp_<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;PROPFIND&quot;</span><span class="token punctuation">,</span> serverUrl<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 发送请求</span>
xmlHttp_<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;PROPFIND&quot;</span><span class="token punctuation">,</span> folderQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
xmlHttp_<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="二、分析信箱的文件夹列表" tabindex="-1"><a class="header-anchor" href="#二、分析信箱的文件夹列表" aria-hidden="true">#</a> 二、分析信箱的文件夹列表</h2><p>发送给services.msn.com的请求通常要经历几次重定向，经过服务器端的负载平衡处理，最后请求会被传递到一个空闲的Hotmail服务器，并执行身份验证。在客户端，这个重定向、执行身份验证的交互过程由XMLHTTP组件负责处理。成功建立连接后，服务器还会要求设置一些Cookie、验证当前会话的合法性，这部分工作同样也由XMLHTTP组件自动处理。初始的连接请求发出之后，服务器将返回一个XML格式的应答：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 获得应答的内容</span>
<span class="token class-name"><span class="token keyword">string</span></span> folderList <span class="token operator">=</span> xmlHttp_<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>
</code></pre></div><p>服务器返回的应答包含许多有用的信息，其中包括信箱中文件夹的URL位置，下面是一个例子：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;Windows-1252&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>response</span><span class="token punctuation">&gt;</span></span>
    ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>propstat</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>prop</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">h:</span>adbar</span><span class="token punctuation">&gt;</span></span>AdPane=Off*...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">h:</span>adbar</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>contacts</span><span class="token punctuation">&gt;</span></span>http://law15.oe.hotmail.com/...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">hm:</span>contacts</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>inbox</span><span class="token punctuation">&gt;</span></span>http://law15.oe.hotmail.com/...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">hm:</span>inbox</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>sendmsg</span><span class="token punctuation">&gt;</span></span>http://law15.oe.hotmail.com/...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">hm:</span>sendmsg</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>sentitems</span><span class="token punctuation">&gt;</span></span>http://law15.oe.hotmail.com/...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">hm:</span>sentitems</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>deleteditems</span><span class="token punctuation">&gt;</span></span>http://law15.oe.hotmail.com/...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">hm:</span>deleteditems</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>msgfolderroot</span><span class="token punctuation">&gt;</span></span>http://law15.oe.hotmail.com/...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">hm:</span>msgfolderroot</span><span class="token punctuation">&gt;</span></span>
        ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>prop</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>response</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>multistatus</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>在本文的控制台示例程序中，我们感兴趣的两个文件夹是收件箱和发件箱的文件夹，它们分别用于接收和发送邮件。</p><p>在C#环境中解析XML的方法很多，由于我们肯定代码涉及的所有XML文档总是合法的，所以可以利用System.XML.XmlTextReader速度快的优势。XmlTextReader是一个“只向前”的读取器，下面把XML字符数据转换成字符流，初始化XML读取器：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 初始化</span>
inboxUrl_ <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
sendUrl_ <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 装入XML</span>
<span class="token class-name">StringReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringReader</span><span class="token punctuation">(</span>folderList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">XmlTextReader</span> xml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlTextReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>遍历各个节点，选取出hm:inbox和hm:sendmsg节点，这两个节点分别代表收件箱和发件箱：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 读取XML数据</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>xml<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 是一个XML元素？</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>xml<span class="token punctuation">.</span>NodeType <span class="token operator">==</span> XmlNodeType<span class="token punctuation">.</span>Element<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 获取该节点</span>
        <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> xml<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
        <span class="token comment">// 该节点代表收件箱？</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">&quot;hm:inbox&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 保存收件箱URL</span>
            xml<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            inboxUrl_ <span class="token operator">=</span> xml<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 该节点代表发件箱？</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">&quot;hm:sendmsg&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 保存发件箱URL</span>
            xml<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sendUrl_ <span class="token operator">=</span> xml<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>只有先获取当前这次会话的合法的收件箱和发件箱URL，才可以发送和接收邮件。</p><h2 id="三、列举文件夹内容" tabindex="-1"><a class="header-anchor" href="#三、列举文件夹内容" aria-hidden="true">#</a> 三、列举文件夹内容</h2><p>得到了信箱文件夹（如收件箱）的URL之后，就可以向该文件夹的URL发送WebDAV请求列举其内容。示例程序定义了一个托管类型MailItem，用来保存文件夹里一项内容（即一个邮件）的信息。文件夹内容列举从初始化一个MailItems数组开始：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 初始化</span>
<span class="token class-name">ArrayList</span> mailItems <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>为获得邮件主题、收件人地址、发件人地址之类的邮件基本信息，我们要用到下面XML格式的WebDAV查询：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>propfind</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>D</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DAV:<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>hm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>urn:schemas:httpmail:<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>m</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>urn:schemas:mailheader:<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>prop</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>isfolder</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>read</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">m:</span>hasattachment</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">m:</span>to</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">m:</span>from</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">m:</span>subject</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">m:</span>date</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>getcontentlength</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>prop</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>propfind</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>生成上述XML查询字符串的C#代码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 构造查询</span>
<span class="token class-name"><span class="token keyword">string</span></span> getMailQuery <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
getMailQuery <span class="token operator">+=</span> <span class="token string">&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&lt;D:propfind xmlns:D=&#39;DAV:&#39; &quot;</span><span class="token punctuation">;</span>
getMailQuery <span class="token operator">+=</span> <span class="token string">&quot;xmlns:hm=&#39;urn:schemas:httpmail:&#39; &quot;</span><span class="token punctuation">;</span>
getMailQuery <span class="token operator">+=</span> <span class="token string">&quot;xmlns:m=&#39;urn:schemas:mailheader:&#39;&gt;&lt;D:prop&gt;&lt;D:isfolder/&gt;&quot;</span><span class="token punctuation">;</span>
getMailQuery <span class="token operator">+=</span> <span class="token string">&quot;&lt;hm:read/&gt;&lt;m:hasattachment/&gt;&lt;m:to/&gt;&lt;m:from/&gt;&lt;m:subject/&gt;&quot;</span><span class="token punctuation">;</span>
getMailQuery <span class="token operator">+=</span> <span class="token string">&quot;&lt;m:date/&gt;&lt;D:getcontentlength/&gt;&lt;/D:prop&gt;&lt;/D:propfind&gt;&quot;</span><span class="token punctuation">;</span>
</code></pre></div><p>就象前面获取信箱文件夹清单的方式一样，上述请求也通过XMLHTTP用PROPFIND方法发送，这次我们把请求的正文设置成查询字符串。由于当前会话的用户身份已经通过验证，所以XMLHTTP open()调用中不必再提供用户名字和密码：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 获取邮件信息</span>
xmlHttp_<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;PROPFIND&quot;</span><span class="token punctuation">,</span> folderUrl<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xmlHttp_<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>getMailQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> folderInfo <span class="token operator">=</span> xmlHttp_<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>
</code></pre></div><p>如果请求成功，服务器返回的应答XML流包含了该文件夹中各个邮件的信息：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>multistatus</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>response</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>href</span><span class="token punctuation">&gt;</span></span>
        http://sea1.oe.hotmail.com/cgi-bin/hmdata/...
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>href</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>propstat</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>prop</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">hm:</span>read</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">hm:</span>read</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">m:</span>to</span><span class="token punctuation">/&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">m:</span>from</span><span class="token punctuation">&gt;</span></span>Mark Anderson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">m:</span>from</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">m:</span>subject</span><span class="token punctuation">&gt;</span></span>RE: New Information<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">m:</span>subject</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">m:</span>date</span><span class="token punctuation">&gt;</span></span>2002-08-06T16:38:39<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">m:</span>date</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>getcontentlength</span><span class="token punctuation">&gt;</span></span>1238<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>getcontentlength</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>prop</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">D:</span>status</span><span class="token punctuation">&gt;</span></span>HTTP/1.1 200 OK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>status</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>propstat</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">D:</span>response</span><span class="token punctuation">&gt;</span></span>
    ...
</code></pre></div><p>观察服务器返回的应答，我们发现每一个节点包含一组标识邮件的域，例如通过标记可提取出邮件。下面我们再次使用System.XML.XmlTextReader解析这个XML数据流，首先初始化流读取器：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">MailItem</span> mailItem <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">// 装入XML</span>
<span class="token class-name">StringReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringReader</span><span class="token punctuation">(</span>folderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">XmlTextReader</span> xml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlTextReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="四、分析邮件基本信息" tabindex="-1"><a class="header-anchor" href="#四、分析邮件基本信息" aria-hidden="true">#</a> 四、分析邮件基本信息</h2><p>为了遍历一次就解析好整个XML文档，我们在每次打开元素时就创建一个新的MailItem实例，一遇到标记的末尾就保存该实例，在此期间，我们提取并设置MailItem的域：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 读取XML数据</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Xml</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>xml<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> xml<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
    <span class="token class-name">XmlNodeType</span> nodeType <span class="token operator">=</span> xml<span class="token punctuation">.</span>NodeType<span class="token punctuation">;</span>
    <span class="token comment">// 是一个email？</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">&quot;D:response&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 开始？</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeType <span class="token operator">==</span> XmlNodeType<span class="token punctuation">.</span>Element<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 创建一个新的MailItem</span>
            mailItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MailItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 结束？</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeType <span class="token operator">==</span> XmlNodeType<span class="token punctuation">.</span>EndElement<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 保存email</span>
            mailItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>mailItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 清除变量</span>
            mailItem <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 是一个元素？</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeType <span class="token operator">==</span> XmlNodeType<span class="token punctuation">.</span>Element<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 邮件的URL属性</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">&quot;D:href&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 继续读取</span>
            xml<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mailItem<span class="token punctuation">.</span>Url <span class="token operator">=</span> xml<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 邮件的“已阅读”属性</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">&quot;hm:read&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 继续读取</span>
            xml<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mailItem<span class="token punctuation">.</span>IsRead <span class="token operator">=</span> <span class="token punctuation">(</span>xml<span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 其他MailItem的属性...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上面的代码枚举指定文件夹内的每一个MailItem，分别提取各个MailItem的下列属性：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>XML节点  说明  
D:href  用来提取邮件的URL  
hm:read  如果邮件已阅读，则该标记被设置  
m:to  收件人  
m:from  发件人  
m:subject  邮件主题  
m:date  时间标记  
D:getcontentlength  邮件的大小（字节数）
</code></pre></div><h2 id="五、接收邮件" tabindex="-1"><a class="header-anchor" href="#五、接收邮件" aria-hidden="true">#</a> 五、接收邮件</h2><p>枚举出文件夹里面的MailItem之后，我们就可以利用MailItem的URL获得邮件本身，只需要向Hotmail服务器发送一个HTTP/1.1 GET请求就可以了。示例代码中的LoadMail()函数输入一个MailItem实例作为参数，返回邮件的内容：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 下载MailItem指定的邮件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">LoadMail</span><span class="token punctuation">(</span><span class="token class-name">MailItem</span> mailItem<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 邮件的URL</span>
    <span class="token class-name"><span class="token keyword">string</span></span> mailUrl <span class="token operator">=</span> mailItem<span class="token punctuation">.</span>Url<span class="token punctuation">;</span>
    <span class="token comment">// 打开Hotmail服务器连接</span>
    xmlHttp_<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> mailUrl<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送请求</span>
    xmlHttp_<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取应答</span>
    <span class="token class-name"><span class="token keyword">string</span></span> mailData <span class="token operator">=</span> xmlHttp_<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>
    <span class="token comment">// 返回邮件数据</span>
    <span class="token keyword">return</span> mailData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="六、发送邮件" tabindex="-1"><a class="header-anchor" href="#六、发送邮件" aria-hidden="true">#</a> 六、发送邮件</h2><p>LoadMail()方法通过发送HTTP/1.1 GET请求获取邮件，类似地，用Hotmail发件箱发送邮件时我们提交一个POST请求，如下面的SendMail()方法所示。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 发送一个邮件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendMail</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> from<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fromName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> to<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> subject<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> body<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre></div><p>首先准备好后面要用到的引号字符以及邮件的时间标记：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 引号字符</span>
<span class="token class-name"><span class="token keyword">string</span></span> quote <span class="token operator">=</span> <span class="token string">&quot;\\u0022&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 时间标记</span>
<span class="token class-name">DateTime</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> timeStamp <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;ddd, dd MMM yyyy hh:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>HTTPMail协议采用与SMTP相似的通信模式。Outlook Express用MIME格式发送邮件，但为简单计，本例我们只发送纯文本的邮件：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 构造POST请求的内容</span>
<span class="token class-name"><span class="token keyword">string</span></span> postBody <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 邮件头.</span>
postBody <span class="token operator">+=</span> <span class="token string">&quot;MAIL FROM:&lt;&quot;</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">&quot;&gt;\\r\\n&quot;</span><span class="token punctuation">;</span>
postBody <span class="token operator">+=</span> <span class="token string">&quot;RCPT TO:&lt;&quot;</span> <span class="token operator">+</span> to <span class="token operator">+</span> <span class="token string">&quot;&gt;\\r\\n&quot;</span><span class="token punctuation">;</span>
postBody <span class="token operator">+=</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">;</span>
postBody <span class="token operator">+=</span> <span class="token string">&quot;From: &quot;</span> <span class="token operator">+</span> quote <span class="token operator">+</span> fromName <span class="token operator">+</span> quote <span class="token operator">+</span> <span class="token string">&quot; &lt;&quot;</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">&quot;&gt;\\r\\n&quot;</span><span class="token punctuation">;</span>
postBody <span class="token operator">+=</span> <span class="token string">&quot;To: &lt;&quot;</span> <span class="token operator">+</span> to <span class="token operator">+</span> <span class="token string">&quot;&gt;\\r\\n&quot;</span><span class="token punctuation">;</span>
postBody <span class="token operator">+=</span> <span class="token string">&quot;Subject: &quot;</span> <span class="token operator">+</span> subject <span class="token operator">+</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">;</span>
postBody <span class="token operator">+=</span> <span class="token string">&quot;Date: &quot;</span> <span class="token operator">+</span> timeStamp <span class="token operator">+</span> <span class="token string">&quot; -0000\\n&quot;</span><span class="token punctuation">;</span>
postBody <span class="token operator">+=</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 邮件正文</span>
postBody <span class="token operator">+=</span> body<span class="token punctuation">;</span>
</code></pre></div><p>发送邮件时，我们要把Content-Type请求头设置成message/rfc821，表示这个请求包含一个遵从RFC821的消息。最后要做的就是把邮件发送到服务器：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 打开连接</span>
xmlHttp_<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> sendUrl_<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 发送请求</span>
xmlHttp_<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;message/rfc821&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xmlHttp_<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>postBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>只要目标地址正确无误，Hotmail就会把邮件发送到目的地。</p><h2 id="结束语" tabindex="-1"><a class="header-anchor" href="#结束语" aria-hidden="true">#</a> 结束语</h2><p>Hotmail是世界上最大的免费Web邮件提供商。但是，Hotmail使用的HTTPMail协议是非公开的，从而为编写直接访问Hotmail的客户程序带来了困难。本文示范了如何在C#环境中利用XMLHTTP组件直接连接到Hotmail，以及如何发送和接收邮件，证明了通过HTTPMail连接Hotmail可以做到象使用POP3、IMAP4、SMTP等协议一样简单。</p>`,62),i={href:"http://developer.ccidnet.com/pub/html/developer/code/download/HotmailCSharp_code.zip",target:"_blank",rel:"noopener noreferrer"},r=n("blockquote",null,[n("p",null,"（责任编辑:西门吹雪）")],-1);function m(g,d){const a=p("ExternalLinkIcon");return o(),e("div",null,[k,n("p",null,[s("下载本文的完整代码： "),n("a",i,[s("HotmailCSharp_code.zip"),c(a)]),s("(8K)。")]),r])}const x=t(u,[["render",m],["__file","file4.html.vue"]]);export{x as default};
