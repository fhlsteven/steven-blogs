import{_ as n,o as s,c as a,a as t}from"./app-f0851ed3.js";const p={},e=t(`<h1 id="浅析c-中的文件操作" tabindex="-1"><a class="header-anchor" href="#浅析c-中的文件操作" aria-hidden="true">#</a> 浅析C#中的文件操作</h1><p>微软的.Net框架为我们提供了基于流的I/O操作方式，这样就大大简化了开发者的工作。因为我们可以对一系列的通用对象进行操作，而不必关心该I/O操作是和本机的文件有关还是和网络中的数据有关。.Net框架主要为我们提供了一个System.IO命名空间，该命名空间基本包含了所有和I/O操作相关的类。</p><p>本文将向大家介绍一些基本的文件操作方法，包括对文件系统中的目录和文件的操作，还有就是文件的读写操作等。通过运用System.IO.DirectoryInfo类和System.IO.FileInfo类我们可以轻易的完成与目录和文件相关的操作，而通过运用System.IO.StreamReader类和System.IO.StreamWriter类我们可以方便的完成与文件的读写相关的操作。</p><h2 id="命名空间概览" tabindex="-1"><a class="header-anchor" href="#命名空间概览" aria-hidden="true">#</a> 命名空间概览</h2><p>下面的表格显示了System.IO命名空间中最重要的一些类，通过运用这些类我们就能完成基本的文件操作。</p><p>表1</p><table><thead><tr><th>类名</th><th>功能和用途</th></tr></thead><tbody><tr><td>BinaryReader、BinaryWriter</td><td>读写二进制数据</td></tr><tr><td>Directory、File、DirectoryInfo以及FileInfo</td><td>创建、删除并移动目录和文件，通过属性获取特定目录和文件的相关信息</td></tr><tr><td>FileStream</td><td>以随机方式访问文件</td></tr><tr><td>MemoryStream</td><td>访问存储在内存中的数据</td></tr><tr><td>StreamReader 、StreamWriter</td><td>读写文本数据信息</td></tr><tr><td>StringReader、StringWriter</td><td>运用字符串缓冲读写文本数据信息</td></tr></tbody></table><h2 id="运用directoryinfo类和fileinfo类" tabindex="-1"><a class="header-anchor" href="#运用directoryinfo类和fileinfo类" aria-hidden="true">#</a> 运用DirectoryInfo类和FileInfo类</h2><p>DirectoryInfo类和FileInfo类的基类都是FileSystemInfo类，这个类是一个抽象类，也就是说你不可以实例化该类，只能通过继承产生其子类并实例化其子类。然而你却可以运用由该类定义的各种属性，下面的表格显示了该类已经定义了的各种属性。</p><p>表2</p><table><thead><tr><th>属性</th><th>功能和用途</th></tr></thead><tbody><tr><td>Attributes</td><td>返回和文件相关的属性值，运用了FileAttributes枚举类型值</td></tr><tr><td>CreationTime</td><td>返回文件的创建时间</td></tr><tr><td>Exists</td><td>检查文件是否存在于给定的目录中</td></tr><tr><td>Extension</td><td>返回文件的扩展名</td></tr><tr><td>LastAccessTime</td><td>返回文件的上次访问时间</td></tr><tr><td>FullName</td><td>返回文件的绝对路径</td></tr><tr><td>LastWriteTime</td><td>返回文件的上次写操作时间</td></tr><tr><td>Name</td><td>返回给定文件的文件名</td></tr><tr><td>Delete()</td><td>删除一个文件的方法，请务必谨慎地运用该方法</td></tr></tbody></table><p>DirectoryInfo类提供了创建、删除和移动目录等方法，要运用表2中的各种属性，我们首先得创建一个DirectoryInfo类的对象，然后就可以访问其各种属性了。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DirectoryInfo</span> dir1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span><span class="token string">@&quot;F:\\Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Full Name is : {0}&quot;</span><span class="token punctuation">,</span> dir1<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Attributes are : {0}&quot;</span><span class="token punctuation">,</span> dir1<span class="token punctuation">.</span>Attributes<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>同时，我们还可以运用FileAttributes枚举类型值来获取和文件相关的各种属性，下面的表格就显示了该枚举类型中的各种值。</p><p>表3</p><table><thead><tr><th>值</th><th>功能和用途</th></tr></thead><tbody><tr><td>Archive</td><td>返回文件的存档状态</td></tr><tr><td>Compressed</td><td>返回文件是否被压缩</td></tr><tr><td>Directory</td><td>返回文件是否是一个目录</td></tr><tr><td>Encrypted</td><td>返回文件是否被加密</td></tr><tr><td>Hidden</td><td>返回文件是否是隐藏的</td></tr><tr><td>Offline</td><td>表明文件数据是不可得的</td></tr><tr><td>ReadOnly</td><td>表明文件是只读的</td></tr><tr><td>System</td><td>表明文件是一个系统文件</td></tr></tbody></table><h2 id="目录下的文件操作" tabindex="-1"><a class="header-anchor" href="#目录下的文件操作" aria-hidden="true">#</a> 目录下的文件操作</h2><p>运用DirectoryInfo类的对象我们可以轻松的实现对目录以及和目录中的文件相关的操作，假如你要获得某个目录F:\\Pictures下的所有BMP文件，那么通过下面的代码就可以实现该功能。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DirectoryInfo</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span><span class="token string">@&quot;F:\\ Pictures&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> bmpfiles <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span><span class="token string">&quot;*.bmp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Total number of bmp files&quot;</span><span class="token punctuation">,</span> bmpfiles<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">FileInfo</span> f <span class="token keyword">in</span> bmpfiles<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Name is : {0}&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Length of the file is : {0}&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Creation time is : {0}&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>CreationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Attributes of the file are : {0}&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>Attributes<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上面的代码中我们首先创建了一个DirectoryInfo对象，然后通过调用该对象的GetFiles方法获取目录F:\\Pictures下的所有以bmp为扩展名的文件，该方法返回的值是一个FileInfo类型的数组，每个元素则代表一个文件。最后，程序还列举了每个BMP文件的相关属性。</p><h2 id="创建子目录" tabindex="-1"><a class="header-anchor" href="#创建子目录" aria-hidden="true">#</a> 创建子目录</h2><p>运用DirectoryInfo类创建子目录是非常容易的，你只要调用其中CreateSubdirectory（）方法即可，演示代码如下。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DirectoryInfo</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span><span class="token string">@&quot;F:\\ Pictures&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    dir<span class="token punctuation">.</span><span class="token function">CreateSubdirectory</span><span class="token punctuation">(</span><span class="token string">&quot;Sub&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dir<span class="token punctuation">.</span><span class="token function">CreateSubdirectory</span><span class="token punctuation">(</span><span class="token string">@&quot;Sub\\MySub&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="运用fileinfo类创建、删除文件" tabindex="-1"><a class="header-anchor" href="#运用fileinfo类创建、删除文件" aria-hidden="true">#</a> 运用FileInfo类创建、删除文件</h3><p>通过FileInfo类，我们可以方便地创建出文件，并可以访问文件的属性同时还可以对文件进行打开文件、关闭文件、读写文件等基本的操作。下面的代码显示了如何创建一个文本文件并且去访问其创建时间、文件的绝对路径以及文件属性等文件信息，最后程序还给出了删除文件的方法。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">FileInfo</span> fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span><span class="token string">@&quot;F:\\Myprogram.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileStream</span> fs <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Creation Time: {0}&quot;</span><span class="token punctuation">,</span> fi<span class="token punctuation">.</span>CreationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Full Name: {0}&quot;</span><span class="token punctuation">,</span> fi<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;FileAttributes: {0}&quot;</span><span class="token punctuation">,</span> fi<span class="token punctuation">.</span>Attributes<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Press any key to delete the file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fstr<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fi<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="理解fileinfo类的open-方法" tabindex="-1"><a class="header-anchor" href="#理解fileinfo类的open-方法" aria-hidden="true">#</a> 理解FileInfo类的Open()方法</h2><p>我们在对文件进行读写操作之前必须打开文件，FileInfo类为我们提供了一个Open（）方法，该方法包含了两个枚举类型值的参数，一个为FileMode枚举类型值，另一个为FileAccess枚举类型值。通过设定这两个参数值，我们可以对文件的访问模式和操作权限进行控制。下面的两个表格分别显示了FileMode枚举类型的值和FileAccess枚举类型的值。</p><p>表4</p><table><thead><tr><th>值</th><th>功能和用途</th></tr></thead><tbody><tr><td>Append</td><td>打开文件并添加数据，运用该方法时FileAccess枚举类型值应为Write。</td></tr><tr><td>Create</td><td>创建一个新文件，有可能会覆盖已经存在的文件。</td></tr><tr><td>CreateNew</td><td>创建一个新文件，如果该文件已经存在，则抛出IOException异常。</td></tr><tr><td>Open</td><td>打开一个已经存在的文件。</td></tr><tr><td>OpenOrCreate</td><td>打开文件，如果该文件不存在，则创建之。</td></tr><tr><td>Truncate</td><td>截短一个已经存在的文件。</td></tr></tbody></table><p>表5</p><table><thead><tr><th>值</th><th>功能和用途</th></tr></thead><tbody><tr><td>Read</td><td>可以从一个文件中读取数据。</td></tr><tr><td>ReadWrite</td><td>可以从一个文件中读取数据，同时还可以向文件中写入数据。</td></tr><tr><td>Write</td><td>可以向文件中写入数据。</td></tr></tbody></table><p>下面的代码显示了Open()方法的具体运用方法。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">FileInfo</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span><span class="token string">&quot;F:\\MyFile.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileStream</span> s <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>FileMode<span class="token punctuation">.</span>OpenorWrite<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="运用streamreader类和streamwriter类实现文件的读写操作" tabindex="-1"><a class="header-anchor" href="#运用streamreader类和streamwriter类实现文件的读写操作" aria-hidden="true">#</a> 运用StreamReader类和StreamWriter类实现文件的读写操作</h3><p>对文件的读写操作应该是最重要的文件操作，System.IO命名空间为我们提供了诸多文件读写操作类，在这里我要向大家介绍最常用也是最基本的StreamReader类和StreamWriter类。从这两个类的名称我们不难发现它们都是基于流的读写操作类。</p><p>我们可以通过File类的OpenText()方法来获取一个StreamReader对象，通过该对象我们可以实现对文本文件的读操作，方法如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Reading the contents from the file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">StreamReader</span> s <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">OpenText</span><span class="token punctuation">(</span><span class="token string">&quot;MyText.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> read <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
s<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>而通过调用<code>FileInfo</code>类的<code>CreateText()</code>方法我们可以获取一个<code>StreamWriter</code>对象，调用<code>StreamWriter</code>类的<code>WriteLine()</code>我们就可以向文本文件中写入数据了，方法如下：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">FileInfo</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span><span class="token string">&quot;MyText.txt&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">StreamWriter</span> w <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">CreateText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
w<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;This is from&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
w<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Chapter 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
w<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Of C# Module&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>NewLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
w<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Thanks for your time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
w<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>以上我简要地向大家介绍了C#文件操作的基本知识和方法，通过本文大家不难发现.Net框架下I/O操作的方便性。读者在学习了本文后，如果要进行一些基本的文件操作，那么对于System.IO命名空间中的诸如DirectoryInfo类、FileInfo类、FileStream类、StreamReader类以及StreamWriter类等类一定得有基本了解并在实际应用中灵活使用之。如果要对文件操作有更进一步的控制，那么不妨去研究一下System.IO命名空间中的更为具体和细节的一些类。最后，希望本文对大家能有所帮助。</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>Powered by DvNews.net
来源：网络
阅读：364 次
日期：2003-6-17
</code></pre></div>`,43),o=[e];function c(u,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","folder11.html.vue"]]);export{r as default};
