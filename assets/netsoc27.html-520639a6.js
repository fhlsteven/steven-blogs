import{_ as n,o as s,c as a,a as t}from"./app-477de5b2.js";const p="/steven-blogs/assets/netsoc27_1-68726da3.png",o={},e=t(`<h1 id="visual-c-托管socket的实现方法-一" tabindex="-1"><a class="header-anchor" href="#visual-c-托管socket的实现方法-一" aria-hidden="true">#</a> Visual C#托管Socket的实现方法(一)</h1><p>Socket就是套接字，它是网络编程中最常用遇到的概念和工具。在TCP/IP网络中，传送和接收数据就会经常使用到Socket，由于使用Socket能够在网络上处理复杂数据，所以在各种网络应用程序中，涉及到数据传送和接收，一般都会使用Socket，可见要掌握网络编程，精通Socket是非常重要。由于Socket本身的复杂性，决定了掌握它是比较困难的。Visual C＃是微软公司推荐的开发.Net平台应用程序的主要语言，随着.Net的深入人心，目前很多有远见的公司都把以前的软件转向了.Net平台。掌握网络编程始终是学习一种开发语言的重点，这一点对于Visual C＃也同样如此。Visual C＃实现网络功能其关键也是掌握托管Socket的使用方法。本文就来详细介绍Visual C＃中利用托管Socket实现网络数据传送和接收的实现方法及其注意事项。</p><h2 id="一-简介socket" tabindex="-1"><a class="header-anchor" href="#一-简介socket" aria-hidden="true">#</a> 一．简介Socket</h2><p>Socket诞生于上个世纪80年代初，美国政府的高级研究工程机构（ARPA）给加利福尼亚大学伯克力（Berkeley）分校提供了资金，委托他们在UNIX操作系统下实现TCP/IP协议的开发接口。于是研发人员就为TCP/IP网络通信开发了一个API（应用程序接口）。这个API称为Socket接口（套接字）。所以有时候说，Socket是TCP/IP上的API。</p><p>到了上个世纪90年代，当时的一些网络开发商，包括现在地Sun和Microsoft公司等，共同制定了一套WINDOWS下的网络编程接口，即WindowsSockets规范，简称WinSock规范。WinSock规范是一套开放的、支持多种协议的Windows下的网络编程接口。从1991年的1.0版到1995年的2.0.8版，经过不断完善并在Intel、Microsoft、Sun等公司的大力支持下，已成为Windows网络编程的事实上的标准。目前，WinSock规范主要有1.1版和2.0版。两者的最重要区别是1.1版只支持TCP/IP协议，而2.0版可以支持多协议。2.0版有良好的向后兼容性，任何使用1.1版的源代码，二进制文件，应用程序都可以不加修改地在2.0规范下使用。</p><p>可见Socket接口其实是TCP/IP网络的API接口函数，Socket数据传输其实就是一种特殊的I/O。常用的Socket类型有两种：流式Socket（SOCK_STREAM）和数据报式Socket（SOCK_DGRAM）。流式是一种面向连接的Socket，针对于面向连接的TCP服务应用；数据报式Socket是一种无连接的Socket，对应于无连接的UDP服务应用。</p><h2 id="二-visual-c-中操作socket" tabindex="-1"><a class="header-anchor" href="#二-visual-c-中操作socket" aria-hidden="true">#</a> 二．Visual C＃中操作Socket</h2><p>虽然Visual C＃可以使用NetworkStream来传送、接收数据，但NetworkStream在使用中有很大的局限性，利用NetworkStream只能传送和接收字符类型的数据，如果要传送的是一些复杂的数据如：二进制数据等，它就显得能力有限了。但使用NetworkStream在处理自身可操作数据时，的确要比Socket方便许多。Socket（套接字）几乎可以处理任何在网络中需要传输的数据类型。</p><p>我们知道Visual C＃和Visual C＋＋的区别之一，就是Visual C＃没有属于自己的类库，而Visual C＋＋却是有的，Visual C＃使用的类库是.Net框架为所有开发.Net平台程序语言提供的一个公用的类库——.Net FrameWork SDK。Visual C＃主要网络功能主要使用.Net FrameWork SDK中的提供的二个命名空间“System.Net.Sockets”和“System.Net”。而实现Socket使用的是命名空间“System.Net.Sockets”中的Socket类。Visual C＃通过创建Socket类的实例来实现Socket的托管版本。在Visual C＃中创建完Socket实例后，可以通过此Socket实例的Bind方法绑定到网络中指定的终结点，也可以通过其Connect方法向指定的终结点建立的连接。连接创建完毕，就可以使用其Send或SendTo方法将数据发送到Socket；同样使用其的Receive或ReceiveFrom方法从Socket中读取数据。在Socket使用完毕后，请使用其的Shutdown方法禁用Socket，并使用Close方法关闭Socket。表01和表02是Socket类中的常用属性和方法及其简要说明。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>AddressFamily</td><td>获取Socket的地址族。</td></tr><tr><td>Available</td><td>获取已经从网络接收且可供读取的数据量。</td></tr><tr><td>Blocking</td><td>获取或设置一个值，该值指示Socket是否处于阻塞模式。</td></tr><tr><td>Connected</td><td>获取一个值，该值指示Socket是否已连接到远程资源。</td></tr><tr><td>Handle</td><td>获取Socket的操作系统句柄。</td></tr><tr><td>LocalEndPoint</td><td>获取本地终结点。</td></tr><tr><td>ProtocolType</td><td>获取Socket的协议类型。</td></tr><tr><td>RemoteEndPoint</td><td>获取远程终结点。</td></tr><tr><td>SocketType</td><td>获取Socket的类型。</td></tr></tbody></table><p>表01：Socket类的常用属性及其说明</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>创建新的Socket以处理传入的连接请求。</td></tr><tr><td>BeginAccept</td><td>开始一个异步请求，以创建新的Socket来接受传入的连接请求。</td></tr><tr><td>BeginConnect</td><td>开始对网络设备连接的异步请求。</td></tr><tr><td>BeginReceive</td><td>开始从连接的Socket中异步接收数据。</td></tr><tr><td>BeginReceiveFrom</td><td>开始从指定网络设备中异步接收数据。</td></tr><tr><td>BeginSend</td><td>将数据异步发送到连接的</td></tr><tr><td>BeginSendTo</td><td>向特定远程主机异步发送数据。</td></tr><tr><td>Bind</td><td>使Socket与一个本地终结点相关联。</td></tr><tr><td>Close</td><td>强制Socket连接关闭。</td></tr><tr><td>Connect</td><td>建立到远程设备的连接。</td></tr><tr><td>EndAccept</td><td>结束异步请求以创建新的Socket来接受传入的连接请求</td></tr><tr><td>EndConnect</td><td>结束挂起的异步连接请求。</td></tr><tr><td>EndReceive</td><td>结束挂起的异步读取。</td></tr><tr><td>EndReceiveFrom</td><td>结束挂起的、从特定终结点进行异步读取。</td></tr><tr><td>EndSend</td><td>结束挂起的异步发送</td></tr><tr><td>EndSendTo</td><td>结束挂起的、向指定位置进行的异步发送。</td></tr><tr><td>GetSocketOption</td><td>返回Socket选项的值。</td></tr><tr><td>IOControl</td><td>为Socket设置低级别操作模式</td></tr><tr><td>Listen</td><td>将Socket置于侦听状态</td></tr><tr><td>Poll</td><td>将Socket置于侦听状态</td></tr><tr><td>Receive</td><td>接收来自连接Socket的数据。</td></tr><tr><td>ReceiveFrom</td><td>接收数据文报并存储源终结点。</td></tr><tr><td>Select</td><td>确定一个或多个套接字的状态。</td></tr><tr><td>Send</td><td>将数据发送到连接的</td></tr><tr><td>SendTo</td><td>将数据发送到特定终结点。</td></tr><tr><td>SetSocketOption</td><td>设置Socket选项。</td></tr><tr><td>Shutdown</td><td>禁用某Socket上的发送和接收。</td></tr></tbody></table><p>表02：Socket类的常用方法及其说明</p><p>其中“BeginAccept”和“EndAccept”、“BeginConnect”和“EndConnect”、“BeginReceive”和“EndReceive”、“BeginReceiveFrom”和“EndReceiveFrom”、“BeginSend”和“EndSend”、“BeginSendTo”和“EndSendTo”是六组异步方法，</p><p>其功能分别相当于“Accept”、“Connect”、“Receive”、“ReceiveFrom”、“Send”和“SendTo”方法。</p><p>下面就通过一个具体的示例，来介绍Visual C＃中如何通过托管Socket实现数据传送和接收的具体方法。</p><p>本文示例其实是由二部分组成，也可以看成是客户机程序和服务器程序。客户机程序功能是通过Socket向服务器程序创建连接，并在连接完成后，向服务器发送数据；服务器程序通过侦听端口，接受网络的Socket的连接请求，并在连接完成后，接收从客户机发送来的数据，并显示出来。下面首先来介绍Visual C＃通过托管Socket实现客户机程序的具体方法。</p><h2 id="三-本文介绍程序的设计、调试、运行的软件环境" tabindex="-1"><a class="header-anchor" href="#三-本文介绍程序的设计、调试、运行的软件环境" aria-hidden="true">#</a> 三．本文介绍程序的设计、调试、运行的软件环境</h2><p>（1）.微软公司视窗2000服务器版<br> （2）.Visual Studio .Net正式版，.Net FrameWork SDK版本号3705</p><h2 id="四-利用socket来传送数据" tabindex="-1"><a class="header-anchor" href="#四-利用socket来传送数据" aria-hidden="true">#</a> 四．利用Socket来传送数据</h2><p>Visual C＃在使用Socket传送数据时要注意下列问题的解决方法：</p><ol><li>创建Socket实例，使用此实例创建和远程终结点的连接，并判断连接是否成功建立。</li><li>发送数据到Socket，实现数据传送。</li></ol><p>这些问题解决方法都可以在下面介绍代码中找到相对应的部分。由于下面的代码都有详细的注解，这里就不详细介绍。下面是利用Socket传送数据的具体实现步骤：</p><p>1.启动Visual Studio .Net，并新建一个Visual C＃项目，项目名称为【利用Socket来发送数据】。</p><p>2.把Visual Studio .Net的当前窗口切换到【Form1.cs（设计）】窗口，并从【工具箱】中的【Windows窗体组件】选项卡中往Form1窗体中拖入下列组件，并执行相应操作：</p><p>二个TextBox组件，一个用以输入远程主机的IP地址，一个用以输入往远程主机传送的数据。<br> 一个StausBar组件，用以显示程序的运行状况。<br> 一个ListBox组件，用以显示程序已传送的数据信息<br> 三个Label组件。<br> 二个Button组件，名称分别为button1、button2，并在这二个组件被拖入窗体后，分别双击它们，则系统会在Form1.cs文件中自动产生这二个组件的Click事件对应的处理代码。</p><p>3.【解决方案资源管理器】窗口中，双击Form1.cs文件，进入Form1.cs文件的编辑界面。</p><p>4.以下面代码替代系统产生的InitializeComponent过程：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>TextBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>TextBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>ListBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statusBar1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>StatusBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SuspendLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;label1&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;IP地址：&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>BorderStyle <span class="token operator">=</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>
         Forms<span class="token punctuation">.</span>BorderStyle<span class="token punctuation">.</span>FixedSingle<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;textBox1&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>FlatStyle <span class="token operator">=</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>FlatStyle<span class="token punctuation">.</span>Flat<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;button1&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;连接&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>button1_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label2<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label2<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;label2&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label2<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label2<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;发送信息：&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>BorderStyle <span class="token operator">=</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>
         Forms<span class="token punctuation">.</span>BorderStyle<span class="token punctuation">.</span>FixedSingle<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;textBox2&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span>ItemHeight <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;listBox1&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">336</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statusBar1<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">295</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statusBar1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;statusBar1&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statusBar1<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">370</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statusBar1<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statusBar1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;无连接&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label3<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label3<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;label3&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label3<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label3<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label3<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;已经发送的信息：&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button2<span class="token punctuation">.</span>FlatStyle <span class="token operator">=</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>FlatStyle<span class="token punctuation">.</span>Flat<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button2<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button2<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;button2&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button2<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button2<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button2<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;发送&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>button2<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>EventHandler</span>
         <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>button2_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>AutoScaleBaseSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ClientSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">370</span><span class="token punctuation">,</span> <span class="token number">317</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Control<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>button2 <span class="token punctuation">,</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>statusBar1 <span class="token punctuation">,</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>listBox1 <span class="token punctuation">,</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2 <span class="token punctuation">,</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>label2 <span class="token punctuation">,</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>button1 <span class="token punctuation">,</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1 <span class="token punctuation">,</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>label1 <span class="token punctuation">,</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>label3<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>FormBorderStyle <span class="token operator">=</span> System<span class="token punctuation">.</span>
         Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>FormBorderStyle<span class="token punctuation">.</span>FixedSingle<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>MaximizeBox <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Form1&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;利用Socket来发送数据&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ResumeLayout</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>至此【利用Sokcet来传送数据】项目设计后的界面就完成了，具体如图01所示：</p><p><img src="`+p+`" alt="27_1"><br> 图01：【利用Sokcet来传送数据】项目的设计界面</p><p>6.在Form1的class代码区中加入下列代码，下列代码的作用是定义全局变量和创建全局使用的实例：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> port <span class="token operator">=</span> <span class="token number">8000</span> <span class="token punctuation">;</span>
<span class="token comment">//定义侦听端口号</span>
<span class="token keyword">private</span> <span class="token class-name">TcpClient</span> tcpc  <span class="token punctuation">;</span>
<span class="token comment">//对服务器端创建TCP连接</span>
<span class="token keyword">private</span> <span class="token class-name">Socket</span> stSend <span class="token punctuation">;</span>
<span class="token comment">//创建发送数据套接字</span>
<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> tcpConnect <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">;</span>
<span class="token comment">//定义标识符，用以表示TCP连接是否建立</span>
</code></pre></div><p>7.用下列代码替换Form1.cs中的button1组件的Click事件对应的处理代码，下列代码的功能是初始化以创建的Socket实例，并向远程终结点提出连接申请，并判断连接是否建立：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//以下代码是判断是否和远程终结点成功连接</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        stSend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span>
                  SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//初始化一个Socket实例</span>
        <span class="token class-name">IPEndPoint</span> tempRemoteIP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span>
                  <span class="token punctuation">(</span>IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据IP地址和端口号创建远程终结点</span>
        <span class="token class-name">EndPoint</span> epTemp <span class="token operator">=</span> <span class="token punctuation">(</span>EndPoint<span class="token punctuation">)</span>tempRemoteIP<span class="token punctuation">;</span>
        stSend<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>epTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//连接远程主机的8000端口号</span>
        statusBar1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;成功连接远程计算机！&quot;</span><span class="token punctuation">;</span>
        tcpConnect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        button1<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        button2<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        statusBar1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">&quot;目标计算机拒绝连接请求！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>8.用下列代码替换Form1.cs中button2组件的Click事件对应的处理代码，下列代码的功能是通过已建立的连接，利用Socket来传送数据到远程主机。</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">button2_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">int</span></span> iLength <span class="token operator">=</span> textBox2<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
    <span class="token comment">//获取要发送的数据的长度</span>
    <span class="token class-name">Byte<span class="token punctuation">[</span><span class="token punctuation">]</span></span> bySend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>iLength<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//根据获取的长度定义一个Byte类型数组</span>
    bySend <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span>GetBytes
         <span class="token punctuation">(</span>textBox2<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//按照指定编码类型把字符串指定到指定的Byte数组</span>
    <span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> stSend<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>bySend<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//发送数据</span>
    listBox1<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>textBox2<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>9.用下列代码替换Form1.cs中“清理所有正在使用的资源。”对应的代码。其作用是在程序退出之前，判断连接状态，如果没有退出，则向远程主机发送控制码“STOP”，用以断开和远程主机的连接，并清除相应资源。所谓控制码就是网络应用程序之间彼此交换信息的一种自定义码子，应用程序通过接收、发送这些码子，可以明确网络应用程序的行为，保证执行的一致性，也就少了很多出错的几率。控制码在编写远程控制方面的应用程序时使用比较多。之所以要有这一步是因为在用Visual C＃编写网络应用程序的时候，很多人都遇到这样的情况。当程序退出后，通过Windows的“资源管理器”看到的是进程数目并没有减少。这是因为程序中使用的线程可能并没有有效退出。虽然Thread类中提供了“Abort”方法用以中止进程，但并不能够保证成功退出。因为进程中使用的某些资源并没有回收。可见在某些情况下，依靠Visual C＃的垃圾回收器也不能保证完全的回收资源，这时就需要我们自己手动回收资源的。下面就是手动回收资源采用的一种方法：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> disposing<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tcpConnect<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Byte<span class="token punctuation">[</span><span class="token punctuation">]</span></span> bySend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//根据字符串“STOP”长度来定义Byte数组</span>
        bySend <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>
                  Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token string">&quot;STOP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> stSend<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>bySend<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//发送控制码</span>
        stSend<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//关闭套接字</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>disposing<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>components <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            components<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span>disposing<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>至此在上述步骤都正确执行后，【利用Socket来传送数据】就全部完成了。</p><p>5.在Form1.cs文件的开头的导入命名空间的代码区，添加下列代码，</p><p>下列代码是导入下面程序中使用到的类所在的命名空间：</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span> <span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Sockets</span> <span class="token punctuation">;</span>
<span class="token comment">//使用到TcpListen类</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net</span> <span class="token punctuation">;</span>
</code></pre></div>`,43),c=[e];function u(l,k){return s(),a("div",null,c)}const r=n(o,[["render",u],["__file","netsoc27.html.vue"]]);export{r as default};
