import{_ as n,o as a,c as s,a as t}from"./app-d9da1b6d.js";const e={},o=t(`<h1 id="screen-capture-utility-in-c-and-net" tabindex="-1"><a class="header-anchor" href="#screen-capture-utility-in-c-and-net" aria-hidden="true">#</a> Screen Capture Utility in C# and .NET</h1><table><thead><tr><th>Submitted By</th><th>User Level</th><th>Date of Submission</th></tr></thead><tbody><tr><td>Michael Gold</td><td>Intermediate</td><td>4/15/2002</td></tr></tbody></table><p>Figure 1 - Screen Capturing the .NET environment</p><p>Source Code: ScreenCaptureDotNet.zip</p><p>After I created my article on Form Capture, I seemed to get quite a few inquiries on how to do a more useful function using .NET: Screen Capture. It turns out that screen capture is done in a much similar fashion. You still bring in the GDI API, but you also need to bring in the CreateDC API call. Below is the code for screen capture:</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PerformCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">// turn the form invisible so you don&#39;t show it during capture</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>Visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">//use the GDI call and create a DC to the whole display</span>
<span class="token class-name">IntPtr</span> dc1 <span class="token operator">=</span> <span class="token function">CreateDC</span><span class="token punctuation">(</span><span class="token string">&quot;DISPLAY&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//create a Graphics object for the screen dc</span>
<span class="token class-name">Graphics</span> g1 <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromHdc</span><span class="token punctuation">(</span>dc1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// create a compatible bitmap the size of the entire screen</span>
MyImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span>Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> g1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// use the bitmap to create another Graphics surface  so we can  BitBlast into the bitmap</span>
<span class="token class-name">Graphics</span> g2 <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>MyImage<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  Now go retrace our steps and get the device contexts for both the bitmap and the screen</span>
<span class="token comment">// Note:  Apparently you have to do this, and can&#39;t go directly from the aquired dc or exceptions are thrown</span>
<span class="token comment">//            When you try to release the dcs</span>
dc1 <span class="token operator">=</span> g1<span class="token punctuation">.</span><span class="token function">GetHdc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IntPtr</span> dc2 <span class="token operator">=</span> g2<span class="token punctuation">.</span><span class="token function">GetHdc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  Bit Blast  the screen into the Bitmap</span>
<span class="token function">BitBlt</span><span class="token punctuation">(</span>dc2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> dc1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13369376</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//   Remember to release the dc&#39;s, otherwise problems down the road</span>
g1<span class="token punctuation">.</span><span class="token function">ReleaseHdc</span><span class="token punctuation">(</span>dc1<span class="token punctuation">)</span><span class="token punctuation">;</span>
g2<span class="token punctuation">.</span><span class="token function">ReleaseHdc</span><span class="token punctuation">(</span>dc2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Save the image to JPEG file</span>
MyImage<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token string">@&quot;c:\\Captured.jpg&quot;</span><span class="token punctuation">,</span> ImageFormat<span class="token punctuation">.</span>Jpeg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  Now we can view our form again, so make it visible</span>
Visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;Finished Saving Image&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set the Bounds of the form so that it fills the entire screen</span>
<span class="token comment">// Because in our Paint event handler we are going to draw the bitmap to the form</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SetBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>PrimaryScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  ************** Set up functions for doing additional bitmap manipulation such as cropping a portion of </span>
<span class="token comment">//  ************* the image ****************(Not required for screen capture)</span>

<span class="token function">SetupCropping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
firstCrop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This application has a few additional functions. One is that you can crop a piece of the image in your screen capture as shown in figure 2:</p><p>Figure 2 - Cropping a Piece of the image</p><p>This is useful for pulling things out of the screen capture that you find necessary in your final image. Outlining the cropping region is performed using the MouseDown, MouseUp, and MouseMove event handlers. You need to maintain the state in which the cropping is in in order to successfully draw the cropping region. Below is the state diagram for tracking the drawing of the crop rectangle.</p><p>Figure 3 - UML State Chart of Cropping Drawn with WithClass 2000</p><p>Below is the code for the MouseMove event handler. As shown in the state diagram, it checks the state and condition to see if we should be doing the calculation on the cropping rectangle and if we should invalidate the rectangle.</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_MouseMove</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>MouseEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Check the state and condition to makes sure we can draw the cropping rectangle</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CroppingPaint <span class="token operator">&amp;&amp;</span> CropOn<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> StartedCrop<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// calculate width of cropping rectangle</span>
        DeltaX <span class="token operator">=</span> e<span class="token punctuation">.</span>X <span class="token operator">-</span> StartPoint<span class="token punctuation">.</span>X<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>DeltaX <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            DeltaX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        DeltaY <span class="token operator">=</span> e<span class="token punctuation">.</span>Y <span class="token operator">-</span> StartPoint<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>DeltaY <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            DeltaY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment">// force the cropping rectangle to redraw</span>
        <span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span>StartPoint<span class="token punctuation">.</span>X<span class="token punctuation">,</span> StartPoint<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> DeltaX <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">,</span> DeltaY <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="improvements" tabindex="-1"><a class="header-anchor" href="#improvements" aria-hidden="true">#</a> Improvements</h2><p>The cropping invalidation is a little messy, it needs to add rubber-banding functionality to the line drawing of the rectangle. Also I had to offset the image to get the cropping to work out the first time through the capture. Not sure if its something I&#39;m missing or a problem, but its in there like a band-aid. <code>&lt;g&gt;</code> Some nice improvements might include an undo, to undo cropping, the ability to put the image into a specified file rather than in <code>c:\\\\capture.jpg</code>. (Currently this is where the image is placed when its captured or saved). Additional features would be to save the image in different image formats, include a preference dialog for suffixes and prefixes to the captured image name, add a feature to enter text into the captured image. As with other projects in .NET the sky is the limit, but its a snap to add many of these additional functions using this environment. Stay tuned to C# Corner for the next version.</p><hr><p>About the Author: Mike Gold is President of Microgold Software Inc. and Creator of WithClass 2000 a UML Design Tool for C#. In the last few years Mike has consulted for companies such as Merrill Lynch and Chase Manhattan Bank in New York. He is been active in developing Visual C++ Applications for 10 years and looks forward to the possibilities in C#. You can reach him at <code>techsupport@microgold.com</code>.</p><hr>`,17),p=[o];function c(i,u){return a(),s("div",null,p)}const r=n(e,[["render",c],["__file","pic_img4.html.vue"]]);export{r as default};
