import{_ as n,o as s,c as a,a as t}from"./app-d9da1b6d.js";const p={},o=t(`<h1 id="c-如何获得指定机器开着的端口" tabindex="-1"><a class="header-anchor" href="#c-如何获得指定机器开着的端口" aria-hidden="true">#</a> C#如何获得指定机器开着的端口</h1><p>作者：网际浪子</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Sockets</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ScanPort</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">string</span></span> host<span class="token punctuation">;</span>   <span class="token comment">//目标主机 </span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> startPort<span class="token punctuation">;</span>  <span class="token comment">//开始端口 </span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> endPort<span class="token punctuation">;</span>   <span class="token comment">//结束端口 </span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> timeStart<span class="token punctuation">;</span>  <span class="token comment">//开始时间 </span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> timeEnd<span class="token punctuation">;</span>   <span class="token comment">//结束时间 </span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> portCount<span class="token punctuation">;</span>  <span class="token comment">//要扫描的端口总数 </span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> MaxThreadCount <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment">//同时运行的线程最大数目 </span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ManualResetEvent</span> ev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManualResetEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//父、子线程同步 </span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//下面一大段完成参数检查 </span>
        <span class="token comment">//可以使用这样的命令行执行程序: </span>
        <span class="token comment">// scanport bbs.whu.edu.cn 1 1024 -t 300 </span>
        <span class="token comment">// &quot;-t&quot; 参数表示同时运行的最大线程个数。也可不用此参数，默认为200。 </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Length <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>Length <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        host <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span> startPort <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> endPort <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;错误:端口应该为整数！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>startPort <span class="token operator">&gt;</span> endPort<span class="token punctuation">)</span>
        <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;起始端口不应该大于终止端口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">@&quot;-t&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;参数格式不正确！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                MaxThreadCount <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;错误:线程数目应该为整数！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        portCount <span class="token operator">=</span> endPort <span class="token operator">-</span> startPort <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;开始扫描时间: {0}&quot;</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        timeStart <span class="token operator">=</span> Environment<span class="token punctuation">.</span>TickCount<span class="token punctuation">;</span>

        <span class="token comment">//设置一个定时器，每200ms检测一下，若运行线程个数太少，就增加至MaxThreadCount </span>
        <span class="token class-name">Timer</span> timer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Timer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimerCallback</span><span class="token punctuation">(</span>OnTimer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//等待子线程结束 </span>
        ev<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;--扫描结束.--&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;结束扫描时间: {0}&quot;</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        timeEnd <span class="token operator">=</span> Environment<span class="token punctuation">.</span>TickCount<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;约用了 :{0} 秒.&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>timeEnd <span class="token operator">-</span> timeStart<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;端口扫描速率约为:{0} 端口/秒.&quot;</span><span class="token punctuation">,</span>
         <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1000.0</span> <span class="token operator">*</span> portCount <span class="token operator">/</span> <span class="token punctuation">(</span>timeEnd <span class="token operator">-</span> timeStart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTimer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> state<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">lock</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ScanIt</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//如果运行的线程较少，且扫描未完成 </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ScanIt<span class="token punctuation">.</span>instanceCount <span class="token operator">&lt;</span> MaxThreadCount<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>startPort <span class="token operator">&lt;=</span> endPort<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>startPort <span class="token operator">&lt;=</span> endPort<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name">ScanIt</span> scanIt1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ScanIt</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> startPort<span class="token punctuation">,</span> ev<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    scanIt1<span class="token punctuation">.</span><span class="token function">DoScan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    startPort<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ScanIt<span class="token punctuation">.</span>instanceCount <span class="token operator">&gt;=</span> MaxThreadCount<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>startPort <span class="token operator">&gt;</span> endPort<span class="token punctuation">)</span> ScanIt<span class="token punctuation">.</span>ShouldStop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: scanport TargetHost startPort endPort&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">ScanIt</span> <span class="token comment">//此类完成对目标主机某一端口的扫描</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> host<span class="token punctuation">;</span>　　　　　　　 <span class="token comment">//目标主机</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> port<span class="token punctuation">;</span>　　　　　　　　　<span class="token comment">//端口</span>
    <span class="token keyword">private</span> <span class="token class-name">ManualResetEvent</span> ev<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">TcpClient</span> tcpclient<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> instanceCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>　<span class="token comment">//同时存在的对象个数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">bool</span></span> ShouldStop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ScanIt</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> _host<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> _port<span class="token punctuation">,</span> <span class="token class-name">ManualResetEvent</span> _ev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        host <span class="token operator">=</span> _host<span class="token punctuation">;</span> port <span class="token operator">=</span> _port<span class="token punctuation">;</span> ev <span class="token operator">=</span> _ev<span class="token punctuation">;</span>
        thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">lock</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ScanIt</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> instanceCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//同时存在的对象个数加一</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoScan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">target</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            tcpclient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TcpClient</span><span class="token punctuation">(</span>Dns<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">.</span>AddressList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0} is found!&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            tcpclient<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">lock</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ScanIt</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">--</span>instanceCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ScanIt<span class="token punctuation">.</span>ShouldStop<span class="token punctuation">)</span><span class="token punctuation">)</span> ev<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//同时存在的对象个数减一</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Powered by DvNews.net</p><p>来源：uncj.net 阅读：169 次 日期：2003-6-30</p>`,5),c=[o];function e(u,l){return s(),a("div",null,c)}const i=n(p,[["render",e],["__file","netcode3.html.vue"]]);export{i as default};
