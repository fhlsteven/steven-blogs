import{_ as n,o as s,c as a,a as t}from"./app-8e5157a8.js";const o={},p=t(`<h1 id="c-教程第四课-循环控制语句" tabindex="-1"><a class="header-anchor" href="#c-教程第四课-循环控制语句" aria-hidden="true">#</a> C＃教程第四课:循环控制语句</h1><p>（Joe Mayo　2001年06月08日 17:17）</p><p>本节课将介绍如何使用C#控制语句中的循环语句，本课目的如下：</p><ol><li>学会&quot;while&quot;循环的用法</li><li>学会&quot;do&quot; 循环的用法</li><li>学会&quot;for&quot; 循环的用法</li><li>学会foreach循环的用法</li><li>进一步了解&quot;break&quot;语句的用法</li><li>如何使用&quot;continue&quot;语句</li></ol><p>在C#中，使用&quot;goto&quot;语句并不是一个最佳的建立循环的方法。本节课将介绍建立循环的常用方法。</p><h2 id="第一个要介绍的语句是while循环语句" tabindex="-1"><a class="header-anchor" href="#第一个要介绍的语句是while循环语句" aria-hidden="true">#</a> 第一个要介绍的语句是while循环语句</h2><p>1.清单 4-1. While循环：While loop.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Whileloop</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> myInt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>myInt <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;{0} &quot;</span><span class="token punctuation">,</span> myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            myInt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><ol><li><p>清单 4-1演示了一个简单的while 循环。</p><p>以关键字&quot;while&quot;开始，后面是个布尔表达式。所有的控制语句都使用了布尔表达式。这就意味着表达式必须计算出true 或者false值。本例中，我们将检查myInt变量，看看它是否小于10。 因为myInt已经初始化为0，第一次计算时，该布尔表达式将返回true值。一旦布尔表达式的值为true，将执行该布尔表达式后面块中的语句。</p></li><li><p>在while块中，我们把数字和空格输出到控制台中，之后，对 myInt进行加1运算。一旦执行了while块中的语句之后，再次计算布尔表达式的值，这种情况将一直循环下去，直到该布尔表达式的值为false为止。 一旦布尔表达式的值为false, 程序将从while 块之后的第一条语句开始执行。在本例中，我们把数字0到9输出到控制台中，之后退出while块，再输出一个新行到控制台</p></li></ol><p>同 &quot;while&quot;循环类似的是&quot;do&quot; 循环语句。</p><p>2.清单 4-2. Do 循环： Do loop.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Doloop</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> myChoice<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token comment">// Print A Menu</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;My Address Book\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;A - Add New Address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;D - Delete Address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;M - Modify Address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;V - View Addresses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Q - Quit\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Choice (A,D,M,V,or Q): &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Retrieve the user&#39;s choice</span>
            myChoice <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Make a decision based on the user&#39;s choice</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>myChoice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You wish to add an address.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You wish to delete an address.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You wish to modify an address.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">&quot;V&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">&quot;v&quot;</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;You wish to view the address list.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">&quot;Q&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">&quot;q&quot;</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Bye.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token punctuation">:</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0} is not a valid choice&quot;</span><span class="token punctuation">,</span> myChoice<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// Pause to allow the user to see the results</span>
            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Press any key to continue...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>myChoice <span class="token operator">!=</span> <span class="token string">&quot;Q&quot;</span> <span class="token operator">&amp;&amp;</span> myChoice <span class="token operator">!=</span> <span class="token string">&quot;q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Keep going until the user wants to quit</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><ol><li><p>清单 4-2 演示了&quot;do&quot;循环的例子。&quot;do&quot; 循环的格式是： do { &lt;语句&gt; } while (&lt;布尔表达式&gt;);其中的语句可以是任何合法的C#语句，布尔表达式同以前的规定一样，其返回值要么为true，要么为false。</p></li><li><p>如果你打算输出清单4-2 中的信息或者菜单，之后再读取用户的输入，那么就使用&quot;do&quot; 格式的循环而不要使用&quot;while&quot; 格式的循环语句。因为在本例中，布尔表达式的值是在循环结束处进行计算的,&quot;do&quot; 循环可以保证：循环体中的语句至少执行一次。与此相对应的是：&quot;while&quot; 循环一开始时，计算布尔表达式的值，&quot;while&quot; 循环不能保证循环体中的语句能够至少执行一次。</p></li><li><p>让我们来回顾一下清单 4-2中的内容。</p><p>在Main()方法中，我们定义了变量 &quot;myChoice&quot;为字符串类型。之后，输出一些信息到控制台，即输出一个可让用户进行选择的菜单。我们必须要得到用户的输入，即Console.ReadLine()方法所返回的值，该值存放在myChoice变量中。我们必须先得到用户的输入，之后再处理。要完成这件事，一个有效的方法是就使用 &quot;switch&quot;语句。注意到：为了获得同样的功能，我们既匹配了小写字母，也匹配了大写字母。另外一点是：我们使用了 &quot;default:&quot; case，这是个良好的编程作风。</p></li></ol><p>3.清单 4-3. For 循环: For loop.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Forloop</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;{0} &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><ol><li><p>清单 4-3 演示了&quot;for&quot; 循环的用法。</p><p>当你能够精确地知道循环的次数时，For 循环语句就派上了用场。本程序同清单 4-1中&quot;while&quot; 循环程序的运行结果一样。&quot;for&quot; 循环中，括号中内容由三个由分号隔开的部分： &quot;<code>(&lt;初始化表&gt;； &lt;布尔表达式&gt;； &lt;post-loop 动作表&gt;)</code>&quot;组成</p></li><li><p>初始化表是个由逗号隔开的表达式，在&quot;for&quot; 循环的整个周期中，这些表达式仅仅计算一次。计算是在一开始进行的，并且在循环语句的执行之前进行。正如在清单 4-3所见，通常初始化表是先初始化一个作为计数器的整型变量。</p></li><li><p>一旦进行初始化后，&quot;for&quot; 循环就进入第二部分：布尔表达式的计算。这里的布尔表达式可以写得很复杂，但是结果只能是true或者false。布尔表达式通常用来验证计数器变量的状态。</p></li><li><p>一旦布尔表达式的值为true时，就会执行&quot;for&quot; 循环大括号中的语句。通常情况下，这些语句从左大括号开始，不中断地一直执行到右大括号。但在清单4-3中，有几个例外，几个&quot;if&quot;语句改变了程序的流程。</p><p>第一个&quot;if&quot;语句检查&quot;i&quot;是否等于10，这里使用了&quot;break&quot;语句，可在此处跳出循环，转入 &quot;for&quot;块后面的第一条语句的执行。</p><p>第二条&quot;if&quot;语句使用了求余运算符，看看&quot;i&quot;是否能够被2整除，如果余数等于0，就执行 &quot;continue&quot;语句。控制将跳过循环体中余下的语句，转入下一轮新的循环。你需要在块中正确地组织好语句，一旦满足有关条件，就执行相应的语句。</p></li><li><p>一旦程序流程遇到continue语句，或者遇到块的结尾处的右括号，就转入&quot;for&quot; 循环括号中的第三项：post-loop 动作表，该表由逗号隔开，在&quot;for&quot;块中的语句都执行完毕之后，就执行该动作表中的动作。清单 4-3中的 post-loop 动作表中的动作很典型：计数器加1。一旦动作表执行完毕，流程就转到对布尔表达式值进行判别。循环将继续进行下去，直到布尔表达式的值为true。当布尔表达式的值为false，控制流程就转到 &quot;for&quot;块之后的第一条语句。</p></li></ol><p>4.清单 4-4. The ForEach 循环: ForEachloop.cs</p><div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ForEachloop</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Cheryl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Joe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Matt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Robert&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> person <span class="token keyword">in</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0} &quot;</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>说明</p><ol><li><p>&quot;foreach&quot; 循环列举出集合中所有的元素。</p><p>清单 4-4所使用的数组类型，就是这样的一个集合。(在&quot;System.Collections&quot;也可以由其他的数据类型作集合。). 在Main()方法中，我们所做的第一件事是：定义由四个字符串组成的数组names。</p></li><li><p>&quot;foreach&quot;括号中的表达式是由关键字in隔开的两个项组成。in右边的项是集合名，in左边的项是变量名，用来存放该集合中的每个元素。</p><p>该循环的运行过程如下：每一次循环时，从集合中取出一个新的元素值，放到只读变量中去，括号中的整个表达式返回值为true，&quot;foreach&quot;块中的语句就能够执行。一旦集合中的元素都已经被访问到，整个表达式的值为false，控制流程就转入到 &quot;foreach&quot; 块后面的第一条可执行语句。</p></li><li><p>在清单 4-4的例子中,我们使用了字符串变量person用来存放names数组的每个元素，并且使用Console.WriteLine()方法输出person 变量的值。</p></li></ol><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>到现在为止，你已经了解了&quot;while&quot;，&quot;do&quot;，&quot;for&quot;和&quot;foreach&quot; 循环语句的用法。最后你也学习了如何设置有关条件，来改变循环体块中的语句的流程。</p>`,25),e=[p];function c(u,l){return s(),a("div",null,e)}const k=n(o,[["render",c],["__file","cspcls4_4.html.vue"]]);export{k as default};
